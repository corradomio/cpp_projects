//
// Created by Corrado Mio (Local) on 21/05/2021.
//

#ifndef CHECK_GENERIC_REF_ALGOS_H
#define CHECK_GENERIC_REF_ALGOS_H

#include <string>

namespace ref {

    //template<typename Collection>
    //struct cref {
    //    typedef typename Collection collection;
    //    typedef std::shared_ptr<typename Collection> refptr;
    //    typedef typename Collection::iterator iterator;
    //    typedef typename Collection::const_iterator const_iterator;
    //    typedef typename Collection::reference reference;
    //
    //    refptr ptr;
    //
    //    cref() {
    //        ptr = std::make_shared<collection>();
    //    }
    //
    //    cref(const cref& p): ptr(p.ptr) { }
    //    cref(const std::initializer_list<_Tp>& ilist) {
    //        ptr = std::make_shared<collection>(ilist);
    //    }
    //    ~cref() { ptr = nullptr; }
    //
    //    iterator        begin() { (*ptr).begin(); }
    //    iterator          end() { (*ptr).end(); }
    //    const_iterator  begin() const { (*ptr).begin(); }
    //    const_iterator    end() const { (*ptr).end(); }
    //    const_iterator cbegin() const { (*ptr).cbegin(); }
    //    const_iterator   cend() const { (*ptr).cend(); }
    //
    //    bool  empty() const { (*ptr).empty(); }
    //    size_t size() const { (*ptr).size();  }
    //
    //
    //};

    template<typename C1, typename C2>
    void copy_all(const C1& c1, C2& c2) {
        for(auto it=c1.cbegin(); it != c1.cend(); ++it)
            c2.emplace(*it);
    }

}

namespace std {

    template<typename _Kp, typename _Tp>
    std::string to_string(const std::pair<_Kp, _Tp>& v) {
        return std::to_string(v.first) + ":" + std::to_string(v.second);
    }

    template<typename C>
    std::string to_string(const C& c) {
        std::string sbuf;

        sbuf.append("[");
        if (!c.empty()) {
            auto it = c.begin();
            sbuf.append(std::to_string(*it));
            for(it++; it != c.end(); it++)
                sbuf.append(",").append(std::to_string(*it));
        }

        sbuf.append("]");
        return sbuf;
    }

}

#endif //CHECK_GENERIC_REF_ALGOS_H
