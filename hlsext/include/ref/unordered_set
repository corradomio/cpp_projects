//
// Created by Corrado Mio on 18/09/2020.
//

#ifndef REF_UNORDERED_SET_H
#define REF_UNORDERED_SET_H

#include <memory>
#include <unordered_set>

namespace ref {

    template<typename _Value,
        typename _Hash = std::hash<_Value>,
        typename _Pred = std::equal_to<_Value>,
        typename _Alloc = std::allocator<_Value>
    >
    struct unordered_set {
        typedef std::unordered_set<_Value, _Hash, _Pred, _Alloc> collection;
        typedef std::shared_ptr<std::unordered_set<_Value, _Hash, _Pred, _Alloc>> pointer;

        pointer ptr;

        // Constructor

        unordered_set() { ptr = std::make_shared<collection>(); }
        unordered_set(const unordered_set& v): ptr(v.ptr) { }
        ~unordered_set() { ptr = nullptr; }

        // Member functions

        unordered_set& operator=(const unordered_set& v) {
            ptr = v.ptr;
            return *this;
        }

        // Element access

        // Iterators

        typename collection::iterator       begin()        { return (*ptr).begin(); }
        typename collection::iterator       end()          { return (*ptr).end(); }
        typename collection::const_iterator begin()  const { return (*ptr).begin(); }
        typename collection::const_iterator end()    const { return (*ptr).end(); }

        typename collection::const_iterator cbegin() const { return (*ptr).cbegin(); }
        typename collection::const_iterator cend()   const { return (*ptr).cend(); }

        // Capacity

        bool  empty() const { return (*ptr).empty(); }
        size_t size() const { return (*ptr).size(); }

        // Modifiers

        void clear() { (*ptr).clear(); }

        template <class... Args>
        void emplace(Args&&... args) { (*ptr).emplace(args...); }

        // Pointers

        pointer     get() const { return  ptr; }
        collection& ref() const { return *ptr; }
    };
}

namespace std {

    template<typename T>
    std::string to_string(const ref::unordered_set<T>& c) {
        std::string sbuf;

        sbuf.append("[");
        if (!c.empty()) {
            auto it = c.begin();
            sbuf.append(std::to_string(*it));
            for(it++; it != c.end(); it++)
                sbuf.append(",").append(std::to_string(*it));
        }

        sbuf.append("]");
        return sbuf;
    }
}

#endif // REF_UNORDERED_SET_H
