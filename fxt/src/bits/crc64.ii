# 1 "src/bits/crc64.cc"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "src/bits/crc64.cc"





# 1 "src/bits/crc64.h" 1







# 1 "src/fxttypes.h" 1
# 12 "src/fxttypes.h"
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
# 9 "src/bits/crc64.h" 2







typedef unsigned long long uint64;


class crc64

{
public:
    uint64 a_;
    uint64 c_;




    static const uint64 cc[];

public:
    explicit crc64(uint64 c=0)
    {
        if ( 0==c ) c = 0x1bULL;
        init(c);
    }


    ~crc64() {;}

    void init(uint64 c)
    {
        c_ = c;
        c_ >>= 1;
        uint64 h = 1ULL<<63;
        c_ |= h;
        reset();
    }

    void reset() { set_a(~0ULL); }
    void set_a(uint64 a) { a_=a; }

    uint64 get_a() const { return a_; }

    void shift()
    {
        bool s = (a_ & 1);
        a_ >>= 1;
        if ( 0!=s ) a_ ^= c_;
    }

    uint64 bit_in(uchar b)
    {
        a_ ^= (b&1);
        shift();
        return a_;
    }

    uint64 byte_in(uchar b)
    {

        a_ ^= b;
        shift(); shift(); shift(); shift();
        shift(); shift(); shift(); shift();
# 85 "src/bits/crc64.h"
        return a_;
    }

    uint64 word_in(uint64 w)
    {
        uint k = 8;
        while ( k-- ) { byte_in( (uchar)w ); w>>=8; }
        return a_;
    }

    uint64 bits_in(uint64 w, uchar k)

    {




        if ( k&1 ) { a_ ^= (w&1); w >>= 1; shift(); }

        k = (uchar)(k>>1);

        if ( k&1 ) { a_ ^= (w&3); w >>= 2; shift(); shift(); }

        k = (uchar)(k>>1);

        if ( k&1 ) { a_ ^= (w&15); w >>= 4; shift(); shift(); shift(); shift(); }

        k = (uchar)(k>>1);

        while ( k-- ) { byte_in( (uchar)w ); w>>=8; }
# 125 "src/bits/crc64.h"
        return a_;
    }
};
# 7 "src/bits/crc64.cc" 2
# 16 "src/bits/crc64.cc"
const uint64 crc64::cc[] = {
    0x5a0127dd34af1e81ULL,
    0x4ef12e145d0e3ccdULL,
    0x16503f45acce9345ULL,
    0x24e8034491298b3fULL,
    0x9e4a8ad2261db8b1ULL,
    0xb199aecfbb17a13fULL,
    0x3f1fa2cc0dfbbf51ULL,
    0xfb6e45b2f694fb1fULL,
    0xd4597140a01d32edULL,
    0xbd08ba1a2d621bffULL,
    0xae2b680542730db1ULL,
    0x8ec06ec4a8fe8f6dULL,
    0xb89a2ecea2233001ULL,
    0x8b996e790b615ad1ULL,
    0x7eaef8397265e1f9ULL,
    0xf368ae22deecc7c3ULL,
};
