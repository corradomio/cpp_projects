# 1 "src/bits/bitcount-v.cc"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "src/bits/bitcount-v.cc"





# 1 "src/bits/bitcount.h" 1







# 1 "src/fxttypes.h" 1
# 12 "src/fxttypes.h"
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
# 9 "src/bits/bitcount.h" 2
# 1 "src/bits/bitsperlong.h" 1
# 11 "src/bits/bitsperlong.h"
# 1 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/climits" 1 3
# 39 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/climits" 3
       
# 40 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/climits" 3

# 1 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/c++config.h" 1 3
# 252 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/c++config.h" 3

# 252 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/c++config.h" 3
namespace std
{
  typedef long long unsigned int size_t;
  typedef long long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 274 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 524 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/c++config.h" 3
# 1 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/os_defines.h" 1 3
# 525 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/c++config.h" 2 3


# 1 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/cpu_defines.h" 1 3
# 528 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/x86_64-w64-mingw32/bits/c++config.h" 2 3
# 42 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/climits" 2 3
# 1 "D:/MinGW/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/9.3.0/include-fixed/limits.h" 1 3 4
# 34 "D:/MinGW/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/9.3.0/include-fixed/limits.h" 3 4
# 1 "D:/MinGW/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/9.3.0/include-fixed/syslimits.h" 1 3 4






# 1 "D:/MinGW/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/9.3.0/include-fixed/limits.h" 1 3 4
# 194 "D:/MinGW/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/9.3.0/include-fixed/limits.h" 3 4
# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/limits.h" 1 3 4





# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/crtdefs.h" 1 3 4
# 10 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/crtdefs.h" 3 4
# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 1 3 4
# 10 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 1 3 4
# 10 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 3 4
# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw_mac.h" 1 3 4
# 98 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw_mac.h" 3 4
             
# 107 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw_mac.h" 3 4
             
# 11 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 2 3 4
# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw_secapi.h" 1 3 4
# 44 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw_secapi.h" 3 4
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
# 12 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 2 3 4
# 284 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 3 4
# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/vadefs.h" 1 3 4
# 9 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/vadefs.h" 3 4
# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 1 3 4
# 609 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 3 4
# 1 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3 4
# 610 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 2 3 4
# 10 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/vadefs.h" 2 3 4




#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/vadefs.h" 3 4
}



#pragma pack(pop)
# 285 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 2 3 4
# 569 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 3 4
extern "C" {
# 580 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/_mingw.h" 3 4
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  __asm__ __volatile__("int {$}3":);
}




const char *__mingw_get_crt_info (void);


}
# 11 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 2 3 4




#pragma pack(push,_CRT_PACKING)
# 40 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
__extension__ typedef unsigned long long size_t;
# 50 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
__extension__ typedef long long ssize_t;






typedef size_t rsize_t;
# 67 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
__extension__ typedef long long intptr_t;
# 80 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
__extension__ typedef unsigned long long uintptr_t;
# 93 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
__extension__ typedef long long ptrdiff_t;
# 111 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;
# 143 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
typedef __time64_t time_t;
# 435 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3 4
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {





  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;

} threadlocinfo;







#pragma pack(pop)
# 11 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/crtdefs.h" 2 3 4
# 7 "D:/MinGW/msys64/mingw64/x86_64-w64-mingw32/include/limits.h" 2 3 4
# 195 "D:/MinGW/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/9.3.0/include-fixed/limits.h" 2 3 4
# 8 "D:/MinGW/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/9.3.0/include-fixed/syslimits.h" 2 3 4
# 35 "D:/MinGW/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/9.3.0/include-fixed/limits.h" 2 3 4
# 43 "D:/MinGW/msys64/mingw64/include/c++/9.3.0/climits" 2 3
# 12 "src/bits/bitsperlong.h" 2
# 10 "src/bits/bitcount.h" 2
# 1 "src/bits/bitasm.h" 1
# 25 "src/bits/bitasm.h"
# 1 "src/bits/bitasm-amd64.h" 1
# 41 "src/bits/bitasm-amd64.h"

# 41 "src/bits/bitasm-amd64.h"
static inline ulong asm_bsf(ulong x)

{
    asm ("bsfq %0, %0" : "=r" (x) : "0" (x));
    return x;
}



static inline ulong asm_bsr(ulong x)

{
    asm ("bsrq %0, %0" : "=r" (x) : "0" (x));
    return x;
}



static inline ulong asm_bswap(ulong x)

{
    asm ("bswap %0" : "=r" (x) : "0" (x));
    return x;
}



static inline ulong asm_rol(ulong x, ulong r)

{
    asm ("rolq   %%cl, %0" : "=r" (x) : "0" (x), "c" (r));
    return x;
}



static inline ulong asm_ror(ulong x, ulong r)

{
    asm ("rorq   %%cl, %0" : "=r" (x) : "0" (x), "c" (r));
    return x;
}



static inline ulong asm_parity(ulong x)






{
    x ^= (x>>32);
    x ^= (x>>16);
    x ^= (x>>8);
    asm ("addq  $0, %0  \n"
         "setnp %%al    \n"
         "movzx %%al, %0"
         : "=r" (x) : "0" (x) : "rax");

    return x;
}
# 112 "src/bits/bitasm-amd64.h"
static inline ulong asm_bt(const ulong *f, ulong i)

{
    ulong ret;
    asm ( "btq  %2, %1 \n"
          "sbbq %0, %0"
          : "=r" (ret)
          : "m" (*f), "r" (i) );
    return ret;
}


static inline ulong asm_bts(ulong *f, ulong i)

{
    ulong ret;
    asm ( "btsq %2, %1 \n"
          "sbbq %0, %0"
          : "=r" (ret)
          : "m" (*f), "r" (i) );
    return ret;
}


static inline void asm_b_s(ulong *f, ulong i)

{
    asm ( "btsq  %1, %0 \n"
          :
          : "m" (*f), "r" (i) );
}


static inline ulong asm_btr(ulong *f, ulong i)

{
    ulong ret;
    asm ( "btrq  %2, %1 \n"
          "sbbq %0, %0"
          : "=r" (ret)
          : "m" (*f), "r" (i) );
    return ret;
}


static inline void asm_b_r(ulong *f, ulong i)

{
    asm ( "btrq  %1, %0 \n"
          :
          : "m" (*f), "r" (i) );
}


static inline ulong asm_btc(ulong *f, ulong i)

{
    ulong ret;
    asm ( "btcq  %2, %1 \n"
          "sbbq %0, %0"
          : "=r" (ret)
          : "m" (*f), "r" (i) );
    return ret;
}


static inline void asm_b_c(ulong *f, ulong i)

{
    asm ( "btcq  %1, %0 \n"
          :
          : "m" (*f), "r" (i) );
}
# 26 "src/bits/bitasm.h" 2

# 1 "src/bits/bitasm-sse.h" 1
# 28 "src/bits/bitasm.h" 2
# 11 "src/bits/bitcount.h" 2


static inline ulong bit_count(ulong x)




{
# 44 "src/bits/bitcount.h"
    x -= (x>>1) & 0x55555555UL;
    x = ((x>>2) & 0x33333333UL) + (x & 0x33333333UL);
    x = ((x>>4) + x) & 0x0f0f0f0fUL;
    x *= 0x01010101UL;
    return x>>24;
# 80 "src/bits/bitcount.h"
}


static inline ulong bit_count_15(ulong x)

{

    x -= (x>>1) & 0x55555555UL;
    x = ((x>>2) & 0x33333333UL) + (x & 0x33333333UL);
    x *= 0x11111111UL;
    return x>>28;
# 99 "src/bits/bitcount.h"
}


static inline ulong bit_count_3(ulong x)

{

    x -= (x>>1) & 0x55555555UL;
    x *= 0x55555555UL;
    return x>>30;







}



static inline int bit_count_cmp(const ulong &a, const ulong &b)

{
    ulong ca = bit_count(a);
    ulong cb = bit_count(b);
    return ( ca==cb ? 0 : (ca>cb ? +1 : -1) );
}



static inline ulong bit_count_sparse(ulong x)

{
# 141 "src/bits/bitcount.h"
    ulong n = 0;
    do
    {
        n += (x!=0); x &= (x-1);
        n += (x!=0); x &= (x-1);
        n += (x!=0); x &= (x-1);
        n += (x!=0); x &= (x-1);
    }
    while ( x );
    return n;


}


static inline ulong bit_count_dense(ulong x)



{
    return 32 - bit_count_sparse( ~x );
}



static inline ulong bit_block_count(ulong x)






{

    return (x & 1) + bit_count( (x^(x>>1)) ) / 2;
}



static inline ulong bit_block_ge2_count(ulong x)






{

    return bit_block_count( x & ( (x<<1) & (x>>1) ) );
}



static inline ulong bit_count_01(ulong x)


{

    if ( 1>=x ) return x;
    x = asm_bsr(x);
    return x + 1;
# 231 "src/bits/bitcount.h"
}



ulong bit_count_v(const ulong *x, ulong n);
# 7 "src/bits/bitcount-v.cc" 2





static inline ulong bit_count_v15(const ulong *x)


{




    ulong a1, a2, a3;

    ulong a0=x[0]; ;
    { ulong cy = x[ 1]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; a1 = cy; } ;
    { ulong cy = x[ 2]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; a1 ^= cy; } ;
    { ulong cy = x[ 3]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; a2 = cy; } ;
    { ulong cy = x[ 4]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; a2 ^= cy; } ;
    { ulong cy = x[ 5]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; a2 ^= cy; } ;
    { ulong cy = x[ 6]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; a2 ^= cy; } ;
    { ulong cy = x[ 7]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; { ulong t = a2 & cy; a2 ^= cy; cy = t; }; a3 = cy; } ;
    { ulong cy = x[ 8]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; { ulong t = a2 & cy; a2 ^= cy; cy = t; }; a3 ^= cy; } ;
    { ulong cy = x[ 9]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; { ulong t = a2 & cy; a2 ^= cy; cy = t; }; a3 ^= cy; } ;
    { ulong cy = x[10]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; { ulong t = a2 & cy; a2 ^= cy; cy = t; }; a3 ^= cy; } ;
    { ulong cy = x[11]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; { ulong t = a2 & cy; a2 ^= cy; cy = t; }; a3 ^= cy; } ;
    { ulong cy = x[12]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; { ulong t = a2 & cy; a2 ^= cy; cy = t; }; a3 ^= cy; } ;
    { ulong cy = x[13]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; { ulong t = a2 & cy; a2 ^= cy; cy = t; }; a3 ^= cy; } ;
    { ulong cy = x[14]; { ulong t = a0 & cy; a0 ^= cy; cy = t; }; { ulong t = a1 & cy; a1 ^= cy; cy = t; }; { ulong t = a2 & cy; a2 ^= cy; cy = t; }; a3 ^= cy; } ;



    ulong b = bit_count(a0);
    b += (bit_count(a1)<<1);
    b += (bit_count(a2)<<2);
    b += (bit_count(a3)<<3);
    return b;
}


ulong
bit_count_v(const ulong *x, ulong n)

{
    ulong b = 0;
    const ulong *xe = x + n + 1;
    while ( x+15 < xe )
    {
        b += bit_count_v15(x);
        x += 15;
    }


    const ulong r = (ulong)(xe-x-1);
    for (ulong k=0; k<r; ++k) b+=bit_count(x[k]);

    return b;
}
