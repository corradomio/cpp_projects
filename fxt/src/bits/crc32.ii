# 1 "src/bits/crc32.cc"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "src/bits/crc32.cc"





# 1 "src/bits/crc32.h" 1







# 1 "src/fxttypes.h" 1
# 12 "src/fxttypes.h"
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
# 9 "src/bits/crc32.h" 2







class crc32

{
public:
    uint a_;
    uint c_;




    static const uint cc[];

public:
    explicit crc32(uint c=0)
    {
        if ( 0==c ) c = 0xaf;
        init(c);
    }


    ~crc32() {;}

    void init(uint c)
    {
        c_ = c;
        c_ >>= 1;
        uint h = 1ULL<<31;
        c_ |= h;
        reset();
    }

    void reset() { set_a(0U); }
    void set_a(uint a) { a_=a; }

    uint get_a() const { return a_; }

    void shift()
    {
        bool s = (a_ & 1);
        a_ >>= 1;
        if ( 0!=s ) a_ ^= c_;
    }

    uint bit_in(uchar b)
    {
        a_ ^= (b&1);
        shift();
        return a_;
    }

    uint byte_in(uchar b)
    {

        a_ ^= b;
        shift(); shift(); shift(); shift();
        shift(); shift(); shift(); shift();
# 82 "src/bits/crc32.h"
        return a_;
    }

    uint word_in(uint w)
    {
        uint k = 4;
        while ( k-- ) { byte_in( (uchar)w ); w>>=8; }
        return a_;
    }

    uint bits_in(uint w, uchar k)

    {




        if ( k&1 ) { a_ ^= (w&1); w >>= 1; shift(); }

        k = (uchar)(k>>1);

        if ( k&1 ) { a_ ^= (w&3); w >>= 2; shift(); shift(); }

        k = (uchar)(k>>1);

        if ( k&1 ) { a_ ^= (w&15); w >>= 4; shift(); shift(); shift(); shift(); }

        k = (uchar)(k>>1);

        while ( k-- ) { byte_in( (uchar)w ); w>>=8; }
# 122 "src/bits/crc32.h"
        return a_;
    }
};
# 7 "src/bits/crc32.cc" 2
# 16 "src/bits/crc32.cc"
const uint crc32::cc[] = {
    0x9a743f93U,
    0x85640defU,
    0xad90d77fU,
    0xf5929c15U,
    0xcb6c2743U,
    0xc5df469fU,
    0xbcae95b1U,
    0x8fa999e9U,
    0xdb19f7c9U,
    0xc72c7061U,
    0xfd6e4507U,
    0xb7602b21U,
    0xf535fcffU,
    0xbda7ac7fU,
    0x99db510bU,
    0xc5d379dbU,
};
