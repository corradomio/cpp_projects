#line 1 "C:\\Users\\CORRAD~1\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-10_main.cudafe1.cpp"
#pragma section("__nv_managed_data__")
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1 "main.cu"




#line 6 "main.cu"

#line 1 "main.cu"
#line 67 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 708 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
extern "C" {
#line 2971 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\sal.h"
}
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"
extern "C" {
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\concurrencysal.h"
}
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
extern "C" {
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
typedef unsigned __int64 uintptr_t; 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
typedef char *va_list; 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
void __cdecl __va_start(va_list *, ...); 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
}
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
extern "C++" {
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
template< class _Ty> 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
struct __vcrt_va_list_is_reference { 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
enum: bool { __the_value}; 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
}; 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
template< class _Ty> 
#line 180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &>  { 
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
}; 
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
template< class _Ty> 
#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &&>  { 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
}; 
#line 191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
template< class _Ty> 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
struct __vcrt_assert_va_start_is_not_reference { 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
static_assert((!__vcrt_va_list_is_reference< _Ty> ::__the_value), "va_start argument must not have reference type and must not be parenthesized");
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
}; 
#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
}
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vadefs.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
typedef unsigned __int64 size_t; 


#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 1 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"






















#line 24 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"




























#line 53 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"



#line 57 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

#line 1 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\builtin_types.h"























































#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\device_types.h"























































#line 57 "D:\\Programming\\CUDA\\v12.4\\include\\device_types.h"


#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"

























































#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"










#line 70 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"













































#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"










#line 127 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"














































#line 174 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"








#line 185 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"



#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"













#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"










#line 215 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"




#line 220 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"
        



#line 225 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"



#line 229 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"



#line 233 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"



#line 237 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"



#line 241 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"



#line 245 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"
        














#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"





        



#line 271 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"
#line 272 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"



#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"




#line 281 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"
#line 60 "D:\\Programming\\CUDA\\v12.4\\include\\device_types.h"
#line 61 "D:\\Programming\\CUDA\\v12.4\\include\\device_types.h"







enum  cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};




#line 80 "D:\\Programming\\CUDA\\v12.4\\include\\device_types.h"

#line 82 "D:\\Programming\\CUDA\\v12.4\\include\\device_types.h"
#line 57 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\builtin_types.h"


#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"























































#line 57 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"


#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"

























































#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"
























































































































































































































#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"




#line 281 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"
#line 60 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 61 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"























































#line 57 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"








#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"

























































#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"
























































































































































































































#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"




#line 281 "D:\\Programming\\CUDA\\v12.4\\include\\crt/host_defines.h"
#line 66 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 67 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"


























#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"

struct  char1
{
    signed char x;
};

struct  uchar1
{
    unsigned char x;
};


struct  __declspec(align(2)) char2
{
    signed char x, y;
};

struct  __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct  char3
{
    signed char x, y, z;
};

struct  uchar3
{
    unsigned char x, y, z;
};

struct  __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct  __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct  short1
{
    short x;
};

struct  ushort1
{
    unsigned short x;
};

struct  __declspec(align(4)) short2
{
    short x, y;
};

struct  __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct  short3
{
    short x, y, z;
};

struct  ushort3
{
    unsigned short x, y, z;
};

struct  __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct  __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct  int1
{
    int x;
};

struct  uint1
{
    unsigned int x;
};

struct  __declspec(align(8)) int2 { int x; int y; };
struct  __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct  int3
{
    int x, y, z;
};

struct  uint3
{
    unsigned int x, y, z;
};

struct  __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct  __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct  long1
{
    long int x;
};

struct  ulong1
{
    unsigned long x;
};


struct  __declspec(align(8)) long2 { long int x; long int y; };
struct  __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 237 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"

struct  long3
{
    long int x, y, z;
};

struct  ulong3
{
    unsigned long int x, y, z;
};

struct  __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct  __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct  float1
{
    float x;
};















#line 279 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"

struct  __declspec(align(8)) float2 { float x; float y; };

#line 283 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"


struct  float3
{
    float x, y, z;
};

struct  __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct  longlong1
{
    long long int x;
};

struct  ulonglong1
{
    unsigned long long int x;
};

struct  __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct  __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct  longlong3
{
    long long int x, y, z;
};

struct  ulonglong3
{
    unsigned long long int x, y, z;
};

struct  __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct  __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct  double1
{
    double x;
};

struct  __declspec(align(16)) double2
{
    double x, y;
};

struct  double3
{
    double x, y, z;
};

struct  __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 360 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







typedef  struct char1 char1;
typedef  struct uchar1 uchar1;
typedef  struct char2 char2;
typedef  struct uchar2 uchar2;
typedef  struct char3 char3;
typedef  struct uchar3 uchar3;
typedef  struct char4 char4;
typedef  struct uchar4 uchar4;
typedef  struct short1 short1;
typedef  struct ushort1 ushort1;
typedef  struct short2 short2;
typedef  struct ushort2 ushort2;
typedef  struct short3 short3;
typedef  struct ushort3 ushort3;
typedef  struct short4 short4;
typedef  struct ushort4 ushort4;
typedef  struct int1 int1;
typedef  struct uint1 uint1;
typedef  struct int2 int2;
typedef  struct uint2 uint2;
typedef  struct int3 int3;
typedef  struct uint3 uint3;
typedef  struct int4 int4;
typedef  struct uint4 uint4;
typedef  struct long1 long1;
typedef  struct ulong1 ulong1;
typedef  struct long2 long2;
typedef  struct ulong2 ulong2;
typedef  struct long3 long3;
typedef  struct ulong3 ulong3;
typedef  struct long4 long4;
typedef  struct ulong4 ulong4;
typedef  struct float1 float1;
typedef  struct float2 float2;
typedef  struct float3 float3;
typedef  struct float4 float4;
typedef  struct longlong1 longlong1;
typedef  struct ulonglong1 ulonglong1;
typedef  struct longlong2 longlong2;
typedef  struct ulonglong2 ulonglong2;
typedef  struct longlong3 longlong3;
typedef  struct ulonglong3 ulonglong3;
typedef  struct longlong4 longlong4;
typedef  struct ulonglong4 ulonglong4;
typedef  struct double1 double1;
typedef  struct double2 double2;
typedef  struct double3 double3;
typedef  struct double4 double4;



#line 419 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







struct  dim3
{
    unsigned int x, y, z;





#line 435 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
      dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
      dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
      operator uint3(void) const { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 439 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 440 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
};

typedef  struct dim3 dim3;




#line 448 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"

#line 450 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 62 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
























































































































#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 188 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











enum  cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorInvalidValue                 =     1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    




    cudaErrorCudartUnloading              =     4,

    




    cudaErrorProfilerDisabled             =     5,

    





    cudaErrorProfilerNotInitialized       =     6,

    




    cudaErrorProfilerAlreadyStarted       =     7,

    




     cudaErrorProfilerAlreadyStopped       =    8,
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,

    





    cudaErrorInvalidHostPointer           =     16,
  
    





    cudaErrorInvalidDevicePointer         =     17,
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,

    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,

    





    cudaErrorMixedDeviceExecution         =     28,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
    




    cudaErrorStubLibrary                  =     34,

    




    cudaErrorInsufficientDriver           =     35,

    




    cudaErrorCallRequiresNewerDriver      =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
    
    



    cudaErrorMissingConfiguration         =      52,

    






    cudaErrorPriorLaunchFailure           =      53,
    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    













    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
  
    



    cudaErrorInvalidDeviceFunction        =      98,
  
    



    cudaErrorNoDevice                     =     100,
  
    




    cudaErrorInvalidDevice                =     101,

    


    cudaErrorDeviceNotLicensed            =     102,

   






   cudaErrorSoftwareValidityNotEstablished  =     103,

    


    cudaErrorStartupFailure               =    127,
  
    


    cudaErrorInvalidKernelImage           =     200,

    







    cudaErrorDeviceUninitialized          =     201,

    


    cudaErrorMapBufferObjectFailed        =     205,
  
    


    cudaErrorUnmapBufferObjectFailed      =     206,

    



    cudaErrorArrayIsMapped                =     207,

    


    cudaErrorAlreadyMapped                =     208,
  
    





    cudaErrorNoKernelImageForDevice       =     209,

    


    cudaErrorAlreadyAcquired              =     210,

    


    cudaErrorNotMapped                    =     211,

    



    cudaErrorNotMappedAsArray             =     212,

    



    cudaErrorNotMappedAsPointer           =     213,
  
    



    cudaErrorECCUncorrectable             =     214,
  
    



    cudaErrorUnsupportedLimit             =     215,
    
    



    cudaErrorDeviceAlreadyInUse           =     216,

    



    cudaErrorPeerAccessUnsupported        =     217,

    



    cudaErrorInvalidPtx                   =     218,

    


    cudaErrorInvalidGraphicsContext       =     219,

    



    cudaErrorNvlinkUncorrectable          =     220,

    




    cudaErrorJitCompilerNotFound          =     221,

    




    cudaErrorUnsupportedPtxVersion        =     222,

    




    cudaErrorJitCompilationDisabled       =     223,

    


    cudaErrorUnsupportedExecAffinity      =     224,

    



    cudaErrorUnsupportedDevSideSync       =     225,

    


    cudaErrorInvalidSource                =     300,

    


    cudaErrorFileNotFound                 =     301,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     302,
  
    


    cudaErrorSharedObjectInitFailed       =     303,

    


    cudaErrorOperatingSystem              =     304,
  
    




    cudaErrorInvalidResourceHandle        =     400,

    



    cudaErrorIllegalState                 =     401,

    





    cudaErrorLossyQuery                   =     402,

    




    cudaErrorSymbolNotFound               =     500,
  
    





    cudaErrorNotReady                     =     600,

    





    cudaErrorIllegalAddress               =     700,
  
    






    cudaErrorLaunchOutOfResources         =      701,
  
    








    cudaErrorLaunchTimeout                =      702,

    



    cudaErrorLaunchIncompatibleTexturing  =     703,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     704,
    
    




    cudaErrorPeerAccessNotEnabled         =     705,
  
    










    cudaErrorSetOnActiveProcess           =     708,

    




    cudaErrorContextIsDestroyed           =     709,

    




    cudaErrorAssert                        =    710,
  
    




    cudaErrorTooManyPeers                 =     711,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     712,
        
    



    cudaErrorHostMemoryNotRegistered      =     713,

    






    cudaErrorHardwareStackError           =     714,

    





    cudaErrorIllegalInstruction           =     715,

    






    cudaErrorMisalignedAddress            =     716,

    








    cudaErrorInvalidAddressSpace          =     717,

    





    cudaErrorInvalidPc                    =     718,
  
    








    cudaErrorLaunchFailure                =      719,

    






    cudaErrorCooperativeLaunchTooLarge    =     720,
    
    


    cudaErrorNotPermitted                 =     800,

    



    cudaErrorNotSupported                 =     801,

    






    cudaErrorSystemNotReady               =     802,

    




    cudaErrorSystemDriverMismatch         =     803,

    






    cudaErrorCompatNotSupportedOnDevice   =     804,

    


    cudaErrorMpsConnectionFailed          =     805,

    


    cudaErrorMpsRpcFailure                =     806,

    



    cudaErrorMpsServerNotReady            =     807,

    


    cudaErrorMpsMaxClientsReached         =     808,

    


    cudaErrorMpsMaxConnectionsReached     =     809,

    


    cudaErrorMpsClientTerminated          =     810,

    


    cudaErrorCdpNotSupported              =     811,

    


    cudaErrorCdpVersionMismatch           =     812,

    


    cudaErrorStreamCaptureUnsupported     =    900,

    



    cudaErrorStreamCaptureInvalidated     =    901,

    



    cudaErrorStreamCaptureMerge           =    902,

    


    cudaErrorStreamCaptureUnmatched       =    903,

    



    cudaErrorStreamCaptureUnjoined        =    904,

    




    cudaErrorStreamCaptureIsolation       =    905,

    



    cudaErrorStreamCaptureImplicit        =    906,

    



    cudaErrorCapturedEvent                =    907,
  
    




    cudaErrorStreamCaptureWrongThread     =    908,

    


    cudaErrorTimeout                      =    909,

    



    cudaErrorGraphExecUpdateFailure       =    910,

    







    cudaErrorExternalDevice               =    911,

    



    cudaErrorInvalidClusterSize           =    912,

    


    cudaErrorUnknown                      =    999

    





    , cudaErrorApiFailureBase               =  10000
};




enum  cudaChannelFormatKind
{
    cudaChannelFormatKindSigned                         =   0,      
    cudaChannelFormatKindUnsigned                       =   1,      
    cudaChannelFormatKindFloat                          =   2,      
    cudaChannelFormatKindNone                           =   3,      
    cudaChannelFormatKindNV12                           =   4,      
    cudaChannelFormatKindUnsignedNormalized8X1          =   5,      
    cudaChannelFormatKindUnsignedNormalized8X2          =   6,      
    cudaChannelFormatKindUnsignedNormalized8X4          =   7,      
    cudaChannelFormatKindUnsignedNormalized16X1         =   8,      
    cudaChannelFormatKindUnsignedNormalized16X2         =   9,      
    cudaChannelFormatKindUnsignedNormalized16X4         =   10,     
    cudaChannelFormatKindSignedNormalized8X1            =   11,     
    cudaChannelFormatKindSignedNormalized8X2            =   12,     
    cudaChannelFormatKindSignedNormalized8X4            =   13,     
    cudaChannelFormatKindSignedNormalized16X1           =   14,     
    cudaChannelFormatKindSignedNormalized16X2           =   15,     
    cudaChannelFormatKindSignedNormalized16X4           =   16,     
    cudaChannelFormatKindUnsignedBlockCompressed1       =   17,     
    cudaChannelFormatKindUnsignedBlockCompressed1SRGB   =   18,     
    cudaChannelFormatKindUnsignedBlockCompressed2       =   19,     
    cudaChannelFormatKindUnsignedBlockCompressed2SRGB   =   20,     
    cudaChannelFormatKindUnsignedBlockCompressed3       =   21,     
    cudaChannelFormatKindUnsignedBlockCompressed3SRGB   =   22,     
    cudaChannelFormatKindUnsignedBlockCompressed4       =   23,     
    cudaChannelFormatKindSignedBlockCompressed4         =   24,     
    cudaChannelFormatKindUnsignedBlockCompressed5       =   25,     
    cudaChannelFormatKindSignedBlockCompressed5         =   26,     
    cudaChannelFormatKindUnsignedBlockCompressed6H      =   27,     
    cudaChannelFormatKindSignedBlockCompressed6H        =   28,     
    cudaChannelFormatKindUnsignedBlockCompressed7       =   29,     
    cudaChannelFormatKindUnsignedBlockCompressed7SRGB   =   30      
};




struct  cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;









struct  cudaArraySparseProperties {
    struct {
        unsigned int width;             
        unsigned int height;            
        unsigned int depth;             
    } tileExtent;
    unsigned int miptailFirstLevel;        
    unsigned long long miptailSize;     
    unsigned int flags;                 
    unsigned int reserved[4];
};




struct  cudaArrayMemoryRequirements {
    size_t size;                    
    size_t alignment;               
    unsigned int reserved[4];
};




enum  cudaMemoryType
{
    cudaMemoryTypeUnregistered = 0, 
    cudaMemoryTypeHost         = 1, 
    cudaMemoryTypeDevice       = 2, 
    cudaMemoryTypeManaged      = 3  
};




enum  cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct  cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct  cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct  cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct  cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct  cudaMemcpyNodeParams {
    int flags;                            
    int reserved[3];                      
    struct cudaMemcpy3DParms copyParams;  
};




struct  cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct   cudaMemsetParams {
    void *dst;                              
    size_t pitch;                           
    unsigned int value;                     
    unsigned int elementSize;               
    size_t width;                           
    size_t height;                          
};




struct   cudaMemsetParamsV2 {
    void *dst;                              
    size_t pitch;                           
    unsigned int value;                     
    unsigned int elementSize;               
    size_t width;                           
    size_t height;                          
};




enum   cudaAccessProperty {
    cudaAccessPropertyNormal = 0,       
    cudaAccessPropertyStreaming = 1,    
    cudaAccessPropertyPersisting = 2    
};












struct  cudaAccessPolicyWindow {
    void *base_ptr;                     
    size_t num_bytes;                   
    float hitRatio;                     
    enum cudaAccessProperty hitProp;    
    enum cudaAccessProperty missProp;   
};





#line 1366 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





typedef void (__stdcall *cudaHostFn_t)(void *userData);




struct  cudaHostNodeParams {
    cudaHostFn_t fn;    
    void* userData; 
};




struct  cudaHostNodeParamsV2 {
    cudaHostFn_t fn;    
    void* userData; 
};




enum  cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone        = 0, 
    cudaStreamCaptureStatusActive      = 1, 
    cudaStreamCaptureStatusInvalidated = 2  

};





enum  cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal      = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed     = 2
};

enum  cudaSynchronizationPolicy {
    cudaSyncPolicyAuto = 1,
    cudaSyncPolicySpin = 2,
    cudaSyncPolicyYield = 3,
    cudaSyncPolicyBlockingSync = 4
};




enum  cudaClusterSchedulingPolicy {
    cudaClusterSchedulingPolicyDefault       = 0, 
    cudaClusterSchedulingPolicySpread        = 1, 
    cudaClusterSchedulingPolicyLoadBalancing = 2  
};




enum  cudaStreamUpdateCaptureDependenciesFlags {
    cudaStreamAddCaptureDependencies = 0x0, 
    cudaStreamSetCaptureDependencies = 0x1  
};




enum  cudaUserObjectFlags {
    cudaUserObjectNoDestructorSync = 0x1  
};




enum  cudaUserObjectRetainFlags {
    cudaGraphUserObjectMove = 0x1  
};




struct cudaGraphicsResource;




enum  cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum  cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum  cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum  cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum  cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct  cudaResourceDesc {
    enum cudaResourceType resType;             
    
    union {
        struct {
            cudaArray_t array;                 
        } array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t sizeInBytes;                
        } linear;
        struct {
            void *devPtr;                      
            struct cudaChannelFormatDesc desc; 
            size_t width;                      
            size_t height;                     
            size_t pitchInBytes;               
        } pitch2D;
    } res;
};




struct  cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct  cudaPointerAttributes
{
    



    enum cudaMemoryType type;

    








    int device;

    



    void *devicePointer;

    






    void *hostPointer;
};




struct  cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;

   




   int maxDynamicSharedSizeBytes;

   






   int preferredShmemCarveout;

   



   int clusterDimMustBeSet;

   








   int requiredClusterWidth;
   int requiredClusterHeight;
   int requiredClusterDepth;

   



   int clusterSchedulingPolicyPreference;

   



















   int nonPortableClusterSizeAllowed;

   


   int reserved[16];
};




enum  cudaFuncAttribute
{
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
    cudaFuncAttributePreferredSharedMemoryCarveout = 9, 
    cudaFuncAttributeClusterDimMustBeSet = 10, 
    cudaFuncAttributeRequiredClusterWidth = 11, 
    cudaFuncAttributeRequiredClusterHeight = 12, 
    cudaFuncAttributeRequiredClusterDepth = 13, 
    cudaFuncAttributeNonPortableClusterSizeAllowed = 14, 
    cudaFuncAttributeClusterSchedulingPolicyPreference = 15, 
    cudaFuncAttributeMax
};




enum  cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum  cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum  cudaSharedCarveout {
    cudaSharedmemCarveoutDefault      = -1,  
    cudaSharedmemCarveoutMaxShared    = 100, 
    cudaSharedmemCarveoutMaxL1        = 0    
};




enum  cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum  cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04, 
    cudaLimitMaxL2FetchGranularity        = 0x05, 
    cudaLimitPersistingL2CacheSize        = 0x06  
};




enum  cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum  cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly                 = 1, 
    cudaMemRangeAttributePreferredLocation          = 2, 
    cudaMemRangeAttributeAccessedBy                 = 3, 
    cudaMemRangeAttributeLastPrefetchLocation       = 4  
    , cudaMemRangeAttributePreferredLocationType    = 5  
    , cudaMemRangeAttributePreferredLocationId      = 6  
    , cudaMemRangeAttributeLastPrefetchLocationType = 7  
    , cudaMemRangeAttributeLastPrefetchLocationId   = 8  
};




enum  cudaFlushGPUDirectRDMAWritesOptions {
    cudaFlushGPUDirectRDMAWritesOptionHost   = 1<<0, 
    cudaFlushGPUDirectRDMAWritesOptionMemOps = 1<<1  
};




enum  cudaGPUDirectRDMAWritesOrdering {
    cudaGPUDirectRDMAWritesOrderingNone       = 0,   
    cudaGPUDirectRDMAWritesOrderingOwner      = 100, 
    cudaGPUDirectRDMAWritesOrderingAllDevices = 200  
};




enum  cudaFlushGPUDirectRDMAWritesScope {
    cudaFlushGPUDirectRDMAWritesToOwner      = 100, 
    cudaFlushGPUDirectRDMAWritesToAllDevices = 200  
};




enum  cudaFlushGPUDirectRDMAWritesTarget {
    cudaFlushGPUDirectRDMAWritesTargetCurrentDevice 
};





enum  cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91, 
    cudaDevAttrReserved92                     = 92,
    cudaDevAttrReserved93                     = 93,
    cudaDevAttrReserved94                     = 94,
    cudaDevAttrCooperativeLaunch              = 95, 
    cudaDevAttrCooperativeMultiDeviceLaunch   = 96, 
    cudaDevAttrMaxSharedMemoryPerBlockOptin   = 97, 
    cudaDevAttrCanFlushRemoteWrites           = 98, 
    cudaDevAttrHostRegisterSupported          = 99, 
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100, 
    cudaDevAttrDirectManagedMemAccessFromHost = 101, 
    cudaDevAttrMaxBlocksPerMultiprocessor     = 106, 
    cudaDevAttrMaxPersistingL2CacheSize       = 108, 
    cudaDevAttrMaxAccessPolicyWindowSize      = 109, 
    cudaDevAttrReservedSharedMemoryPerBlock   = 111, 
    cudaDevAttrSparseCudaArraySupported       = 112, 
    cudaDevAttrHostRegisterReadOnlySupported  = 113,  
    cudaDevAttrTimelineSemaphoreInteropSupported = 114,  
    cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114,  
    cudaDevAttrMemoryPoolsSupported           = 115, 
    cudaDevAttrGPUDirectRDMASupported         = 116, 
    cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117, 
    cudaDevAttrGPUDirectRDMAWritesOrdering    = 118, 
    cudaDevAttrMemoryPoolSupportedHandleTypes = 119, 
    cudaDevAttrClusterLaunch                  = 120, 
    cudaDevAttrDeferredMappingCudaArraySupported = 121, 
    cudaDevAttrReserved122                    = 122,
    cudaDevAttrReserved123                    = 123,
    cudaDevAttrReserved124                    = 124,
    cudaDevAttrIpcEventSupport                = 125,  
    cudaDevAttrMemSyncDomainCount             = 126, 
    cudaDevAttrReserved127                    = 127,
    cudaDevAttrReserved128                    = 128,
    cudaDevAttrReserved129                    = 129,
    cudaDevAttrNumaConfig                     = 130, 
    cudaDevAttrNumaId                         = 131, 
    cudaDevAttrReserved132                    = 132,
    cudaDevAttrMpsEnabled                     = 133, 
    cudaDevAttrHostNumaId                     = 134, 
    cudaDevAttrMax
};




enum  cudaMemPoolAttr
{
    







    cudaMemPoolReuseFollowEventDependencies   = 0x1,

    




    cudaMemPoolReuseAllowOpportunistic        = 0x2,

    





    cudaMemPoolReuseAllowInternalDependencies = 0x3,


    







    cudaMemPoolAttrReleaseThreshold           = 0x4,

    



    cudaMemPoolAttrReservedMemCurrent         = 0x5,

    




    cudaMemPoolAttrReservedMemHigh            = 0x6,

    



    cudaMemPoolAttrUsedMemCurrent             = 0x7,

    




    cudaMemPoolAttrUsedMemHigh                = 0x8
};




enum  cudaMemLocationType {
    cudaMemLocationTypeInvalid = 0,
    cudaMemLocationTypeDevice = 1  
    , cudaMemLocationTypeHost = 2 
    , cudaMemLocationTypeHostNuma = 3 
    , cudaMemLocationTypeHostNumaCurrent = 4 
};







struct  cudaMemLocation {
    enum cudaMemLocationType type;  
    int id;                         
};




enum  cudaMemAccessFlags {
    cudaMemAccessFlagsProtNone      = 0,  
    cudaMemAccessFlagsProtRead      = 1,  
    cudaMemAccessFlagsProtReadWrite = 3   
};




struct  cudaMemAccessDesc {
    struct cudaMemLocation  location; 
    enum cudaMemAccessFlags flags;    
};




enum  cudaMemAllocationType {
    cudaMemAllocationTypeInvalid = 0x0,
    


    cudaMemAllocationTypePinned  = 0x1,
    cudaMemAllocationTypeMax     = 0x7FFFFFFF 
};




enum  cudaMemAllocationHandleType {
    cudaMemHandleTypeNone                    = 0x0,  
    cudaMemHandleTypePosixFileDescriptor     = 0x1,  
    cudaMemHandleTypeWin32                   = 0x2,  
    cudaMemHandleTypeWin32Kmt                = 0x4,   
    cudaMemHandleTypeFabric                  = 0x8  
};




struct  cudaMemPoolProps {
    enum cudaMemAllocationType         allocType;   
    enum cudaMemAllocationHandleType   handleTypes; 
    struct cudaMemLocation             location;    
    





    void                              *win32SecurityAttributes;
    size_t                             maxSize;     
    unsigned char                      reserved[56]; 
};




struct  cudaMemPoolPtrExportData {
    unsigned char reserved[64];
};




struct  cudaMemAllocNodeParams {
    



    struct cudaMemPoolProps         poolProps;       
    const struct cudaMemAccessDesc *accessDescs;     
    size_t                          accessDescCount; 
    size_t                          bytesize;        
    void                           *dptr;            
};




struct  cudaMemAllocNodeParamsV2 {
    



    struct cudaMemPoolProps         poolProps;       
    const struct cudaMemAccessDesc *accessDescs;     
    size_t                          accessDescCount; 
    size_t                          bytesize;        
    void                           *dptr;            
};




struct  cudaMemFreeNodeParams {
    void *dptr; 
};




enum  cudaGraphMemAttributeType {
    



    cudaGraphMemAttrUsedMemCurrent      = 0x0,

    




    cudaGraphMemAttrUsedMemHigh         = 0x1,

    




    cudaGraphMemAttrReservedMemCurrent  = 0x2,

    




    cudaGraphMemAttrReservedMemHigh     = 0x3
};





enum  cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3, 
    cudaDevP2PAttrCudaArrayAccessSupported     = 4  
};






struct  CUuuid_st {     
    char bytes[16];
};
typedef  struct CUuuid_st CUuuid;
#line 2259 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef  struct CUuuid_st cudaUUID_t;




struct  cudaDeviceProp
{
    char         name[256];                  
    cudaUUID_t   uuid;                       
    char         luid[8];                    
    unsigned int luidDeviceNodeMask;         
    size_t       totalGlobalMem;             
    size_t       sharedMemPerBlock;          
    int          regsPerBlock;               
    int          warpSize;                   
    size_t       memPitch;                   
    int          maxThreadsPerBlock;         
    int          maxThreadsDim[3];           
    int          maxGridSize[3];             
    int          clockRate;                  
    size_t       totalConstMem;              
    int          major;                      
    int          minor;                      
    size_t       textureAlignment;           
    size_t       texturePitchAlignment;      
    int          deviceOverlap;              
    int          multiProcessorCount;        
    int          kernelExecTimeoutEnabled;   
    int          integrated;                 
    int          canMapHostMemory;           
    int          computeMode;                
    int          maxTexture1D;               
    int          maxTexture1DMipmap;         
    int          maxTexture1DLinear;         
    int          maxTexture2D[2];            
    int          maxTexture2DMipmap[2];      
    int          maxTexture2DLinear[3];      
    int          maxTexture2DGather[2];      
    int          maxTexture3D[3];            
    int          maxTexture3DAlt[3];         
    int          maxTextureCubemap;          
    int          maxTexture1DLayered[2];     
    int          maxTexture2DLayered[3];     
    int          maxTextureCubemapLayered[2];
    int          maxSurface1D;               
    int          maxSurface2D[2];            
    int          maxSurface3D[3];            
    int          maxSurface1DLayered[2];     
    int          maxSurface2DLayered[3];     
    int          maxSurfaceCubemap;          
    int          maxSurfaceCubemapLayered[2];
    size_t       surfaceAlignment;           
    int          concurrentKernels;          
    int          ECCEnabled;                 
    int          pciBusID;                   
    int          pciDeviceID;                
    int          pciDomainID;                
    int          tccDriver;                  
    int          asyncEngineCount;           
    int          unifiedAddressing;          
    int          memoryClockRate;            
    int          memoryBusWidth;             
    int          l2CacheSize;                
    int          persistingL2CacheMaxSize;   
    int          maxThreadsPerMultiProcessor;
    int          streamPrioritiesSupported;  
    int          globalL1CacheSupported;     
    int          localL1CacheSupported;      
    size_t       sharedMemPerMultiprocessor; 
    int          regsPerMultiprocessor;      
    int          managedMemory;              
    int          isMultiGpuBoard;            
    int          multiGpuBoardGroupID;       
    int          hostNativeAtomicSupported;  
    int          singleToDoublePrecisionPerfRatio; 
    int          pageableMemoryAccess;       
    int          concurrentManagedAccess;    
    int          computePreemptionSupported; 
    int          canUseHostPointerForRegisteredMem; 
    int          cooperativeLaunch;          
    int          cooperativeMultiDeviceLaunch; 
    size_t       sharedMemPerBlockOptin;     
    int          pageableMemoryAccessUsesHostPageTables; 
    int          directManagedMemAccessFromHost; 
    int          maxBlocksPerMultiProcessor; 
    int          accessPolicyMaxWindowSize;  
    size_t       reservedSharedMemPerBlock;  
    int          hostRegisterSupported;      
    int          sparseCudaArraySupported;   
    int          hostRegisterReadOnlySupported; 
    int          timelineSemaphoreInteropSupported; 
    int          memoryPoolsSupported;       
    int          gpuDirectRDMASupported;     
    unsigned int gpuDirectRDMAFlushWritesOptions; 
    int          gpuDirectRDMAWritesOrdering;
    unsigned int memoryPoolSupportedHandleTypes; 
    int          deferredMappingCudaArraySupported; 
    int          ipcEventSupported;          
    int          clusterLaunch;              
    int          unifiedFunctionPointers;    
    int          reserved2[2];
    int          reserved1[1];               
    int          reserved[60];               
};









typedef  struct  cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef  struct  cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;




typedef  struct  cudaMemFabricHandle_st 
{
    char reserved[64];
}cudaMemFabricHandle_t;




enum  cudaExternalMemoryHandleType {
    


    cudaExternalMemoryHandleTypeOpaqueFd         = 1,
    


    cudaExternalMemoryHandleTypeOpaqueWin32      = 2,
    


    cudaExternalMemoryHandleTypeOpaqueWin32Kmt   = 3,
    


    cudaExternalMemoryHandleTypeD3D12Heap        = 4,
    


    cudaExternalMemoryHandleTypeD3D12Resource    = 5,
    


    cudaExternalMemoryHandleTypeD3D11Resource    = 6,
    


    cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
    


    cudaExternalMemoryHandleTypeNvSciBuf         = 8
};









































struct  cudaExternalMemoryHandleDesc {
    


    enum  cudaExternalMemoryHandleType type;
    union {
        




        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        



        const void *nvSciBufObject;
    } handle;
    


    unsigned long long size;
    


    unsigned int flags;
};




struct  cudaExternalMemoryBufferDesc {
    


    unsigned long long offset;
    


    unsigned long long size;
    


    unsigned int flags;
};
 



struct  cudaExternalMemoryMipmappedArrayDesc {
    



    unsigned long long offset;
    


    struct cudaChannelFormatDesc formatDesc;
    


    struct cudaExtent extent;
    



    unsigned int flags;
    


    unsigned int numLevels;
};
 



enum  cudaExternalSemaphoreHandleType {
    


    cudaExternalSemaphoreHandleTypeOpaqueFd       = 1,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32    = 2,
    


    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    


    cudaExternalSemaphoreHandleTypeD3D12Fence     = 4,
    


    cudaExternalSemaphoreHandleTypeD3D11Fence     = 5,
    


     cudaExternalSemaphoreHandleTypeNvSciSync     = 6,
    


    cudaExternalSemaphoreHandleTypeKeyedMutex     = 7,
    


    cudaExternalSemaphoreHandleTypeKeyedMutexKmt  = 8,
    


    cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd  = 9,
    


    cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32  = 10
};




struct  cudaExternalSemaphoreHandleDesc {
    


    enum cudaExternalSemaphoreHandleType type;
    union {
        





        int fd;
        














        struct {
            


            void *handle;
            



            const void *name;
        } win32;
        


        const void* nvSciSyncObj;
    } handle;
    


    unsigned int flags;
};




struct  cudaExternalSemaphoreSignalParams_v1 {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
        } keyedMutex;
    } params;
    









    unsigned int flags;
};




struct  cudaExternalSemaphoreWaitParams_v1 {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
            


            unsigned int timeoutMs;
        } keyedMutex;
    } params;
    









    unsigned int flags;
};




struct  cudaExternalSemaphoreSignalParams{
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
        } keyedMutex;
        unsigned int reserved[12];
    } params;
    









    unsigned int flags;
    unsigned int reserved[16];
};




struct  cudaExternalSemaphoreWaitParams {
    struct {
        


        struct {
            


            unsigned long long value;
        } fence;
        union {
            



            void *fence;
            unsigned long long reserved;
        } nvSciSync;
        


        struct {
            


            unsigned long long key;
            


            unsigned int timeoutMs;
        } keyedMutex;
        unsigned int reserved[10];
    } params;
    









    unsigned int flags;
    unsigned int reserved[16];
};










typedef  enum cudaError cudaError_t;




typedef  struct CUstream_st *cudaStream_t;




typedef  struct CUevent_st *cudaEvent_t;




typedef  struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef  struct CUexternalMemory_st *cudaExternalMemory_t;




typedef  struct CUexternalSemaphore_st *cudaExternalSemaphore_t;




typedef  struct CUgraph_st *cudaGraph_t;




typedef  struct CUgraphNode_st *cudaGraphNode_t;




typedef  struct CUuserObject_st *cudaUserObject_t;




typedef  unsigned long long cudaGraphConditionalHandle;




typedef  struct CUfunc_st *cudaFunction_t;




typedef  struct CUkern_st *cudaKernel_t;




typedef  struct CUmemPoolHandle_st *cudaMemPool_t;




enum  cudaCGScope {
    cudaCGScopeInvalid   = 0, 
    cudaCGScopeGrid      = 1, 
    cudaCGScopeMultiGrid = 2  
};




struct  cudaLaunchParams
{
    void *func;          
    dim3 gridDim;        
    dim3 blockDim;       
    void **args;         
    size_t sharedMem;    
    cudaStream_t stream; 
};




struct  cudaKernelNodeParams {
    void* func;                     
    dim3 gridDim;                   
    dim3 blockDim;                  
    unsigned int sharedMemBytes;    
    void **kernelParams;            
    void **extra;                   
};




struct  cudaKernelNodeParamsV2 {
    void* func;                     
    


#line 2976 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
        
        uint3 gridDim;                  
        uint3 blockDim;                 
    #line 2980 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
    unsigned int sharedMemBytes;    
    void **kernelParams;            
    void **extra;                   
};




struct  cudaExternalSemaphoreSignalNodeParams {
    cudaExternalSemaphore_t* extSemArray;                        
    const struct cudaExternalSemaphoreSignalParams* paramsArray; 
    unsigned int numExtSems;                                     
};




struct  cudaExternalSemaphoreSignalNodeParamsV2 {
    cudaExternalSemaphore_t* extSemArray;                        
    const struct cudaExternalSemaphoreSignalParams* paramsArray; 
    unsigned int numExtSems;                                     
};




struct  cudaExternalSemaphoreWaitNodeParams {
    cudaExternalSemaphore_t* extSemArray;                      
    const struct cudaExternalSemaphoreWaitParams* paramsArray; 
    unsigned int numExtSems;                                   
};




struct  cudaExternalSemaphoreWaitNodeParamsV2 {
    cudaExternalSemaphore_t* extSemArray;                      
    const struct cudaExternalSemaphoreWaitParams* paramsArray; 
    unsigned int numExtSems;                                   
};

enum  cudaGraphConditionalHandleFlags {
    cudaGraphCondAssignDefault = 1 
};




enum  cudaGraphConditionalNodeType {
     cudaGraphCondTypeIf = 0,      
     cudaGraphCondTypeWhile = 1,   
};




struct  cudaConditionalNodeParams {
    cudaGraphConditionalHandle handle;       


    enum cudaGraphConditionalNodeType type;  
    unsigned int size;                       
    cudaGraph_t *phGraph_out;                









};




enum  cudaGraphNodeType {
    cudaGraphNodeTypeKernel      = 0x00, 
    cudaGraphNodeTypeMemcpy      = 0x01, 
    cudaGraphNodeTypeMemset      = 0x02, 
    cudaGraphNodeTypeHost        = 0x03, 
    cudaGraphNodeTypeGraph       = 0x04, 
    cudaGraphNodeTypeEmpty       = 0x05, 
    cudaGraphNodeTypeWaitEvent   = 0x06, 
    cudaGraphNodeTypeEventRecord = 0x07, 
    cudaGraphNodeTypeExtSemaphoreSignal = 0x08, 
    cudaGraphNodeTypeExtSemaphoreWait = 0x09, 
    cudaGraphNodeTypeMemAlloc    = 0x0a, 
    cudaGraphNodeTypeMemFree     = 0x0b, 
    cudaGraphNodeTypeConditional = 0x0d, 
















    cudaGraphNodeTypeCount
};




struct  cudaChildGraphNodeParams {
    cudaGraph_t graph; 

};




struct  cudaEventRecordNodeParams {
    cudaEvent_t event; 
};




struct  cudaEventWaitNodeParams {
    cudaEvent_t event; 
};




struct  cudaGraphNodeParams {
    enum cudaGraphNodeType type; 
    int reserved0[3];            

    union {
        long long                                      reserved1[29]; 
        struct cudaKernelNodeParamsV2                  kernel;        
        struct cudaMemcpyNodeParams                    memcpy;        
        struct cudaMemsetParamsV2                      memset;        
        struct cudaHostNodeParamsV2                    host;          
        struct cudaChildGraphNodeParams                graph;         
        struct cudaEventWaitNodeParams                 eventWait;     
        struct cudaEventRecordNodeParams               eventRecord;   
        struct cudaExternalSemaphoreSignalNodeParamsV2 extSemSignal;  
        struct cudaExternalSemaphoreWaitNodeParamsV2   extSemWait;    
        struct cudaMemAllocNodeParamsV2                alloc;         
        struct cudaMemFreeNodeParams                   free;          
        struct cudaConditionalNodeParams               conditional;   
    };

    long long reserved2; 
};




typedef  enum cudaGraphDependencyType_enum {
    cudaGraphDependencyTypeDefault = 0, 
    cudaGraphDependencyTypeProgrammatic = 1  




} cudaGraphDependencyType;






typedef  struct cudaGraphEdgeData_st {
    unsigned char from_port; 









    unsigned char to_port; 






    unsigned char type; 


    unsigned char reserved[5]; 

} cudaGraphEdgeData;




















typedef struct CUgraphExec_st* cudaGraphExec_t;




enum  cudaGraphExecUpdateResult {
    cudaGraphExecUpdateSuccess                = 0x0, 
    cudaGraphExecUpdateError                  = 0x1, 
    cudaGraphExecUpdateErrorTopologyChanged   = 0x2, 
    cudaGraphExecUpdateErrorNodeTypeChanged   = 0x3, 
    cudaGraphExecUpdateErrorFunctionChanged   = 0x4, 
    cudaGraphExecUpdateErrorParametersChanged = 0x5, 
    cudaGraphExecUpdateErrorNotSupported      = 0x6, 
    cudaGraphExecUpdateErrorUnsupportedFunctionChange = 0x7, 
    cudaGraphExecUpdateErrorAttributesChanged = 0x8 
};




typedef  enum cudaGraphInstantiateResult {
    cudaGraphInstantiateSuccess = 0,                       
    cudaGraphInstantiateError = 1,                         
    cudaGraphInstantiateInvalidStructure = 2,              
    cudaGraphInstantiateNodeOperationNotSupported = 3,     
    cudaGraphInstantiateMultipleDevicesNotSupported = 4    
} cudaGraphInstantiateResult;




typedef  struct cudaGraphInstantiateParams_st
{
    unsigned long long flags;              
    cudaStream_t uploadStream;             
    cudaGraphNode_t errNode_out;           
    cudaGraphInstantiateResult result_out; 
} cudaGraphInstantiateParams;




typedef  struct cudaGraphExecUpdateResultInfo_st {
    


    enum cudaGraphExecUpdateResult result;

    




    cudaGraphNode_t errorNode;

    


    cudaGraphNode_t errorFromNode;
} cudaGraphExecUpdateResultInfo;




typedef struct CUgraphDeviceUpdatableNode_st* cudaGraphDeviceNode_t;




enum  cudaGraphKernelNodeField
{
    cudaGraphKernelNodeFieldInvalid = 0, 
    cudaGraphKernelNodeFieldGridDim,     
    cudaGraphKernelNodeFieldParam,       
    cudaGraphKernelNodeFieldEnabled      
};




struct  cudaGraphKernelNodeUpdate {
    cudaGraphDeviceNode_t node;     
    enum cudaGraphKernelNodeField field; 
    union {


#line 3286 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
        
        uint3 gridDim;              
#line 3289 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
        struct {
            const void *pValue;     
            size_t offset;          
            size_t size;            
        } param;                    
        unsigned int isEnabled;     
    } updateData;                   
};




 
enum  cudaGetDriverEntryPointFlags {
    cudaEnableDefault                = 0x0, 
    cudaEnableLegacyStream           = 0x1, 
    cudaEnablePerThreadDefaultStream = 0x2  
};




enum  cudaDriverEntryPointQueryResult {
    cudaDriverEntryPointSuccess             = 0,  
    cudaDriverEntryPointSymbolNotFound      = 1,  
    cudaDriverEntryPointVersionNotSufficent = 2   
};




enum  cudaGraphDebugDotFlags {
    cudaGraphDebugDotFlagsVerbose                  = 1<<0,  
    cudaGraphDebugDotFlagsKernelNodeParams         = 1<<2,  
    cudaGraphDebugDotFlagsMemcpyNodeParams         = 1<<3,  
    cudaGraphDebugDotFlagsMemsetNodeParams         = 1<<4,  
    cudaGraphDebugDotFlagsHostNodeParams           = 1<<5,  
    cudaGraphDebugDotFlagsEventNodeParams          = 1<<6,  
    cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 1<<7,  
    cudaGraphDebugDotFlagsExtSemasWaitNodeParams   = 1<<8,  
    cudaGraphDebugDotFlagsKernelNodeAttributes     = 1<<9,  
    cudaGraphDebugDotFlagsHandles                  = 1<<10  
    ,cudaGraphDebugDotFlagsConditionalNodeParams   = 1<<15,  
};




enum  cudaGraphInstantiateFlags {
    cudaGraphInstantiateFlagAutoFreeOnLaunch = 1 
  , cudaGraphInstantiateFlagUpload           = 2 

                                                                                                                                                                                                                                                                                                                               
  , cudaGraphInstantiateFlagDeviceLaunch     = 4 

                                                                                                                                                                                                                                                                                              
  , cudaGraphInstantiateFlagUseNodePriority  = 8 

};

















typedef  enum cudaLaunchMemSyncDomain {
    cudaLaunchMemSyncDomainDefault = 0,    
    cudaLaunchMemSyncDomainRemote  = 1     
} cudaLaunchMemSyncDomain;












typedef  struct cudaLaunchMemSyncDomainMap_st {
    unsigned char default_;                
    unsigned char remote;                  
} cudaLaunchMemSyncDomainMap;




typedef  enum cudaLaunchAttributeID {
    cudaLaunchAttributeIgnore                = 0 
  , cudaLaunchAttributeAccessPolicyWindow    = 1 

  , cudaLaunchAttributeCooperative           = 2 

  , cudaLaunchAttributeSynchronizationPolicy = 3 
  , cudaLaunchAttributeClusterDimension                  = 4 

  , cudaLaunchAttributeClusterSchedulingPolicyPreference = 5 

  , cudaLaunchAttributeProgrammaticStreamSerialization   = 6 










  , cudaLaunchAttributeProgrammaticEvent                 = 7 

























  , cudaLaunchAttributePriority              = 8 

  , cudaLaunchAttributeMemSyncDomainMap                  = 9 

  , cudaLaunchAttributeMemSyncDomain                    = 10 

  , cudaLaunchAttributeLaunchCompletionEvent = 12 





















  , cudaLaunchAttributeDeviceUpdatableKernelNode = 13 



























} cudaLaunchAttributeID;




typedef  union cudaLaunchAttributeValue {
    char pad[64]; 
    struct cudaAccessPolicyWindow accessPolicyWindow; 
    int cooperative; 

    enum cudaSynchronizationPolicy syncPolicy; 


    










    struct {
        unsigned int x;
        unsigned int y;
        unsigned int z;
    } clusterDim;
    enum cudaClusterSchedulingPolicy clusterSchedulingPolicyPreference; 


    int programmaticStreamSerializationAllowed; 

    struct {
        cudaEvent_t event;       
        int flags;               

        int triggerAtBlockStart; 
    } programmaticEvent;         
    int priority; 
    cudaLaunchMemSyncDomainMap memSyncDomainMap; 


    cudaLaunchMemSyncDomain memSyncDomain;       

    struct {
        cudaEvent_t event; 
        int flags; 

    } launchCompletionEvent; 

    struct {
        int deviceUpdatable; 
        cudaGraphDeviceNode_t devNode; 
    } deviceUpdatableKernelNode; 
} cudaLaunchAttributeValue;




typedef  struct cudaLaunchAttribute_st {
    cudaLaunchAttributeID id; 
    char pad[8 - sizeof(cudaLaunchAttributeID)];
    cudaLaunchAttributeValue val; 
} cudaLaunchAttribute;




typedef  struct cudaLaunchConfig_st {
    dim3 gridDim;               
    dim3 blockDim;              
    size_t dynamicSmemBytes;    
    cudaStream_t stream;        
    cudaLaunchAttribute *attrs; 
    unsigned int numAttrs;      
} cudaLaunchConfig_t;






















enum   cudaDeviceNumaConfig {
    cudaDeviceNumaConfigNone  = 0, 
    cudaDeviceNumaConfigNumaNode, 
};




typedef struct cudaAsyncCallbackEntry* cudaAsyncCallbackHandle_t;

struct cudaAsyncCallbackEntry;




typedef  enum cudaAsyncNotificationType_enum {
    cudaAsyncNotificationTypeOverBudget = 0x1
} cudaAsyncNotificationType;




typedef  struct cudaAsyncNotificationInfo
{
    cudaAsyncNotificationType type;
    union {
        struct {
            unsigned long long bytesOverBudget;
        } overBudget;
    } info;
} cudaAsyncNotificationInfo_t;

typedef void (*cudaAsyncCallback)(cudaAsyncNotificationInfo_t*, void*, cudaAsyncCallbackHandle_t);



 

#line 3632 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 3637 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





#line 3643 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 60 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\builtin_types.h"

#line 62 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\builtin_types.h"
#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"


























































#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3643 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 60 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"


























enum  cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum   cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




typedef  unsigned long long cudaSurfaceObject_t;


 

#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"
#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"
#line 63 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\builtin_types.h"
#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"


























































#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3643 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 60 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"


























enum  cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum  cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum  cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct  cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
    


    int                         disableTrilinearOptimization;
    


    int                         seamlessCubemap;
};




typedef  unsigned long long cudaTextureObject_t;


 

#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"
#line 181 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"
#line 64 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\builtin_types.h"
#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
































































































































































































































































































































































































































































#line 450 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 65 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\builtin_types.h"
#line 59 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"
#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"






















#line 24 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"








#line 33 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"






#line 40 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 44 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 48 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 52 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 56 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 60 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 64 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 68 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 72 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 76 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 80 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 84 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 88 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 92 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 132 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"



#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"

#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"




#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\storage_class.h"
#line 60 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

















































































































































































































































#line 302 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"




#line 307 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"
#line 198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
typedef __int64 ptrdiff_t; 
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
typedef __int64 intptr_t; 
#line 203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
typedef bool __vcrt_bool; 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
extern "C++" {
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(__unaligned _CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
}
#line 377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
void __cdecl __security_init_cookie(); 
#line 386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
void __cdecl __security_check_cookie(uintptr_t _StackCookie); 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
__declspec(noreturn) void __cdecl __report_gsfailure(uintptr_t _StackCookie); 
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
extern uintptr_t __security_cookie; 
#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
}__pragma(pack ( pop )) 
#line 401 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime.h"
#pragma warning(pop)
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
extern "C++" {
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
template< bool _Enable, class _Ty> struct _CrtEnableIf; 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
template< class _Ty> 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
struct _CrtEnableIf< true, _Ty>  { 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef _Ty _Type; 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
}; 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
}
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef bool __crt_bool; 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
void __cdecl _invalid_parameter_noinfo(); 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
__declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(); 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
__declspec(noreturn) void __cdecl 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
_invoke_watson(const __wchar_t * _Expression, const __wchar_t * _FunctionName, const __wchar_t * _FileName, unsigned _LineNo, uintptr_t _Reserved); 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef int errno_t; 
#line 605 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef unsigned short wint_t; 
#line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef unsigned short wctype_t; 
#line 607 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef long __time32_t; 
#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef __int64 __time64_t; 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
struct __crt_locale_data_public { 
#line 612 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
const unsigned short *_locale_pctype; 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
int _locale_mb_cur_max; 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
unsigned _locale_lc_codepage; 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
} __crt_locale_data_public; 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
struct __crt_locale_pointers { 
#line 619 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
struct __crt_locale_data *locinfo; 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
struct __crt_multibyte_data *mbcinfo; 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
} __crt_locale_pointers; 
#line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef __crt_locale_pointers *_locale_t; 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef 
#line 625 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
struct _Mbstatet { 
#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
unsigned long _Wchar; 
#line 628 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
unsigned short _Byte, _State; 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
} _Mbstatet; 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef _Mbstatet mbstate_t; 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef __time64_t time_t; 
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
typedef size_t rsize_t; 
#line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
}__pragma(pack ( pop )) 
#line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
const unsigned short *__cdecl __pctype_func(); 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
const wctype_t *__cdecl __pwctype_func(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswalnum(wint_t _C); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswalpha(wint_t _C); 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswascii(wint_t _C); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswblank(wint_t _C); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswcntrl(wint_t _C); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswdigit(wint_t _C); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswgraph(wint_t _C); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswlower(wint_t _C); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswprint(wint_t _C); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswpunct(wint_t _C); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswspace(wint_t _C); 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswupper(wint_t _C); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswxdigit(wint_t _C); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl __iswcsymf(wint_t _C); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl __iswcsym(wint_t _C); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale); 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale); 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale); 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
wint_t __cdecl towupper(wint_t _C); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
wint_t __cdecl towlower(wint_t _C); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl iswctype(wint_t _C, wctype_t _Type); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl isleadbyte(int _C); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
int __cdecl _isleadbyte_l(int _C, _locale_t _Locale); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instea" "d. See online help for details.")) int __cdecl is_wctype(wint_t _C, wctype_t _Type); 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
}__pragma(pack ( pop )) 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wctype.h"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isctype(int _C, int _Type); 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale); 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isalpha(int _C); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isalpha_l(int _C, _locale_t _Locale); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isupper(int _C); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isupper_l(int _C, _locale_t _Locale); 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl islower(int _C); 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _islower_l(int _C, _locale_t _Locale); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isdigit(int _C); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isdigit_l(int _C, _locale_t _Locale); 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isxdigit(int _C); 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isxdigit_l(int _C, _locale_t _Locale); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isspace(int _C); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isspace_l(int _C, _locale_t _Locale); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl ispunct(int _C); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _ispunct_l(int _C, _locale_t _Locale); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isblank(int _C); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isblank_l(int _C, _locale_t _Locale); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isalnum(int _C); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isalnum_l(int _C, _locale_t _Locale); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isprint(int _C); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isprint_l(int _C, _locale_t _Locale); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl isgraph(int _C); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _isgraph_l(int _C, _locale_t _Locale); 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl iscntrl(int _C); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _iscntrl_l(int _C, _locale_t _Locale); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl toupper(int _C); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl tolower(int _C); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _tolower(int _C); 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _tolower_l(int _C, _locale_t _Locale); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _toupper(int _C); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl _toupper_l(int _C, _locale_t _Locale); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl __isascii(int _C); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl __toascii(int _C); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl __iscsymf(int _C); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl __iscsym(int _C); 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__inline int __cdecl __acrt_locale_get_ctype_array_value(const unsigned short *const 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_Locale_pctype_array, const int 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_Char_value, const int 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_Mask) 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
if ((_Char_value >= (-1)) && (_Char_value <= 255)) 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return (_Locale_pctype_array[_Char_value]) & _Mask; 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
}  
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return 0; 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl ___mb_cur_max_func(); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
int __cdecl ___mb_cur_max_l_func(_locale_t _Locale); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__forceinline int __cdecl __ascii_tolower(const int _C) 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
if ((_C >= ('A')) && (_C <= ('Z'))) 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return _C - (('A') - ('a')); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
}  
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return _C; 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__forceinline int __cdecl __ascii_toupper(const int _C) 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
if ((_C >= ('a')) && (_C <= ('z'))) 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return _C - (('a') - ('A')); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
}  
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return _C; 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__forceinline int __cdecl __ascii_iswalpha(const int _C) 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return ((_C >= ('A')) && (_C <= ('Z'))) || ((_C >= ('a')) && (_C <= ('z'))); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__forceinline int __cdecl __ascii_iswdigit(const int _C) 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return (_C >= ('0')) && (_C <= ('9')); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__forceinline int __cdecl __ascii_towlower(const int _C) 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return __ascii_tolower(_C); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__forceinline int __cdecl __ascii_towupper(const int _C) 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return __ascii_toupper(_C); 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__inline __crt_locale_data_public *__cdecl __acrt_get_locale_data_prefix(const volatile void *const _LocalePointers) 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
const _locale_t _TypedLocalePointers = (_locale_t)_LocalePointers; 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return (__crt_locale_data_public *)(_TypedLocalePointers->locinfo); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__inline int __cdecl _chvalidchk_l(const int 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_C, const int 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_Mask, const _locale_t 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_Locale) 
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
if (!_Locale) 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return __acrt_locale_get_ctype_array_value(__pctype_func(), _C, _Mask); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
}  
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return __acrt_locale_get_ctype_array_value(__acrt_get_locale_data_prefix(_Locale)->_locale_pctype, _C, _Mask); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
__inline int __cdecl _ischartype_l(const int 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_C, const int 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_Mask, const _locale_t 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
_Locale) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
if (!_Locale) 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return _chvalidchk_l(_C, _Mask, 0); 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
}  
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
if ((_C >= (-1)) && (_C <= 255)) 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return ((__acrt_get_locale_data_prefix(_Locale)->_locale_pctype)[_C]) & _Mask; 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
}  
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
if ((__acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max) > 1) 
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
{ 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return _isctype_l(_C, _Mask, _Locale); 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
}  
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
return 0; 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
} 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
}__pragma(pack ( pop )) 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\ctype.h"
#pragma warning(pop)
#line 68 "D:\\Programming\\CUDA\\v12.4\\include\\device_types.h"













#line 82 "D:\\Programming\\CUDA\\v12.4\\include\\device_types.h"
#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 135 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 150 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 158 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 168 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 170 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"



#line 179 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"



#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 186 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 188 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"



#line 192 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"



#line 193 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 199 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 196 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 204 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 209 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 206 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 211 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 219 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 224 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 222 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"



#line 226 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 223 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"



#line 227 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 238 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 251 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 248 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 253 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 258 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 266 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 280 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"



#line 284 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 285 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 293 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 290 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 298 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 295 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 303 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 300 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 308 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 305 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 313 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 310 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 318 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 315 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 323 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 320 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 328 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 325 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 333 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 330 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 338 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 335 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 343 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 340 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 348 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 345 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 353 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 350 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 358 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 367 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 372 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 368 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 373 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 369 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 374 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 370 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 375 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 371 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 376 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 372 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 377 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 373 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 378 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 374 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 379 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 375 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 380 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 376 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 381 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 377 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 382 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 378 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 383 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 379 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 384 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 380 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 385 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 381 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 386 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 382 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 387 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 383 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 388 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 384 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 389 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 385 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 390 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 386 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 391 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 387 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 392 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 388 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 393 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 389 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 394 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 390 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 395 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 391 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 396 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 392 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 397 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 393 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 398 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 394 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 399 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 395 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 400 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 396 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 401 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 397 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 402 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 398 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 403 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 399 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 404 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 400 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 405 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 401 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 406 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 402 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 407 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 403 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 408 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 404 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 409 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 405 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 410 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 406 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 411 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 407 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 412 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 408 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 413 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 409 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 414 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 410 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 415 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 411 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 416 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 412 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 417 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 413 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 418 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 414 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 419 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 426 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"







#line 434 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 442 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"




#line 447 "D:\\Programming\\CUDA\\v12.4\\include\\vector_types.h"
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"
}__pragma(pack ( pop )) 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
namespace std { 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
typedef decltype(nullptr) nullptr_t; 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
}
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
using std::nullptr_t;
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
int *__cdecl _errno(); 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
errno_t __cdecl _set_errno(int _Value); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
errno_t __cdecl _get_errno(int * _Value); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
extern unsigned long __cdecl __threadid(); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
extern uintptr_t __cdecl __threadhandle(); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
}__pragma(pack ( pop )) 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stddef.h"
#pragma warning(pop)
#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







































































































































































































































































#line 469 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1105 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"



































































#line 1173 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1143 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 1159 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1155 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 1160 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef const cudaArray *cudaArray_const_t; 
#line 1162 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
struct cudaArray; 
#line 1167 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 1172 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 1174 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
struct cudaMipmappedArray; 
#line 1184 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"























#line 1208 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1199 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1211 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1208 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 1222 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1219 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 1235 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1233 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 1247 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1246 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1258 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1258 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1270 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1268 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





















#line 1290 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1285 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1297 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1294 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"























#line 1318 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1312 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

















#line 1330 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1324 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

















#line 1342 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1336 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1348 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1353 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 1369 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1371 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef void (__stdcall *cudaHostFn_t)(void * userData); 
#line 1376 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 1386 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1384 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 1394 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1392 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1404 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1403 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1415 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1409 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 1423 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1419 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1431 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1428 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 1438 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1436 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 1444 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1443 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 1451 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1450 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
struct cudaGraphicsResource; 
#line 1455 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 1471 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1467 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1479 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1477 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

















#line 1495 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1490 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 1504 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1501 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











































































#line 1577 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1543 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















































#line 1591 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1571 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





















#line 1593 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1586 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 1600 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1624 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







































#line 1664 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1748 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"























#line 1772 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1764 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 1778 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1776 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1788 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1786 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1798 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1795 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 1809 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1806 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"



















#line 1826 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1820 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

















#line 1838 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1833 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





















#line 1855 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1848 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 1858 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1856 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 1868 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1865 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 1875 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1873 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 1881 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 1881 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







































































































































































































































































#line 2145 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2017 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





















#line 2039 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2085 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 2101 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2099 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 2109 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2107 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 2119 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2116 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 2126 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2124 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 2136 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2136 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 2152 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2147 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

















#line 2165 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2165 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 2173 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2172 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 2188 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2187 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 2203 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2202 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 2210 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2209 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 2223 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2242 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 2256 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2254 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 2262 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2257 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2262 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2259 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2264 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2264 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





































































































































































































#line 2462 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2375 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"








#line 2384 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2383 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"








#line 2392 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2391 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"








#line 2400 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2396 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





















#line 2418 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2471 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"



























#line 2499 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2528 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 2540 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2546 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"















#line 2562 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2574 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

























#line 2600 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2620 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

























#line 2646 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2673 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"































#line 2705 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2718 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

































#line 2752 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2767 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"



































#line 2803 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2814 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"





































#line 2852 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2871 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2876 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2876 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2881 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2881 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2886 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2886 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2891 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2891 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2896 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2896 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2901 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2901 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2906 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2906 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2911 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2911 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2916 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2916 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2921 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2921 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2926 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2926 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2931 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2931 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




#line 2936 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2936 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 2948 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2945 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

















#line 2963 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2958 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

















#line 2976 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2970 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

















#line 2988 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2988 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 3000 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 2997 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 3009 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3006 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 3018 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3015 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 3027 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3021 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 3029 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3028 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 3038 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3036 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 3050 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3057 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"

































#line 3091 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3093 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 3101 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3101 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 3109 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3108 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"







#line 3116 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3115 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









































#line 3157 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3148 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"










#line 3159 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3178 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"














#line 3193 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3199 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
#line 3204 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"























#line 3228 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3225 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
















#line 3242 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3236 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"














#line 3251 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3258 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"












#line 3271 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3263 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef struct CUgraphDeviceUpdatableNode_st *cudaGraphDeviceNode_t; 
#line 3268 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 3282 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3279 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"



























#line 3307 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3302 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 3314 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3311 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"











#line 3323 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3320 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"



























#line 3348 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3337 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"













#line 3351 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3368 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"










#line 3379 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3384 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"










#line 3395 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3493 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
































#line 3526 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3549 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"




























































#line 3610 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3558 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"












#line 3571 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3570 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"


















#line 3589 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3593 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"









#line 3603 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3601 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef struct cudaAsyncCallbackEntry *cudaAsyncCallbackHandle_t; 
#line 3603 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
struct cudaAsyncCallbackEntry; 
#line 3610 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"








#line 3619 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3623 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"


















#line 3642 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
#line 3625 "D:\\Programming\\CUDA\\v12.4\\include\\driver_types.h"
typedef void (*cudaAsyncCallback)(cudaAsyncNotificationInfo_t *, void *, cudaAsyncCallbackHandle_t); 
#line 86 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"











#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"
#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"









#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"
#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"




#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\surface_types.h"
#line 86 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"













#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"
#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"









#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"
#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"









#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"
#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"































#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"
#line 174 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"




#line 179 "D:\\Programming\\CUDA\\v12.4\\include\\texture_types.h"
#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
typedef 
#line 57 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
enum cudaDataType_t { 
#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_16F = 2, 
#line 60 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_16F = 6, 
#line 61 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_16BF = 14, 
#line 62 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_16BF, 
#line 63 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_32F = 0, 
#line 64 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_32F = 4, 
#line 65 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_64F = 1, 
#line 66 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_64F = 5, 
#line 67 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_4I = 16, 
#line 68 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_4I, 
#line 69 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_4U, 
#line 70 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_4U, 
#line 71 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_8I = 3, 
#line 72 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_8I = 7, 
#line 73 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_8U, 
#line 74 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_8U, 
#line 75 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_16I = 20, 
#line 76 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_16I, 
#line 77 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_16U, 
#line 78 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_16U, 
#line 79 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_32I = 10, 
#line 80 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_32I, 
#line 81 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_32U, 
#line 82 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_32U, 
#line 83 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_64I = 24, 
#line 84 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_64I, 
#line 85 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_64U, 
#line 86 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_C_64U, 
#line 87 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_8F_E4M3, 
#line 88 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
CUDA_R_8F_E5M2
#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
} cudaDataType; 
#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
typedef 
#line 92 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
enum libraryPropertyType_t { 
#line 94 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
MAJOR_VERSION, 
#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
MINOR_VERSION, 
#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
PATCH_LEVEL
#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\library_types.h"
} libraryPropertyType; 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_calloc_base(size_t _Count, size_t _Size); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
calloc(size_t _Count, size_t _Size); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
int __cdecl _callnewh(size_t _Size); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) void *__cdecl 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_expand(void * _Block, size_t _Size); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
void __cdecl _free_base(void * _Block); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
void __cdecl free(void * _Block); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_malloc_base(size_t _Size); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
malloc(size_t _Size); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
size_t __cdecl _msize_base(void * _Block) noexcept; 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
size_t __cdecl _msize(void * _Block); 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_realloc_base(void * _Block, size_t _Size); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
realloc(void * _Block, size_t _Size); 
#line 132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_recalloc_base(void * _Block, size_t _Count, size_t _Size); 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_recalloc(void * _Block, size_t _Count, size_t _Size); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
void __cdecl _aligned_free(void * _Block); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_aligned_malloc(size_t _Size, size_t _Alignment); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
size_t __cdecl _aligned_msize(void * _Block, size_t _Alignment, size_t _Offset); 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_realloc(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_aligned_realloc(void * _Block, size_t _Size, size_t _Alignment); 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
__declspec(allocator) __declspec(restrict) void *__cdecl 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
_aligned_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
}__pragma(pack ( pop )) 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_malloc.h"
#pragma warning(pop)
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
typedef int (__cdecl *_CoreCrtSecureSearchSortCompareFunction)(void *, const void *, const void *); 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
typedef int (__cdecl *_CoreCrtNonSecureSearchSortCompareFunction)(const void *, const void *); 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void *__cdecl _lfind_s(const void * _Key, const void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void *__cdecl _lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void *__cdecl _lsearch_s(const void * _Key, void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void *__cdecl _lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void *__cdecl lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
void *__cdecl lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
}__pragma(pack ( pop )) 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_search.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _itow_s(int _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _itow_s ( int _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _itow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _itow(int _Value, __wchar_t * _Buffer, int _Radix); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _ltow_s(long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ltow_s ( long _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ltow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Buffer, int _Radix); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ultow_s ( unsigned long _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ultow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Buffer, int _Radix); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
double __cdecl wcstod(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
double __cdecl _wcstod_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
long __cdecl wcstol(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
long __cdecl _wcstol_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl wcstoll(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wcstoll_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
unsigned long __cdecl wcstoul(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
unsigned long __cdecl _wcstoul_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
unsigned __int64 __cdecl wcstoull(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
long double __cdecl wcstold(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
long double __cdecl _wcstold_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
float __cdecl wcstof(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
float __cdecl _wcstof_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
double __cdecl _wtof(const __wchar_t * _String); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
double __cdecl _wtof_l(const __wchar_t * _String, _locale_t _Locale); 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
int __cdecl _wtoi(const __wchar_t * _String); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
int __cdecl _wtoi_l(const __wchar_t * _String, _locale_t _Locale); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
long __cdecl _wtol(const __wchar_t * _String); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
long __cdecl _wtol_l(const __wchar_t * _String, _locale_t _Locale); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wtoll(const __wchar_t * _String); 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wtoll_l(const __wchar_t * _String, _locale_t _Locale); 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _i64tow_s(__int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _i64tow(__int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _ui64tow(unsigned __int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wtoi64(const __wchar_t * _String); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wtoi64_l(const __wchar_t * _String, _locale_t _Locale); 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wcstoi64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__int64 __cdecl _wcstoi64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__declspec(allocator) __wchar_t *__cdecl _wfullpath(__wchar_t * _Buffer, const __wchar_t * _Path, size_t _BufferCount); 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wmakepath_s(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wmakepath_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Drive, wchar_t const * _Dir, wchar_t const * _Filename, wchar_t const * _Ext ) throw ( ) { return _wmakepath_s ( _Buffer, _Size, _Drive, _Dir, _Filename, _Ext ); }}
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
void __cdecl _wmakepath(__wchar_t * _Buffer, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveCount, __wchar_t * _Dir, size_t _DirCount, __wchar_t * _Filename, size_t _FilenameCount, __wchar_t * _Ext, size_t _ExtCount); 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _wsplitpath_s ( wchar_t const * _Path, wchar_t ( & _Drive ) [ _DriveSize ], wchar_t ( & _Dir ) [ _DirSize ], wchar_t ( & _Name ) [ _NameSize ], wchar_t ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _wsplitpath_s ( _Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }}
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferCount, const __wchar_t * _VarName); 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
__wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wgetenv_s(size_t * _RequiredCount, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _VarName); 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wgetenv_s ( size_t * _RequiredCount, wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _VarName ) throw ( ) { return _wgetenv_s ( _RequiredCount, _Buffer, _Size, _VarName ); }}
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
int __cdecl _wputenv(const __wchar_t * _EnvString); 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _Buffer, size_t _BufferCount); 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wsearchenv_s ( wchar_t const * _Filename, wchar_t const * _VarName, wchar_t ( & _ResultPath ) [ _Size ] ) throw ( ) { return _wsearchenv_s ( _Filename, _VarName, _ResultPath, _Size ); }}
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _ResultPath); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
int __cdecl _wsystem(const __wchar_t * _Command); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
}__pragma(pack ( pop )) 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(pop)
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl exit(int _Code); 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl _exit(int _Code); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl _Exit(int _Code); 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl quick_exit(int _Code); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(noreturn) void __cdecl abort(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef int (__cdecl *_onexit_t)(void); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl atexit(void (__cdecl *)(void)); 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_onexit_t __cdecl _onexit(_onexit_t _Func); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl at_quick_exit(void (__cdecl *)(void)); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_purecall_handler)(void); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_purecall_handler __cdecl _get_purecall_handler(); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _set_error_mode(int _Mode); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int *__cdecl _errno(); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _set_errno(int _Value); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_errno(int * _Value); 
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned long *__cdecl __doserrno(); 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char **__cdecl __sys_errlist(); 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int *__cdecl __sys_nerr(); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
void __cdecl perror(const char * _ErrMsg); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char **__cdecl __p__pgmptr(); 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__wchar_t **__cdecl __p__wpgmptr(); 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int *__cdecl __p__fmode(); 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_pgmptr(char ** _Value); 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _set_fmode(int _Mode); 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _get_fmode(int * _PMode); 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
struct _div_t { 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int quot; 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int rem; 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} div_t; 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
struct _ldiv_t { 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long quot; 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long rem; 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} ldiv_t; 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
struct _lldiv_t { 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 quot; 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 rem; 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} lldiv_t; 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl abs(int _Number); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long __cdecl labs(long _Number); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl llabs(__int64 _Number); 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl _abs64(__int64 _Number); 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned short __cdecl _byteswap_ushort(unsigned short _Number); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned long __cdecl _byteswap_ulong(unsigned long _Number); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number); 
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
div_t __cdecl div(int _Numerator, int _Denominator); 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 6540)
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotl(unsigned long _Value, int _Shift); 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotr(unsigned long _Value, int _Shift); 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
void __cdecl srand(unsigned _Seed); 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl rand(); 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
inline long abs(const long _X) throw() 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
{ 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
return labs(_X); 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
inline __int64 abs(const __int64 _X) throw() 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
{ 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
return llabs(_X); 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
inline ldiv_t div(const long _A1, const long _A2) throw() 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
{ 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
return ldiv(_A1, _A2); 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
inline lldiv_t div(const __int64 _A1, const __int64 _A2) throw() 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
{ 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
return lldiv(_A1, _A2); 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
}
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
struct { 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned char ld[10]; 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} _LDOUBLE; 
#pragma pack ( pop )
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
struct { 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
double x; 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} _CRT_DOUBLE; 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
struct { 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
float f; 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} _CRT_FLOAT; 
#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
struct { 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long double x; 
#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} _LONGDOUBLE; 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
typedef 
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
struct { 
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned char ld12[12]; 
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
} _LDBL12; 
#pragma pack ( pop )
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
double __cdecl atof(const char * _String); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl atoi(const char * _String); 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long __cdecl atol(const char * _String); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl atoll(const char * _String); 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl _atoi64(const char * _String); 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _atoi_l(const char * _String, _locale_t _Locale); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long __cdecl _atol_l(const char * _String, _locale_t _Locale); 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl _atoll_l(const char * _String, _locale_t _Locale); 
#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _String); 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _String); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _atoldbl(_LDOUBLE * _Result, char * _String); 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _String, _locale_t _Locale); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
float __cdecl strtof(const char * _String, char ** _EndPtr); 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
float __cdecl _strtof_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
double __cdecl strtod(const char * _String, char ** _EndPtr); 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
double __cdecl _strtod_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long double __cdecl strtold(const char * _String, char ** _EndPtr); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long double __cdecl _strtold_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long __cdecl strtol(const char * _String, char ** _EndPtr, int _Radix); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
long __cdecl _strtol_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl strtoll(const char * _String, char ** _EndPtr, int _Radix); 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl _strtoll_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned long __cdecl strtoul(const char * _String, char ** _EndPtr, int _Radix); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned long __cdecl _strtoul_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl strtoull(const char * _String, char ** _EndPtr, int _Radix); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _strtoull_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 626 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _itoa_s(int _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _itoa_s ( int _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _itoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl _itoa(int _Value, char * _Buffer, int _Radix); 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _ltoa_s(long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ltoa_s ( long _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ltoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl _ltoa(long _Value, char * _Buffer, int _Radix); 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _ultoa_s(unsigned long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 680 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ultoa_s ( unsigned long _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ultoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl _ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _i64toa_s(__int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl _i64toa(__int64 _Value, char * _Buffer, int _Radix); 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl _ui64toa(unsigned __int64 _Value, char * _Buffer, int _Radix); 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _ecvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ecvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _DigitCount, int * _PtDec, int * _PtSign ) throw ( ) { return _ecvt_s ( _Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign ); }}
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl _ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _fcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _fcvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign ) throw ( ) { return _fcvt_s ( _Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign ); }}
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _gcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount); 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _gcvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _DigitCount ) throw ( ) { return _gcvt_s ( _Buffer, _Size, _Value, _DigitCount ); }}
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl _gcvt(double _Value, int _DigitCount, char * _Buffer); 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl mblen(const char * _Ch, size_t _MaxCount); 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstrlen(const char * _String); 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstrlen_l(const char * _String, _locale_t _Locale); 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstrnlen(const char * _String, size_t _MaxCount); 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstrnlen_l(const char * _String, size_t _MaxCount, _locale_t _Locale); 
#line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl mbstowcs_s ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], char const * _Source, size_t _MaxCount ) throw ( ) { return mbstowcs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }}
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _mbstowcs_s_l ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], char const * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _mbstowcs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }}
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); 
#line 978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); 
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); 
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); 
#line 1004 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcstombs_s ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], wchar_t const * _Source, size_t _MaxCount ) throw ( ) { return wcstombs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }}
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); 
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); 
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcstombs_s_l ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], wchar_t const * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _wcstombs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }}
#line 1038 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(allocator) char *__cdecl _fullpath(char * _Buffer, const char * _Path, size_t _BufferCount); 
#line 1077 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _makepath_s(char * _Buffer, size_t _BufferCount, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _makepath_s ( char ( & _Buffer ) [ _Size ], char const * _Drive, char const * _Dir, char const * _Filename, char const * _Ext ) throw ( ) { return _makepath_s ( _Buffer, _Size, _Drive, _Dir, _Filename, _Ext ); }}
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
void __cdecl _makepath(char * _Buffer, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); 
#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveCount, char * _Dir, size_t _DirCount, char * _Filename, size_t _FilenameCount, char * _Ext, size_t _ExtCount); 
#line 1126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _splitpath_s ( char const * _Dest, char ( & _Drive ) [ _DriveSize ], char ( & _Dir ) [ _DirSize ], char ( & _Name ) [ _NameSize ], char ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _splitpath_s ( _Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }}
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl getenv_s(size_t * _RequiredCount, char * _Buffer, rsize_t _BufferCount, const char * _VarName); 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int *__cdecl __p___argc(); 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char ***__cdecl __p___argv(); 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__wchar_t ***__cdecl __p___wargv(); 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char ***__cdecl __p__environ(); 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__wchar_t ***__cdecl __p__wenviron(); 
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl getenv(const char * _VarName); 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl getenv_s ( size_t * _RequiredCount, char ( & _Buffer ) [ _Size ], char const * _VarName ) throw ( ) { return getenv_s ( _RequiredCount, _Buffer, _Size, _VarName ); }}
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _dupenv_s(char ** _Buffer, size_t * _BufferCount, const char * _VarName); 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl system(const char * _Command); 
#line 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 6540)
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl _putenv(const char * _EnvString); 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); 
#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
errno_t __cdecl _searchenv_s(const char * _Filename, const char * _VarName, char * _Buffer, size_t _BufferCount); 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _searchenv_s ( char const * _Filename, char const * _VarName, char ( & _Buffer ) [ _Size ] ) throw ( ) { return _searchenv_s ( _Filename, _VarName, _Buffer, _Size ); }}
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
void __cdecl _searchenv(const char * _Filename, const char * _VarName, char * _Buffer); 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) void __cdecl 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_seterrormode(int _Mode); 
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) void __cdecl 
#line 1261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_beep(unsigned _Frequency, unsigned _Duration); 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) void __cdecl 
#line 1267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_sleep(unsigned long _Duration); 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 1293 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 1309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl gcvt(double _Value, int _DigitCount, char * _DstBuf); 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl itoa(int _Value, char * _Buffer, int _Radix); 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl ltoa(long _Value, char * _Buffer, int _Radix); 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 1338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
char *__cdecl ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 1347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
int __cdecl putenv(const char * _EnvString); 
#line 1351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
_onexit_t __cdecl onexit(_onexit_t _Func); 
#line 1359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
}__pragma(pack ( pop )) 
#line 1361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern "C" {
#line 187 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaDeviceSynchronizeDeprecationAvoidance(); 
#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2DeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 237 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2DeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 238 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2DeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 239 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2DeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 240 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2GetLastError(); 
#line 241 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2PeekAtLastError(); 
#line 242 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern const char *__stdcall __cudaCDP2GetErrorString(cudaError_t error); 
#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern const char *__stdcall __cudaCDP2GetErrorName(cudaError_t error); 
#line 244 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2GetDeviceCount(int * count); 
#line 245 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2GetDevice(int * device); 
#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2StreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 247 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2StreamDestroy(cudaStream_t stream); 
#line 248 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2StreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 249 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2StreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 250 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2EventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 251 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2EventRecord(cudaEvent_t event, cudaStream_t stream); 
#line 252 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2EventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
#line 253 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2EventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
#line 254 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2EventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
#line 255 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2EventDestroy(cudaEvent_t event); 
#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2FuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 257 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Free(void * devPtr); 
#line 258 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Malloc(void ** devPtr, size_t size); 
#line 259 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2MemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 260 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2MemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Memcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 262 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Memcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 263 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Memcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 264 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Memcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 265 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2MemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 266 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2MemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 267 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Memset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 268 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Memset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 269 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Memset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 270 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2Memset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 271 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2RuntimeGetVersion(int * runtimeVersion); 
#line 272 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern void *__stdcall __cudaCDP2GetParameterBuffer(size_t alignment, size_t size); 
#line 273 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern void *__stdcall __cudaCDP2GetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
#line 274 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2LaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 275 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2LaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2LaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 277 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2LaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
#line 278 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
#line 279 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 282 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 301 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static inline cudaGraphExec_t __stdcall cudaGetCurrentGraphExec() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}










#line 315 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
#line 336 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeSetParam(cudaGraphDeviceNode_t node, size_t offset, const void * value, size_t size); 
#line 364 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeSetEnabled(cudaGraphDeviceNode_t node, bool enable); 
#line 391 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeSetGridDim(cudaGraphDeviceNode_t node, dim3 gridDim); 
#line 420 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeUpdatesApply(const cudaGraphKernelNodeUpdate * updates, size_t updateCount); 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 438 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static inline void __stdcall cudaTriggerProgrammaticLaunchCompletion() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}






#line 448 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 454 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static inline void __stdcall cudaGridDependencySynchronize() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}






#line 464 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
#line 466 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern void __stdcall cudaGraphSetConditional(cudaGraphConditionalHandle handle, unsigned value); 
#line 469 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern unsigned __int64 __stdcall cudaCGGetIntrinsicHandle(cudaCGScope scope); 
#line 470 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaCGSynchronize(unsigned __int64 handle, unsigned flags); 
#line 471 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaCGSynchronizeGrid(unsigned __int64 handle, unsigned flags); 
#line 472 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned __int64 handle); 
#line 473 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned __int64 handle); 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 695 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static __inline void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)alignment;(void)size;::exit(___);}







#line 706 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 705 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static __inline void *__stdcall cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)func;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;::exit(___);}







#line 716 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 715 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;::exit(___);}







#line 726 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 720 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;::exit(___);}







#line 731 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 781 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;::exit(___);}







#line 792 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 786 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;::exit(___);}







#line 797 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
#line 843 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
}
#line 845 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 846 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 847 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 848 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 876 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
template< class T> static __inline ::cudaError_t __stdcall 
#line 877 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
cudaGraphKernelNodeSetParam(::cudaGraphDeviceNode_t node, ::size_t offset, const T &value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)node;(void)offset;(void)value;::exit(___);}







#line 888 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_device_runtime_api.h"
#line 283 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern "C" {
#line 323 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceReset(); 
#line 345 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 431 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); 
#line 467 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 490 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
#line 524 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 561 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 605 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
#line 632 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
#line 662 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
#line 712 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
#line 755 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
#line 799 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
#line 865 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
#line 903 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); 
#line 935 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
#line 973 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void * userData, cudaAsyncCallbackHandle_t * callback); 
#line 996 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback); 
#line 1043 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 1089 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
#line 1130 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadExit(); 
#line 1156 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSynchronize(); 
#line 1205 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); 
#line 1238 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
#line 1274 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 1321 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
#line 1386 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 1437 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 1453 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 1469 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 1498 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 1803 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceProperties_v2(cudaDeviceProp * prop, int device); 
#line 2005 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 2023 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
#line 2047 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
#line 2067 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
#line 2129 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
#line 2169 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
#line 2191 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
#line 2220 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaInitDevice(int device, unsigned deviceFlags, unsigned flags); 
#line 2266 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDevice(int device); 
#line 2288 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 2319 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); 
#line 2389 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); 
#line 2434 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); 
#line 2474 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); 
#line 2506 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 2554 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
#line 2581 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
#line 2606 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
#line 2643 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetId(cudaStream_t hStream, unsigned __int64 * streamId); 
#line 2658 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCtxResetPersistingL2Cache(); 
#line 2678 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
#line 2699 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
#line 2723 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
#line 2757 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 2788 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
#line 2796 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
#line 2863 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
#line 2887 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); 
#line 2912 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); 
#line 2996 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
#line 3035 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
#line 3076 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t * dependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, cudaStreamCaptureMode mode); 
#line 3127 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
#line 3156 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
#line 3194 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
#line 3243 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned __int64 * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, size_t * numDependencies_out = 0); 
#line 3302 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned __int64 * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, const cudaGraphEdgeData ** edgeData_out = 0, size_t * numDependencies_out = 0); 
#line 3342 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, size_t numDependencies, unsigned flags = 0); 
#line 3377 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t * dependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, unsigned flags = 0); 
#line 3414 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); 
#line 3451 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 3492 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
#line 3540 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
#line 3573 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); 
#line 3604 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); 
#line 3634 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 3679 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
#line 3860 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
#line 3915 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
#line 3975 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
#line 3999 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
#line 4153 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
#line 4236 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
#line 4312 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
#line 4335 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
#line 4402 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 4464 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchKernelExC(const cudaLaunchConfig_t * config, const void * func, void ** args); 
#line 4521 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 4622 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
#line 4667 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
#line 4700 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 4737 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
#line 4761 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetName(const char ** name, const void * func); 
#line 4783 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetParamInfo(const void * func, size_t paramIndex, size_t * paramOffset, size_t * paramSize); 
#line 4807 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); 
#line 4831 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); 
#line 4897 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
#line 4971 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
#line 5027 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
#line 5056 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
#line 5101 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 5136 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxPotentialClusterSize(int * clusterSize, const void * func, const cudaLaunchConfig_t * launchConfig); 
#line 5175 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveClusters(int * numClusters, const void * func, const cudaLaunchConfig_t * launchConfig); 
#line 5295 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
#line 5328 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 5365 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); 
#line 5408 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
#line 5460 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
#line 5498 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 5521 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeHost(void * ptr); 
#line 5544 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); 
#line 5567 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
#line 5633 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
#line 5730 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); 
#line 5753 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostUnregister(void * ptr); 
#line 5798 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
#line 5820 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); 
#line 5859 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
#line 6004 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
#line 6149 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
#line 6182 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
#line 6287 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); 
#line 6319 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
#line 6437 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
#line 6464 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
#line 6498 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); 
#line 6524 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
#line 6553 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
#line 6576 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
#line 6600 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
#line 6628 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
#line 6658 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
#line 6703 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 6738 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
#line 6787 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6837 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6887 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6934 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 6977 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
#line 7021 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
#line 7078 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7113 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
#line 7176 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7234 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7291 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7342 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7393 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7422 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); 
#line 7456 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
#line 7502 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
#line 7538 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
#line 7579 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
#line 7632 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
#line 7660 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
#line 7687 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); 
#line 7757 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
#line 7759 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPrefetchAsync_v2(const void * devPtr, size_t count, cudaMemLocation location, unsigned flags, cudaStream_t stream = 0); 
#line 7873 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
#line 7996 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemAdvise_v2(const void * devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location); 
#line 8078 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
#line 8121 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
#line 8181 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
#line 8223 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
#line 8266 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 8317 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 8367 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 8436 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocAsync(void ** devPtr, size_t size, cudaStream_t hStream); 
#line 8462 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
#line 8487 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep); 
#line 8531 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
#line 8579 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
#line 8594 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, size_t count); 
#line 8607 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
#line 8645 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
#line 8667 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolDestroy(cudaMemPool_t memPool); 
#line 8703 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocFromPoolAsync(void ** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
#line 8728 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
#line 8755 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
#line 8778 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
#line 8807 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
#line 8960 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
#line 9001 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
#line 9043 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
#line 9065 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); 
#line 9129 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
#line 9164 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
#line 9203 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 9238 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 9270 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
#line 9308 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
#line 9337 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
#line 9372 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
#line 9402 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
#line 9626 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
#line 9646 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); 
#line 9666 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
#line 9686 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
#line 9707 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
#line 9752 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
#line 9772 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
#line 9791 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
#line 9825 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); 
#line 9854 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 9901 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
#line 9999 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
#line 10032 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
#line 10058 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
#line 10078 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
#line 10101 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
#line 10125 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
#line 10176 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
#line 10235 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10304 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10372 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 10404 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
#line 10431 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
#line 10470 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10516 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10562 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 10610 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
#line 10633 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
#line 10657 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
#line 10699 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
#line 10722 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
#line 10746 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
#line 10787 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
#line 10814 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
#line 10852 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
#line 10896 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
#line 10923 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
#line 10951 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
#line 10998 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
#line 11025 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
#line 11053 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
#line 11103 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 11136 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
#line 11164 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 11214 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 11247 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
#line 11275 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 11353 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
#line 11380 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
#line 11441 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dptr); 
#line 11465 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
#line 11493 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGraphMemTrim(int device); 
#line 11530 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
#line 11564 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
#line 11592 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
#line 11620 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
#line 11651 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
#line 11682 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
#line 11713 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
#line 11747 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
#line 11787 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, cudaGraphEdgeData * edgeData, size_t * numEdges); 
#line 11818 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
#line 11855 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, cudaGraphEdgeData * edgeData, size_t * pNumDependencies); 
#line 11887 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
#line 11925 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, cudaGraphEdgeData * edgeData, size_t * pNumDependentNodes); 
#line 11956 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
#line 11988 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, const cudaGraphEdgeData * edgeData, size_t numDependencies); 
#line 12019 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
#line 12054 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, const cudaGraphEdgeData * edgeData, size_t numDependencies); 
#line 12084 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphDestroyNode(cudaGraphNode_t node); 
#line 12155 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned __int64 flags = 0); 
#line 12228 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned __int64 flags = 0); 
#line 12335 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphInstantiateWithParams(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams * instantiateParams); 
#line 12360 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned __int64 * flags); 
#line 12419 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
#line 12470 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
#line 12525 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 12588 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 12649 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 12704 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
#line 12744 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
#line 12791 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
#line 12836 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
#line 12881 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
#line 12929 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 12977 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 13017 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
#line 13051 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
#line 13143 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo * resultInfo); 
#line 13168 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
#line 13199 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
#line 13222 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
#line 13243 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphDestroy(cudaGraph_t graph); 
#line 13262 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
#line 13298 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
#line 13322 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
#line 13350 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
#line 13378 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
#line 13403 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
#line 13445 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraphNodeParams * nodeParams); 
#line 13489 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddNode_v2(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, cudaGraphNodeParams * nodeParams); 
#line 13518 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams * nodeParams); 
#line 13567 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams * nodeParams); 
#line 13593 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle * pHandle_out, cudaGraph_t graph, unsigned defaultLaunchValue = 0, unsigned flags = 0); 
#line 13671 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned __int64 flags, cudaDriverEntryPointQueryResult * driverStatus = 0); 
#line 13679 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
#line 13858 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
#line 13874 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetKernel(cudaKernel_t * kernelPtr, const void * entryFuncAddr); 
#line 14044 "D:\\Programming\\CUDA\\v12.4\\include\\cuda_runtime_api.h"
}
#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 122 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 126 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 127 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 131 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 137 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 150 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 152 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(char)) * 8); 
#line 157 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 161 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 162 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 166 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 168 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 170 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 172 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 177 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 179 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 182 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 186 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 187 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 193 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 196 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 197 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 198 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 200 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 204 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 207 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 208 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 211 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 212 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 215 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 217 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 218 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 219 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 221 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 222 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 224 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 225 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 226 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 228 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 229 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 231 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 232 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 233 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 235 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 238 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 239 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 240 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 242 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 245 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 247 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 249 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 250 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 252 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 253 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 254 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 257 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 259 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 260 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 263 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 264 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 266 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 267 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 268 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 270 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 271 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 273 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 274 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 275 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 277 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 278 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 280 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 281 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 282 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 284 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 285 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 287 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 288 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 289 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 291 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 292 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 294 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 295 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 296 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 298 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 299 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 301 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 302 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 303 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 305 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 306 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 308 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 309 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 310 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 312 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 313 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 315 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 316 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 317 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 319 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 320 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 322 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 323 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 324 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 326 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 327 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 331 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 332 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 333 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 335 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 336 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 338 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 339 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 340 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 342 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 343 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 345 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 346 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 347 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 349 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 350 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 352 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 353 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 354 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 356 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 357 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 359 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 360 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 361 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 363 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 364 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 366 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 367 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 368 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 370 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 371 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 373 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 374 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 375 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 377 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 378 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 380 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 381 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 382 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 384 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 385 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 389 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 390 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 391 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 393 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 394 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 396 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 397 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 398 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 400 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 401 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 403 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 404 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 405 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 407 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 408 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 410 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 411 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 412 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 414 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 415 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 417 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
#line 418 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 419 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
int e = (((int)sizeof(char)) * 8); 
#line 421 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
#line 422 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 424 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template< cudaChannelFormatKind > __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 425 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 426 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 427 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 430 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
#line 431 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 432 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
#line 433 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 435 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
#line 436 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 437 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
#line 438 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 440 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
#line 441 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 442 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
#line 443 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 446 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
#line 447 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 448 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
#line 449 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 451 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
#line 452 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 453 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
#line 454 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 456 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
#line 457 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 458 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
#line 459 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 462 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
#line 463 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 464 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
#line 465 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 467 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
#line 468 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 469 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
#line 470 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 472 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
#line 473 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 474 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
#line 475 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 478 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
#line 479 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 480 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
#line 481 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 483 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
#line 484 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 485 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
#line 486 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 488 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
#line 489 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 490 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
#line 491 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 494 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
#line 495 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 496 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
#line 497 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 500 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
#line 501 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 502 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
#line 503 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 506 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
#line 507 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 508 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
#line 509 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 512 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
#line 513 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 514 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
#line 515 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 518 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
#line 519 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 520 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
#line 521 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 524 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
#line 525 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 526 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
#line 527 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 530 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
#line 531 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 532 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
#line 533 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 536 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
#line 537 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 538 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
#line 539 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 542 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
#line 543 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 544 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
#line 545 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 548 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
#line 549 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 550 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
#line 551 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 554 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
#line 555 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 556 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
#line 557 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 560 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
#line 561 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 562 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
#line 563 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 566 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
#line 567 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 568 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
#line 569 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 572 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
#line 573 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 574 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
#line 575 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 578 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
#line 579 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
{ 
#line 580 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
#line 581 "D:\\Programming\\CUDA\\v12.4\\include\\channel_descriptor.h"
} 
#line 79 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
{ 
#line 81 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
cudaPitchedPtr s; 
#line 83 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(s.ptr) = d; 
#line 84 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(s.pitch) = p; 
#line 85 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(s.xsize) = xsz; 
#line 86 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(s.ysize) = ysz; 
#line 88 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
return s; 
#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
} 
#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
{ 
#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
cudaPos p; 
#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(p.x) = x; 
#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(p.y) = y; 
#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(p.z) = z; 
#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
return p; 
#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
} 
#line 132 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
{ 
#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
cudaExtent e; 
#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(e.width) = w; 
#line 137 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(e.height) = h; 
#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
(e.depth) = d; 
#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
return e; 
#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\driver_functions.h"
} 
#line 77 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline char1 make_char1(signed char x); 
#line 79 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline uchar1 make_uchar1(unsigned char x); 
#line 81 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline char2 make_char2(signed char x, signed char y); 
#line 83 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
#line 85 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline char3 make_char3(signed char x, signed char y, signed char z); 
#line 87 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
#line 91 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline short1 make_short1(short x); 
#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ushort1 make_ushort1(unsigned short x); 
#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline short2 make_short2(short x, short y); 
#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline short3 make_short3(short x, short y, short z); 
#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline short4 make_short4(short x, short y, short z, short w); 
#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline int1 make_int1(int x); 
#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline uint1 make_uint1(unsigned x); 
#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline int2 make_int2(int x, int y); 
#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline uint2 make_uint2(unsigned x, unsigned y); 
#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline int3 make_int3(int x, int y, int z); 
#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline int4 make_int4(int x, int y, int z, int w); 
#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline long1 make_long1(long x); 
#line 127 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ulong1 make_ulong1(unsigned long x); 
#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline long2 make_long2(long x, long y); 
#line 131 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline long3 make_long3(long x, long y, long z); 
#line 135 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
#line 137 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline long4 make_long4(long x, long y, long z, long w); 
#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline float1 make_float1(float x); 
#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline float2 make_float2(float x, float y); 
#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline float3 make_float3(float x, float y, float z); 
#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline float4 make_float4(float x, float y, float z, float w); 
#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline longlong1 make_longlong1(__int64 x); 
#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x); 
#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline longlong2 make_longlong2(__int64 x, __int64 y); 
#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y); 
#line 157 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z); 
#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z); 
#line 161 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w); 
#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w); 
#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline double1 make_double1(double x); 
#line 167 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline double2 make_double2(double x, double y); 
#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline double3 make_double3(double x, double y, double z); 
#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.h"
static __inline double4 make_double4(double x, double y, double z, double w); 
#line 73 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 74 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 75 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
char1 t; (t.x) = x; return t; 
#line 76 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 78 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline uchar1 make_uchar1(unsigned char x) 
#line 79 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 80 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
uchar1 t; (t.x) = x; return t; 
#line 81 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 83 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline char2 make_char2(signed char x, signed char y) 
#line 84 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 85 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 86 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 88 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 90 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 91 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 94 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline short1 make_short1(short x) 
#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
short1 t; (t.x) = x; return t; 
#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ushort1 make_ushort1(unsigned short x) 
#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ushort1 t; (t.x) = x; return t; 
#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline short2 make_short2(short x, short y) 
#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 126 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 131 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline short3 make_short3(short x, short y, short z) 
#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 135 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 146 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 150 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline int1 make_int1(int x) 
#line 154 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
int1 t; (t.x) = x; return t; 
#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 158 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline uint1 make_uint1(unsigned x) 
#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
uint1 t; (t.x) = x; return t; 
#line 161 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline int2 make_int2(int x, int y) 
#line 164 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 166 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 168 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 170 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline int3 make_int3(int x, int y, int z) 
#line 174 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 179 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 181 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 185 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 186 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 188 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 193 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline long1 make_long1(long x) 
#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 195 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
long1 t; (t.x) = x; return t; 
#line 196 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 198 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ulong1 make_ulong1(unsigned long x) 
#line 199 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 200 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ulong1 t; (t.x) = x; return t; 
#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline long2 make_long2(long x, long y) 
#line 204 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 206 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 208 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 209 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 211 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline long3 make_long3(long x, long y, long z) 
#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 215 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 218 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 219 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 220 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 221 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 223 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 224 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 225 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 226 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 228 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 229 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 230 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 231 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 233 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline float1 make_float1(float x) 
#line 234 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 235 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
float1 t; (t.x) = x; return t; 
#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 238 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline float2 make_float2(float x, float y) 
#line 239 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 240 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 241 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline float3 make_float3(float x, float y, float z) 
#line 244 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 245 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 248 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 249 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 250 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 251 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 253 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline longlong1 make_longlong1(__int64 x) 
#line 254 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 255 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
longlong1 t; (t.x) = x; return t; 
#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 258 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 259 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 260 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ulonglong1 t; (t.x) = x; return t; 
#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 263 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 264 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 265 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 266 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 268 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 269 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 270 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 271 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 273 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 274 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 275 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 278 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 279 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 280 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 281 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 283 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 284 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 285 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 286 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 288 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 289 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 290 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 291 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 293 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline double1 make_double1(double x) 
#line 294 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 295 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
double1 t; (t.x) = x; return t; 
#line 296 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 298 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline double2 make_double2(double x, double y) 
#line 299 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 300 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 301 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 303 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline double3 make_double3(double x, double y, double z) 
#line 304 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 305 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 306 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 308 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 309 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
{ 
#line 310 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 311 "D:\\Programming\\CUDA\\v12.4\\include\\vector_functions.hpp"
} 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
int *__cdecl _errno(); 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
errno_t __cdecl _set_errno(int _Value); 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
errno_t __cdecl _get_errno(int * _Value); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
unsigned long *__cdecl __doserrno(); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
}__pragma(pack ( pop )) 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\errno.h"
#pragma warning(pop)
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
[[nodiscard]] const void *__cdecl 
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
memchr(const void * _Buf, int _Val, size_t _MaxCount); 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
[[nodiscard]] int __cdecl 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
void *__cdecl memset(void * _Dst, int _Val, size_t _Size); 
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
[[nodiscard]] const char *__cdecl 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
strchr(const char * _Str, int _Val); 
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
[[nodiscard]] const char *__cdecl 
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
strrchr(const char * _Str, int _Ch); 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
[[nodiscard]] const char *__cdecl 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
strstr(const char * _Str, const char * _SubStr); 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
[[nodiscard]] const __wchar_t *__cdecl 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
wcschr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
[[nodiscard]] const __wchar_t *__cdecl 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
[[nodiscard]] const __wchar_t *__cdecl 
#line 102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
}__pragma(pack ( pop )) 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_string.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memcpy_s(void *const 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
if ((_Source == (0)) || (_DestinationSize < _SourceSize)) 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
memset(_Destination, 0, _DestinationSize); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
return 22; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
memcpy(_Destination, _Source, _SourceSize); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memmove_s(void *const 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
memmove(_Destination, _Source, _SourceSize); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
}
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memcpy_s.h"
#pragma warning(pop)
__pragma(pack ( pop )) 
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
extern "C++" inline void *__cdecl memchr(void *
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
_Pv, int 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
_C, size_t 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
_N) 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
{ 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
const void *const _Pvc = _Pv; 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
return const_cast< void *>(memchr(_Pvc, _C, _N)); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
} 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
}__pragma(pack ( pop )) 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_memory.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl wcscat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl wcscpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl wcsncat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl wcsncpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcstok_s(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(allocator) __wchar_t *__cdecl _wcsdup(const __wchar_t * _String); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcscat_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source ) throw ( ) { return wcscat_s ( _Destination, _Size, _Source ); }}
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcscat(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcscmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcscpy_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source ) throw ( ) { return wcscpy_s ( _Destination, _Size, _Source ); }}
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcscpy(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcscspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcslen(const __wchar_t * _String); 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcsnlen(const __wchar_t * _Source, size_t _MaxCount); 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
static __inline size_t __cdecl wcsnlen_s(const __wchar_t *
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
_Source, size_t 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
_MaxCount) 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
{ 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
return (_Source == (0)) ? 0 : wcsnlen(_Source, _MaxCount); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
} 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsncat_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source, size_t _Count ) throw ( ) { return wcsncat_s ( _Destination, _Size, _Source, _Count ); }}
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsncat(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcsncmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsncpy_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source, size_t _Count ) throw ( ) { return wcsncpy_s ( _Destination, _Size, _Source, _Count ); }}
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsncpy(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
const __wchar_t *__cdecl wcspbrk(const __wchar_t * _String, const __wchar_t * _Control); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcsspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcstok(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
static __inline __wchar_t *__cdecl _wcstok(__wchar_t *const 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *const 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
_Delimiter) 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
{ 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
} 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcsto" "k, define _CRT_NON_CONFORMING_WCSTOK.")) inline __wchar_t *__cdecl 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
wcstok(__wchar_t *
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
_Delimiter) throw() 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
{ 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
} 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcserror(int _ErrorNumber); 
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, int _ErrorNumber); 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], int _Error ) throw ( ) { return _wcserror_s ( _Buffer, _Size, _Error ); }}
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl __wcserror(const __wchar_t * _String); 
#line 292 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrorMessage); 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl __wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _ErrorMessage ) throw ( ) { return __wcserror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsnicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcsnset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value, size_t _MaxCount); 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsnset_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t _Value, size_t _MaxCount ) throw ( ) { return _wcsnset_s ( _Destination, _Size, _Value, _MaxCount ); }}
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsrev(__wchar_t * _String); 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcsset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value); 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsset_s ( wchar_t ( & _String ) [ _Size ], wchar_t _Value ) throw ( ) { return _wcsset_s ( _String, _Size, _Value ); }}
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcslwr_s(__wchar_t * _String, size_t _SizeInWords); 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcslwr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcslwr_s ( _String, _Size ); }}
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcslwr(__wchar_t * _String); 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcslwr_s_l(__wchar_t * _String, size_t _SizeInWords, _locale_t _Locale); 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcslwr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcslwr_s_l ( _String, _Size, _Locale ); }}
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcsupr_s(__wchar_t * _String, size_t _Size); 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsupr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcsupr_s ( _String, _Size ); }}
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsupr(__wchar_t * _String); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
errno_t __cdecl _wcsupr_s_l(__wchar_t * _String, size_t _Size, _locale_t _Locale); 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsupr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcsupr_s_l ( _String, _Size, _Locale ); }}
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl wcsxfrm(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount); 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
size_t __cdecl _wcsxfrm_l(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcscoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcscoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsncoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsncoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsnicoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl _wcsnicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
extern "C++" {
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcschr(__wchar_t *_String, __wchar_t _C) 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
{ 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcschr(static_cast< const __wchar_t *>(_String), _C)); 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
} 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_String, const __wchar_t *_Control) 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
{ 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcspbrk(static_cast< const __wchar_t *>(_String), _Control)); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
} 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_String, __wchar_t _C) 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
{ 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsrchr(static_cast< const __wchar_t *>(_String), _C)); 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
} 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsstr(__wchar_t *_String, const __wchar_t *_SubStr) 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
{ 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsstr(static_cast< const __wchar_t *>(_String), _SubStr)); 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
} 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
}
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsdup(const __wchar_t * _String); 
#line 582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsrev(__wchar_t * _String); 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcslwr(__wchar_t * _String); 
#line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
__wchar_t *__cdecl wcsupr(__wchar_t * _String); 
#line 628 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
int __cdecl wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
}__pragma(pack ( pop )) 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl strcpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl strcat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl strerror_s(char * _Buffer, size_t _SizeInBytes, int _ErrorNumber); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl strncat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl strncpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strtok_s(char * _String, const char * _Delimiter, char ** _Context); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strcat_s ( char ( & _Destination ) [ _Size ], char const * _Source ) throw ( ) { return strcat_s ( _Destination, _Size, _Source ); }}
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strcat(char * _Destination, const char * _Source); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl strcmp(const char * _Str1, const char * _Str2); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _strcmpi(const char * _String1, const char * _String2); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl strcoll(const char * _String1, const char * _String2); 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _strcoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strcpy_s ( char ( & _Destination ) [ _Size ], char const * _Source ) throw ( ) { return strcpy_s ( _Destination, _Size, _Source ); }}
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Destination, const char * _Source); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
size_t __cdecl strcspn(const char * _Str, const char * _Control); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
__declspec(allocator) char *__cdecl _strdup(const char * _Source); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strerror(const char * _ErrorMessage); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl _strerror_s(char * _Buffer, size_t _SizeInBytes, const char * _ErrorMessage); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strerror_s ( char ( & _Buffer ) [ _Size ], char const * _ErrorMessage ) throw ( ) { return _strerror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strerror(int _ErrorMessage); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strerror_s ( char ( & _Buffer ) [ _Size ], int _ErrorMessage ) throw ( ) { return strerror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _stricmp(const char * _String1, const char * _String2); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _stricoll(const char * _String1, const char * _String2); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _stricoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _stricmp_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
size_t __cdecl strlen(const char * _Str); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl _strlwr_s(char * _String, size_t _Size); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strlwr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strlwr_s ( _String, _Size ); }}
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strlwr(char * _String); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl _strlwr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strlwr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strlwr_s_l ( _String, _Size, _Locale ); }}
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strncat_s ( char ( & _Destination ) [ _Size ], char const * _Source, size_t _Count ) throw ( ) { return strncat_s ( _Destination, _Size, _Source, _Count ); }}
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strncat(char * _Destination, const char * _Source, size_t _Count); 
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _strnicmp_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _strnicoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _strnicoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _strncoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl _strncoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
size_t __cdecl __strncnt(const char * _String, size_t _Count); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strncpy_s ( char ( & _Destination ) [ _Size ], char const * _Source, size_t _Count ) throw ( ) { return strncpy_s ( _Destination, _Size, _Source, _Count ); }}
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strncpy(char * _Destination, const char * _Source, size_t _Count); 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
size_t __cdecl strnlen(const char * _String, size_t _MaxCount); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
static __inline size_t __cdecl strnlen_s(const char *
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
_String, size_t 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
_MaxCount) 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
{ 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
return (_String == (0)) ? 0 : strnlen(_String, _MaxCount); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
} 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl _strnset_s(char * _String, size_t _SizeInBytes, int _Value, size_t _MaxCount); 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strnset_s ( char ( & _Destination ) [ _Size ], int _Value, size_t _Count ) throw ( ) { return _strnset_s ( _Destination, _Size, _Value, _Count ); }}
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strnset(char * _Destination, int _Value, size_t _Count); 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
const char *__cdecl strpbrk(const char * _Str, const char * _Control); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strrev(char * _Str); 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl _strset_s(char * _Destination, size_t _DestinationSize, int _Value); 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strset_s ( char ( & _Destination ) [ _Size ], int _Value ) throw ( ) { return _strset_s ( _Destination, _Size, _Value ); }}
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Destination, int _Value); 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
size_t __cdecl strspn(const char * _Str, const char * _Control); 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strtok(char * _String, const char * _Delimiter); 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl _strupr_s(char * _String, size_t _Size); 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strupr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strupr_s ( _String, _Size ); }}
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strupr(char * _String); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
errno_t __cdecl _strupr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strupr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strupr_s_l ( _String, _Size, _Locale ); }}
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl _strupr_l(char * _String, _locale_t _Locale); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
size_t __cdecl strxfrm(char * _Destination, const char * _Source, size_t _MaxCount); 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
size_t __cdecl _strxfrm_l(char * _Destination, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
extern "C++" {
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
inline char *__cdecl strchr(char *const _String, const int _Ch) 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
{ 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
return const_cast< char *>(strchr(static_cast< const char *>(_String), _Ch)); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
} 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
inline char *__cdecl strpbrk(char *const _String, const char *const _Control) 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
{ 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
return const_cast< char *>(strpbrk(static_cast< const char *>(_String), _Control)); 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
} 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
inline char *__cdecl strrchr(char *const _String, const int _Ch) 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
{ 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
return const_cast< char *>(strrchr(static_cast< const char *>(_String), _Ch)); 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
} 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
inline char *__cdecl strstr(char *const _String, const char *const _SubString) 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
{ 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
return const_cast< char *>(strstr(static_cast< const char *>(_String), _SubString)); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
} 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
}
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strdup(const char * _String); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl strcmpi(const char * _String1, const char * _String2); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl stricmp(const char * _String1, const char * _String2); 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strlwr(char * _String); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
int __cdecl strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strnset(char * _String, int _Value, size_t _MaxCount); 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strrev(char * _String); 
#line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strset(char * _String, int _Value); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
char *__cdecl strupr(char * _String); 
#line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
}__pragma(pack ( pop )) 
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\string.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
struct tm { 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_sec; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_min; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_hour; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_mday; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_mon; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_year; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_wday; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_yday; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
int tm_isdst; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
}; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wasctime(const tm * _Tm); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wasctime_s(__wchar_t * _Buffer, size_t _SizeInWords, const tm * _Tm); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wasctime_s ( wchar_t ( & _Buffer ) [ _Size ], struct tm const * _Time ) throw ( ) { return _wasctime_s ( _Buffer, _Size, _Time ); }}
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
size_t __cdecl wcsftime(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
size_t __cdecl _wcsftime_l(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wctime32(const __time32_t * _Time); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wctime32_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time32_t * _Time); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wctime32_s ( wchar_t ( & _Buffer ) [ _Size ], __time32_t const * _Time ) throw ( ) { return _wctime32_s ( _Buffer, _Size, _Time ); }}
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wctime64(const __time64_t * _Time); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wctime64_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time64_t * _Time); 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wctime64_s ( wchar_t ( & _Buffer ) [ _Size ], __time64_t const * _Time ) throw ( ) { return _wctime64_s ( _Buffer, _Size, _Time ); }}
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wstrdate_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wstrdate_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrdate_s ( _Buffer, _Size ); }}
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
errno_t __cdecl _wstrtime_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wstrtime_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrtime_s ( _Buffer, _Size ); }}
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
__wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
static __inline __wchar_t *__cdecl _wctime(const time_t *const 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
{ 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
return _wctime64(_Time); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
} 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
static __inline errno_t __cdecl _wctime_s(__wchar_t *const 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
_Buffer, const size_t 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
_SizeInWords, const time_t *const 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
{ 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
} 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
}__pragma(pack ( pop )) 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wtime.h"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
typedef long clock_t; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
struct _timespec32 { 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__time32_t tv_sec; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
long tv_nsec; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
}; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
struct _timespec64 { 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__time64_t tv_sec; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
long tv_nsec; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
}; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
struct timespec { 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
time_t tv_sec; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
long tv_nsec; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
}; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
int *__cdecl __daylight(); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
long *__cdecl __dstbias(); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
long *__cdecl __timezone(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
char **__cdecl __tzname(); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _get_daylight(int * _Daylight); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _get_dstbias(long * _DaylightSavingsBias); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _get_timezone(long * _TimeZone); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
char *__cdecl asctime(const tm * _Tm); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl asctime_s(char * _Buffer, size_t _SizeInBytes, const tm * _Tm); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl asctime_s ( char ( & _Buffer ) [ _Size ], struct tm const * _Time ) throw ( ) { return asctime_s ( _Buffer, _Size, _Time ); }}
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
clock_t __cdecl clock(); 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
char *__cdecl _ctime32(const __time32_t * _Time); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _ctime32_s(char * _Buffer, size_t _SizeInBytes, const __time32_t * _Time); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ctime32_s ( char ( & _Buffer ) [ _Size ], __time32_t const * _Time ) throw ( ) { return _ctime32_s ( _Buffer, _Size, _Time ); }}
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
char *__cdecl _ctime64(const __time64_t * _Time); 
#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _ctime64_s(char * _Buffer, size_t _SizeInBytes, const __time64_t * _Time); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ctime64_s ( char ( & _Buffer ) [ _Size ], __time64_t const * _Time ) throw ( ) { return _ctime64_s ( _Buffer, _Size, _Time ); }}
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
tm *__cdecl _gmtime32(const __time32_t * _Time); 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
tm *__cdecl _gmtime64(const __time64_t * _Time); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
tm *__cdecl _localtime32(const __time32_t * _Time); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
tm *__cdecl _localtime64(const __time64_t * _Time); 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__time32_t __cdecl _mkgmtime32(tm * _Tm); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__time64_t __cdecl _mkgmtime64(tm * _Tm); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__time32_t __cdecl _mktime32(tm * _Tm); 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__time64_t __cdecl _mktime64(tm * _Tm); 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
size_t __cdecl strftime(char * _Buffer, size_t _SizeInBytes, const char * _Format, const tm * _Tm); 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
size_t __cdecl _strftime_l(char * _Buffer, size_t _MaxSize, const char * _Format, const tm * _Tm, _locale_t _Locale); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _strdate_s(char * _Buffer, size_t _SizeInBytes); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strdate_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strdate_s ( _Buffer, _Size ); }}
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
char *__cdecl _strdate(char * _Buffer); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
errno_t __cdecl _strtime_s(char * _Buffer, size_t _SizeInBytes); 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strtime_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strtime_s ( _Buffer, _Size ); }}
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
char *__cdecl _strtime(char * _Buffer); 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__time32_t __cdecl _time32(__time32_t * _Time); 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__time64_t __cdecl _time64(__time64_t * _Time); 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
int __cdecl _timespec32_get(_timespec32 * _Ts, int _Base); 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
int __cdecl _timespec64_get(_timespec64 * _Ts, int _Base); 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
void __cdecl _tzset(); 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) unsigned __cdecl 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_getsystime(tm * _Tm); 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) unsigned __cdecl 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_setsystime(tm * _Tm, unsigned _Milliseconds); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline char *__cdecl ctime(const time_t *const 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time) 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _ctime64(_Time); 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline double __cdecl difftime(const time_t 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time1, const time_t 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time2) 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _difftime64(_Time1, _Time2); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline tm *__cdecl gmtime(const time_t *const 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time) 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _gmtime64(_Time); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline tm *__cdecl localtime(const time_t *const 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time) 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _localtime64(_Time); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline time_t __cdecl _mkgmtime(tm *const 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Tm) 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _mkgmtime64(_Tm); 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline time_t __cdecl mktime(tm *const 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Tm) 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _mktime64(_Tm); 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline time_t __cdecl time(time_t *const 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time) 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _time64(_Time); 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline int __cdecl timespec_get(timespec *const 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Ts, const int 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Base) 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _timespec64_get((_timespec64 *)_Ts, _Base); 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline errno_t __cdecl ctime_s(char *const 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Buffer, const size_t 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_SizeInBytes, const time_t *const 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time) 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline errno_t __cdecl gmtime_s(tm *const 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time) 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _gmtime64_s(_Tm, _Time); 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
static __inline errno_t __cdecl localtime_s(tm *const 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
_Time) 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
{ 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
return _localtime64_s(_Tm, _Time); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
} 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
void __cdecl tzset(); 
#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
}__pragma(pack ( pop )) 
#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\time.h"
#pragma warning(pop)
#line 88 "D:\\Programming\\CUDA\\v12.4\\include\\crt/common_functions.h"
extern "C" {
#line 91 "D:\\Programming\\CUDA\\v12.4\\include\\crt/common_functions.h"
extern clock_t __cdecl clock(); 
#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\crt/common_functions.h"
extern void *__cdecl memset(void *, int, size_t); 
#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\crt/common_functions.h"
extern void *__cdecl memcpy(void *, const void *, size_t); 
#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\crt/common_functions.h"
}
#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern "C" {
#line 222 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __cdecl abs(int a); 
#line 230 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern long __cdecl labs(long a); 
#line 238 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern __int64 llabs(__int64 a); 
#line 288 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl fabs(double x); 
#line 331 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern __inline float fabsf(float x); 
#line 341 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline int min(const int a, const int b); 
#line 348 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline unsigned umin(const unsigned a, const unsigned b); 
#line 355 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline __int64 llmin(const __int64 a, const __int64 b); 
#line 362 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline unsigned __int64 ullmin(const unsigned __int64 a, const unsigned __int64 b); 
#line 385 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl fminf(float x, float y); 
#line 405 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl fmin(double x, double y); 
#line 416 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline int max(const int a, const int b); 
#line 424 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline unsigned umax(const unsigned a, const unsigned b); 
#line 431 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline __int64 llmax(const __int64 a, const __int64 b); 
#line 438 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline unsigned __int64 ullmax(const unsigned __int64 a, const unsigned __int64 b); 
#line 461 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl fmaxf(float x, float y); 
#line 481 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl fmax(double, double); 
#line 523 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl sin(double x); 
#line 556 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl cos(double x); 
#line 575 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern void sincos(double x, double * sptr, double * cptr); 
#line 591 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr); 
#line 636 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl tan(double x); 
#line 705 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl sqrt(double x); 
#line 777 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double rsqrt(double x); 
#line 847 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float rsqrtf(float x); 
#line 905 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl log2(double x); 
#line 970 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl exp2(double x); 
#line 1035 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl exp2f(float x); 
#line 1100 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double exp10(double x); 
#line 1163 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float exp10f(float x); 
#line 1258 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl expm1(double x); 
#line 1350 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl expm1f(float x); 
#line 1406 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl log2f(float x); 
#line 1458 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl log10(double x); 
#line 1528 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl log(double x); 
#line 1626 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl log1p(double x); 
#line 1725 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl log1pf(float x); 
#line 1787 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl floor(double x); 
#line 1866 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl exp(double x); 
#line 1907 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl cosh(double x); 
#line 1957 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl sinh(double x); 
#line 2007 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl tanh(double x); 
#line 2064 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl acosh(double x); 
#line 2122 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl acoshf(float x); 
#line 2175 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl asinh(double x); 
#line 2228 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl asinhf(float x); 
#line 2282 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl atanh(double x); 
#line 2336 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl atanhf(float x); 
#line 2383 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl ldexp(double x, int exp); 
#line 2429 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern __inline float ldexpf(float x, int exp); 
#line 2483 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl logb(double x); 
#line 2538 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl logbf(float x); 
#line 2578 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __cdecl ilogb(double x); 
#line 2618 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __cdecl ilogbf(float x); 
#line 2694 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl scalbn(double x, int n); 
#line 2770 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl scalbnf(float x, int n); 
#line 2846 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl scalbln(double x, long n); 
#line 2922 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl scalblnf(float x, long n); 
#line 2997 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl frexp(double x, int * nptr); 
#line 3071 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern __inline float frexpf(float x, int * nptr); 
#line 3125 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl round(double x); 
#line 3180 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl roundf(float x); 
#line 3198 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern long __cdecl lround(double x); 
#line 3216 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern long __cdecl lroundf(float x); 
#line 3234 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern __int64 __cdecl llround(double x); 
#line 3252 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern __int64 __cdecl llroundf(float x); 
#line 3380 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl rintf(float x); 
#line 3397 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern long __cdecl lrint(double x); 
#line 3414 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern long __cdecl lrintf(float x); 
#line 3431 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern __int64 __cdecl llrint(double x); 
#line 3448 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern __int64 __cdecl llrintf(float x); 
#line 3501 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl nearbyint(double x); 
#line 3554 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl nearbyintf(float x); 
#line 3614 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl ceil(double x); 
#line 3666 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl trunc(double x); 
#line 3719 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl truncf(float x); 
#line 3745 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl fdim(double x, double y); 
#line 3771 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl fdimf(float x, float y); 
#line 4069 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl atan2(double y, double x); 
#line 4140 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl atan(double x); 
#line 4163 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl acos(double x); 
#line 4214 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl asin(double x); 
#line 4279 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl hypot(double x, double y); 
#line 4403 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline float __cdecl hypotf(float x, float y); 
#line 5193 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl cbrt(double x); 
#line 5279 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl cbrtf(float x); 
#line 5332 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double rcbrt(double x); 
#line 5382 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float rcbrtf(float x); 
#line 5442 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double sinpi(double x); 
#line 5502 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float sinpif(float x); 
#line 5554 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double cospi(double x); 
#line 5606 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float cospif(float x); 
#line 5636 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
#line 5666 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
#line 5999 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl pow(double x, double y); 
#line 6055 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl modf(double x, double * iptr); 
#line 6114 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl fmod(double x, double y); 
#line 6212 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl remainder(double x, double y); 
#line 6311 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl remainderf(float x, float y); 
#line 6383 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl remquo(double x, double y, int * quo); 
#line 6455 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl remquof(float x, float y, int * quo); 
#line 6494 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl j0(double x); 
#line 6536 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float j0f(float x); 
#line 6605 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl j1(double x); 
#line 6674 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float j1f(float x); 
#line 6717 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl jn(int n, double x); 
#line 6760 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float jnf(int n, float x); 
#line 6821 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl y0(double x); 
#line 6882 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float y0f(float x); 
#line 6943 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl y1(double x); 
#line 7004 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float y1f(float x); 
#line 7067 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl yn(int n, double x); 
#line 7130 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float ynf(int n, float x); 
#line 7321 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl erf(double x); 
#line 7403 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl erff(float x); 
#line 7473 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double erfinv(double x); 
#line 7538 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float erfinvf(float x); 
#line 7579 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl erfc(double x); 
#line 7617 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl erfcf(float x); 
#line 7734 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl lgamma(double x); 
#line 7794 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double erfcinv(double x); 
#line 7849 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float erfcinvf(float x); 
#line 7917 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double normcdfinv(double x); 
#line 7985 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float normcdfinvf(float x); 
#line 8028 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double normcdf(double x); 
#line 8071 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float normcdff(float x); 
#line 8135 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double erfcx(double x); 
#line 8199 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float erfcxf(float x); 
#line 8320 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl lgammaf(float x); 
#line 8418 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl tgamma(double x); 
#line 8516 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl tgammaf(float x); 
#line 8529 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl copysign(double x, double y); 
#line 8542 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl copysignf(float x, float y); 
#line 8561 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl nextafter(double x, double y); 
#line 8580 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl nextafterf(float x, float y); 
#line 8596 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl nan(const char * tagp); 
#line 8612 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl nanf(const char * tagp); 
#line 8617 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __isinff(float); 
#line 8618 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __isnanf(float); 
#line 8628 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __finite(double); 
#line 8629 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __finitef(float); 
#line 8630 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __signbit(double); 
#line 8631 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __isnan(double); 
#line 8632 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __isinf(double); 
#line 8635 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __signbitf(float); 
#line 8796 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern double __cdecl fma(double x, double y, double z); 
#line 8954 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl fmaf(float x, float y, float z); 
#line 8963 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __signbitl(long double); 
#line 8969 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __finitel(long double); 
#line 8970 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __isinfl(long double); 
#line 8971 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern int __isnanl(long double); 
#line 8975 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl acosf(float); 
#line 8976 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl asinf(float); 
#line 8977 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl atanf(float); 
#line 8978 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl atan2f(float, float); 
#line 8979 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl cosf(float); 
#line 8980 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl sinf(float); 
#line 8981 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl tanf(float); 
#line 8982 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl coshf(float); 
#line 8983 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl sinhf(float); 
#line 8984 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl tanhf(float); 
#line 8985 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl expf(float); 
#line 8986 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl logf(float); 
#line 8987 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl log10f(float); 
#line 8988 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl modff(float, float *); 
#line 8989 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl powf(float, float); 
#line 8990 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl sqrtf(float); 
#line 8991 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl ceilf(float); 
#line 8992 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl floorf(float); 
#line 8993 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl fmodf(float, float); 
#line 10547 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
}
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
struct _exception { 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int type; 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
char *name; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double arg1; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double arg2; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double retval; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
struct _complex { 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double x, y; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef float float_t; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef double double_t; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const double _HUGE; 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
void __cdecl _fperrraise(int _Except); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _dclass(double _X); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _ldclass(long double _X); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _fdclass(float _X); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _dsign(double _X); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _ldsign(long double _X); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _fdsign(float _X); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _dpcomp(double _X, double _Y); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _ldpcomp(long double _X, long double _Y); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _fdpcomp(float _X, float _Y); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _dtest(double * _Px); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _ldtest(long double * _Px); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _fdtest(float * _Px); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _d_int(double * _Px, short _Xexp); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _ld_int(long double * _Px, short _Xexp); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _fd_int(float * _Px, short _Xexp); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _dscale(double * _Px, long _Lexp); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _ldscale(long double * _Px, long _Lexp); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _fdscale(float * _Px, long _Lexp); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _dunscale(short * _Pex, double * _Px); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _ldunscale(short * _Pex, long double * _Px); 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _fdunscale(short * _Pex, float * _Px); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _dexp(double * _Px, double _Y, long _Eoff); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _dnorm(unsigned short * _Ps); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
short __cdecl _fdnorm(unsigned short * _Ps); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _dpoly(double _X, const double * _Tab, int _N); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl _fdpoly(float _X, const float * _Tab, int _N); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _dlog(double _X, int _Baseflag); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl _ldlog(long double _X, int _Baseflag); 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl _fdlog(float _X, int _Baseflag); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _dsin(double _X, unsigned _Qoff); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl _ldsin(long double _X, unsigned _Qoff); 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl _fdsin(float _X, unsigned _Qoff); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
union { 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
unsigned short _Sh[4]; 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double _Val; 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} _double_val; 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
union { 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
unsigned short _Sh[2]; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float _Val; 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} _float_val; 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
union { 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
unsigned short _Sh[4]; 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double _Val; 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} _ldouble_val; 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
union { 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
unsigned short _Word[4]; 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float _Float; 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double _Double; 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double _Long_double; 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} _float_const; 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const _float_const _Eps_C, _Rteps_C; 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const _float_const _FEps_C, _FRteps_C; 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const _float_const _LEps_C, _LRteps_C; 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const double _Zero_C, _Xbig_C; 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const float _FZero_C, _FXbig_C; 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern const long double _LZero_C, _LXbig_C; 
#line 292 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern "C++" {
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline int fpclassify(float _X) throw() 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _fdtest(&_X); 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline int fpclassify(double _X) throw() 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _dtest(&_X); 
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline int fpclassify(long double _X) throw() 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _ldtest(&_X); 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline bool signbit(float _X) throw() 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _fdsign(_X) != 0; 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline bool signbit(double _X) throw() 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _dsign(_X) != 0; 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline bool signbit(long double _X) throw() 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _ldsign(_X) != 0; 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline int _fpcomp(float _X, float _Y) throw() 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _fdpcomp(_X, _Y); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline int _fpcomp(double _X, double _Y) throw() 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _dpcomp(_X, _Y); 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
inline int _fpcomp(long double _X, long double _Y) throw() 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _ldpcomp(_X, _Y); 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template< class _Trc, class _Tre> struct _Combined_type { 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef float _Type; 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template<> struct _Combined_type< float, double>  { 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template<> struct _Combined_type< float, long double>  { 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef long double _Type; 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template< class _Ty, class _T2> struct _Real_widened { 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef long double _Type; 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template<> struct _Real_widened< float, float>  { 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef float _Type; 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template<> struct _Real_widened< float, double>  { 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template<> struct _Real_widened< double, float>  { 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template<> struct _Real_widened< double, double>  { 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template< class _Ty> struct _Real_type { 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef double _Type; 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template<> struct _Real_type< float>  { 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef float _Type; 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template<> struct _Real_type< long double>  { 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
typedef long double _Type; 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}; 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _T1, class _T2 >
      inline int _fpcomp ( _T1 _X, _T2 _Y ) throw ( )
    {
        typedef typename _Combined_type < float,
            typename _Real_widened <
            typename _Real_type < _T1 > :: _Type,
            typename _Real_type < _T2 > :: _Type > :: _Type > :: _Type _Tw;
        return _fpcomp ( ( _Tw ) _X, ( _Tw ) _Y );
    }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty >
      inline bool isfinite ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) <= 0;
    }
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty >
      inline bool isinf ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == 1;
    }
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty >
      inline bool isnan ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == 2;
    }
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty >
      inline bool isnormal ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == ( - 1 );
    }
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool isgreater ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & 4 ) != 0;
    }
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool isgreaterequal ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 2 | 4 ) ) != 0;
    }
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool isless ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & 1 ) != 0;
    }
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool islessequal ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 1 | 2 ) ) != 0;
    }
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool islessgreater ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 1 | 4 ) ) != 0;
    }
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
template < class _Ty1, class _Ty2 >
      inline bool isunordered ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return _fpcomp ( _X, _Y ) == 0;
    }
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl abs(int _X); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long __cdecl labs(long _X); 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llabs(__int64 _X); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl acos(double _X); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl asin(double _X); 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl atan(double _X); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl atan2(double _Y, double _X); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl cos(double _X); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl cosh(double _X); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl exp(double _X); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl fabs(double _X); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl fmod(double _X, double _Y); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl log(double _X); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl log10(double _X); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl pow(double _X, double _Y); 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl sin(double _X); 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl sinh(double _X); 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl sqrt(double _X); 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl tan(double _X); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl tanh(double _X); 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl acosh(double _X); 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl asinh(double _X); 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl atanh(double _X); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl atof(const char * _String); 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _cabs(_complex _Complex_value); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl cbrt(double _X); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl ceil(double _X); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _chgsign(double _X); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl copysign(double _Number, double _Sign); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _copysign(double _Number, double _Sign); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl erf(double _X); 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl erfc(double _X); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl exp2(double _X); 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl expm1(double _X); 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl fdim(double _X, double _Y); 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl floor(double _X); 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl fma(double _X, double _Y, double _Z); 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl fmax(double _X, double _Y); 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl fmin(double _X, double _Y); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl frexp(double _X, int * _Y); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl hypot(double _X, double _Y); 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _hypot(double _X, double _Y); 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl ilogb(double _X); 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl ldexp(double _X, int _Y); 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl lgamma(double _X); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llrint(double _X); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llround(double _X); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl log1p(double _X); 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl log2(double _X); 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl logb(double _X); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long __cdecl lrint(double _X); 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long __cdecl lround(double _X); 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _matherr(_exception * _Except); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl modf(double _X, double * _Y); 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl nan(const char * _X); 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl nearbyint(double _X); 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl nextafter(double _X, double _Y); 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl nexttoward(double _X, long double _Y); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl remainder(double _X, double _Y); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl remquo(double _X, double _Y, int * _Z); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl rint(double _X); 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl round(double _X); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl scalbln(double _X, long _Y); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl scalbn(double _X, int _Y); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl tgamma(double _X); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl trunc(double _X); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _j0(double _X); 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _j1(double _X); 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _jn(int _X, double _Y); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _y0(double _X); 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _y1(double _X); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl _yn(int _X, double _Y); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl acoshf(float _X); 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl asinhf(float _X); 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl atanhf(float _X); 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl cbrtf(float _X); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl _chgsignf(float _X); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl copysignf(float _Number, float _Sign); 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl _copysignf(float _Number, float _Sign); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl erff(float _X); 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl erfcf(float _X); 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl expm1f(float _X); 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl exp2f(float _X); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl fdimf(float _X, float _Y); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl fmaf(float _X, float _Y, float _Z); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl fmaxf(float _X, float _Y); 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl fminf(float _X, float _Y); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl _hypotf(float _X, float _Y); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl ilogbf(float _X); 
#line 566 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl lgammaf(float _X); 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llrintf(float _X); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llroundf(float _X); 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl log1pf(float _X); 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl log2f(float _X); 
#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl logbf(float _X); 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long __cdecl lrintf(float _X); 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long __cdecl lroundf(float _X); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl nanf(const char * _X); 
#line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl nearbyintf(float _X); 
#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl nextafterf(float _X, float _Y); 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl nexttowardf(float _X, long double _Y); 
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl remainderf(float _X, float _Y); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl remquof(float _X, float _Y, int * _Z); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl rintf(float _X); 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl roundf(float _X); 
#line 582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl scalblnf(float _X, long _Y); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl scalbnf(float _X, int _Y); 
#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl tgammaf(float _X); 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl truncf(float _X); 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl _logbf(float _X); 
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl _nextafterf(float _X, float _Y); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _finitef(float _X); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _isnanf(float _X); 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _fpclassf(float _X); 
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _set_FMA3_enable(int _Flag); 
#line 602 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl _get_FMA3_enable(); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl acosf(float _X); 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl asinf(float _X); 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl atan2f(float _Y, float _X); 
#line 618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl atanf(float _X); 
#line 619 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl ceilf(float _X); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl cosf(float _X); 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl coshf(float _X); 
#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl expf(float _X); 
#line 674 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline float __cdecl fabsf(float _X) 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return (float)fabs(_X); 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl floorf(float _X); 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl fmodf(float _X, float _Y); 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline float __cdecl frexpf(float _X, int *_Y) 
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return (float)frexp(_X, _Y); 
#line 703 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline float __cdecl hypotf(float _X, float _Y) 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _hypotf(_X, _Y); 
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline float __cdecl ldexpf(float _X, int _Y) 
#line 711 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return (float)ldexp(_X, _Y); 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 717 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl log10f(float _X); 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl logf(float _X); 
#line 719 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl modff(float _X, float * _Y); 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl powf(float _X, float _Y); 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl sinf(float _X); 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl sinhf(float _X); 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl sqrtf(float _X); 
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl tanf(float _X); 
#line 725 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
float __cdecl tanhf(float _X); 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl acoshl(long double _X); 
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl acosl(long double _X) 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return acos((double)_X); 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl asinhl(long double _X); 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl asinl(long double _X) 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return asin((double)_X); 
#line 791 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return atan2((double)_Y, (double)_X); 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl atanhl(long double _X); 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl atanl(long double _X) 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return atan((double)_X); 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl cbrtl(long double _X); 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl ceill(long double _X) 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return ceil((double)_X); 
#line 810 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl _chgsignl(long double _X) 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _chgsign((double)_X); 
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl copysignl(long double _Number, long double _Sign); 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl _copysignl(long double _Number, long double _Sign) 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _copysign((double)_Number, (double)_Sign); 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl coshl(long double _X) 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return cosh((double)_X); 
#line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl cosl(long double _X) 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return cos((double)_X); 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl erfl(long double _X); 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl erfcl(long double _X); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl expl(long double _X) 
#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return exp((double)_X); 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl exp2l(long double _X); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl expm1l(long double _X); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl fabsl(long double _X) 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return fabs((double)_X); 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl fdiml(long double _X, long double _Y); 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl floorl(long double _X) 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return floor((double)_X); 
#line 855 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl fmal(long double _X, long double _Y, long double _Z); 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl fmaxl(long double _X, long double _Y); 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl fminl(long double _X, long double _Y); 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return fmod((double)_X, (double)_Y); 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return frexp((double)_X, _Y); 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
int __cdecl ilogbl(long double _X); 
#line 873 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _hypot((double)_X, (double)_Y); 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _hypot((double)_X, (double)_Y); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return ldexp((double)_X, _Y); 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl lgammal(long double _X); 
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llrintl(long double _X); 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__int64 __cdecl llroundl(long double _X); 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl logl(long double _X) 
#line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 894 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return log((double)_X); 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl log10l(long double _X) 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return log10((double)_X); 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl log1pl(long double _X); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl log2l(long double _X); 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl logbl(long double _X); 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long __cdecl lrintl(long double _X); 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long __cdecl lroundl(long double _X); 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double _F, _I; 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
_F = modf((double)_X, &_I); 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
(*_Y) = _I; 
#line 913 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return _F; 
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl nanl(const char * _X); 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl nearbyintl(long double _X); 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl nextafterl(long double _X, long double _Y); 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl nexttowardl(long double _X, long double _Y); 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl powl(long double _X, long double _Y) 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return pow((double)_X, (double)_Y); 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl remainderl(long double _X, long double _Y); 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl remquol(long double _X, long double _Y, int * _Z); 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl rintl(long double _X); 
#line 929 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl roundl(long double _X); 
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl scalblnl(long double _X, long _Y); 
#line 931 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl scalbnl(long double _X, int _Y); 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl sinhl(long double _X) 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return sinh((double)_X); 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl sinl(long double _X) 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return sin((double)_X); 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl sqrtl(long double _X) 
#line 944 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return sqrt((double)_X); 
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl tanhl(long double _X) 
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return tanh((double)_X); 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
__inline long double __cdecl tanl(long double _X) 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
{ 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
return tan((double)_X); 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
} 
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl tgammal(long double _X); 
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
long double __cdecl truncl(long double _X); 
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
extern double HUGE; 
#line 985 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl j0(double _X); 
#line 986 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl j1(double _X); 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl jn(int _X, double _Y); 
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl y0(double _X); 
#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl y1(double _X); 
#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
double __cdecl yn(int _X, double _Y); 
#line 995 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
}__pragma(pack ( pop )) 
#line 997 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_math.h"
#pragma warning(pop)
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#pragma warning(disable: 4985)
#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
extern "C++" {
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
#pragma pack ( push, 8 )
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
namespace std { 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
struct nothrow_t { 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
explicit nothrow_t() = default;
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
}; 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
extern const nothrow_t nothrow; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
}
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
operator new(size_t _Size); 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
operator new(size_t _Size, const std::nothrow_t &) noexcept; 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
operator new[](size_t _Size); 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
operator new[](size_t _Size, const std::nothrow_t &) noexcept; 
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block) noexcept; 
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block, const std::nothrow_t &) noexcept; 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block) noexcept; 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block, const std::nothrow_t &) noexcept; 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
void __cdecl operator delete(void * _Block, size_t _Size) noexcept; 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
void __cdecl operator delete[](void * _Block, size_t _Size) noexcept; 
#line 160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
#pragma warning(push)
#pragma warning(disable: 4577)
#pragma warning(disable: 4514)
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
[[nodiscard]] [[msvc::constexpr]] inline void *__cdecl 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
operator new(size_t _Size, void *
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
_Where) noexcept 
#line 168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
{ 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
(void)_Size; 
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
return _Where; 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
} 
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
inline void __cdecl operator delete(void *, void *) noexcept 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
{ 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
} 
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
[[nodiscard]] inline void *__cdecl 
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
operator new[](size_t _Size, void *
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
_Where) noexcept 
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
{ 
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
(void)_Size; 
#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
return _Where; 
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
} 
#line 189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
inline void __cdecl operator delete[](void *, void *) noexcept 
#line 190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
{ 
#line 191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
} 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
}
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
#pragma warning(pop)
#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
#pragma pack ( pop )
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new.h"
#pragma warning(pop)
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
extern "C++" {
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
#pragma pack ( push, 8 )
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
[[nodiscard]] 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
__declspec(allocator) void *__cdecl operator new(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
[[nodiscard]] 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
__declspec(allocator) void *__cdecl operator new[](size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
void __cdecl operator delete(void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) noexcept; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
void __cdecl operator delete[](void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) noexcept; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
}
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
#pragma pack ( pop )
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_new_debug.h"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
typedef void *_HFILE; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, __wchar_t *, int *); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t); 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
struct _CrtMemBlockHeader; 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
typedef 
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
struct _CrtMemState { 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
_CrtMemBlockHeader *pBlockHeader; 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
size_t lCounts[5]; 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
size_t lSizes[5]; 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
size_t lHighWaterCount; 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
size_t lTotalCount; 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
} _CrtMemState; 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
}__pragma(pack ( pop )) 
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\crtdbg.h"
#pragma warning(pop)
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1900")
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MT_StaticRelease")
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\use_ansi.h"
#pragma comment(lib, "libcpmt")
#line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
namespace std { 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
enum _Uninitialized { 
#line 336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
_Noinit
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
}; 
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
class _Lockit { 
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
public: __thiscall _Lockit() noexcept; 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
explicit __thiscall _Lockit(int) noexcept; 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
__thiscall ~_Lockit() noexcept; 
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int) noexcept; 
#line 361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
static void __cdecl _Lockit_dtor(int) noexcept; 
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
private: static void __cdecl _Lockit_ctor(_Lockit *) noexcept; 
#line 365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
static void __cdecl _Lockit_ctor(_Lockit *, int) noexcept; 
#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
static void __cdecl _Lockit_dtor(_Lockit *) noexcept; 
#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
public: _Lockit(const _Lockit &) = delete;
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
_Lockit &operator=(const _Lockit &) = delete;
#line 373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
private: int _Locktype; 
#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
}; 
#line 480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
}
#line 484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\yvals.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
[[nodiscard]] inline double abs(double _Xx) noexcept { 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
return ::fabs(_Xx); 
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
} 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
[[nodiscard]] inline float abs(float _Xx) noexcept { 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
return ::fabsf(_Xx); 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
} 
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
[[nodiscard]] inline long double abs(long double _Xx) noexcept { 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
return ::fabsl(_Xx); 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
} 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
namespace std { 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::size_t;
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::div_t;
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::ldiv_t;
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::abort;
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::abs;
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::atexit;
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::atof;
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::atoi;
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::atol;
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::bsearch;
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::calloc;
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::div;
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::exit;
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::free;
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::labs;
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::ldiv;
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::malloc;
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::mblen;
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::mbstowcs;
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::mbtowc;
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::qsort;
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::rand;
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::realloc;
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::srand;
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::strtod;
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::strtol;
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::strtoul;
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::wcstombs;
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::wctomb;
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::lldiv_t;
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::getenv;
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::system;
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::atoll;
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::llabs;
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::lldiv;
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::strtof;
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::strtold;
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::strtoll;
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::strtoull;
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::_Exit;
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::at_quick_exit;
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
using ::quick_exit;
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
}
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdlib"
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
namespace std { 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template < class _Ty, _Ty _Val >
struct integral_constant {
    static constexpr _Ty value = _Val;

    using value_type = _Ty;
    using type = integral_constant;

    constexpr operator value_type ( ) const noexcept {
        return value;
    }

    [ [ nodiscard ] ] constexpr value_type operator ( ) ( ) const noexcept {
        return value;
    }
};
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< bool _Val> using bool_constant = integral_constant< bool, _Val> ; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using true_type = bool_constant< true> ; 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using false_type = bool_constant< false> ; 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< bool _Test, class _Ty = void> 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct enable_if { }; 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct enable_if< true, _Ty>  { 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< bool _Test, class _Ty = void> using enable_if_t = typename enable_if< _Test, _Ty> ::type; 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< bool _Test, class _Ty1, class _Ty2> 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct conditional { 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty1; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty1, class _Ty2> 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct conditional< false, _Ty1, _Ty2>  { 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty2; 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< bool _Test, class _Ty1, class _Ty2> using conditional_t = typename conditional< _Test, _Ty1, _Ty2> ::type; 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class , class > constexpr bool 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
is_same_v = false; 
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
is_same_v< _Ty, _Ty>  = true; 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty1, class _Ty2> 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct is_same : public bool_constant< is_same_v< _Ty1, _Ty2> >  { }; 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_const { 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_const< const _Ty>  { 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> using remove_const_t = typename remove_const< _Ty> ::type; 
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_volatile { 
#line 102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_volatile< volatile _Ty>  { 
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> using remove_volatile_t = typename remove_volatile< _Ty> ::type; 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_cv { 
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< template< class >  class _Fn> using _Apply = _Fn< _Ty> ; 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_cv< const _Ty>  { 
#line 123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< template< class >  class _Fn> using _Apply = const _Fn< _Ty> ; 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_cv< volatile _Ty>  { 
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< template< class >  class _Fn> using _Apply = volatile _Fn< _Ty> ; 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_cv< const volatile _Ty>  { 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< template< class >  class _Fn> using _Apply = const volatile _Fn< _Ty> ; 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> using remove_cv_t = typename remove_cv< _Ty> ::type; 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< bool _First_value, class _First, class ..._Rest> 
#line 149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct _Disjunction { 
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _First; 
#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _False, class _Next, class ..._Rest> 
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct _Disjunction< false, _False, _Next, _Rest...>  { 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = typename std::_Disjunction< _Next::value, _Next, _Rest...> ::type; 
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class ..._Traits> 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct disjunction : public false_type { }; 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _First, class ..._Rest> 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct disjunction< _First, _Rest...>  : public _Disjunction< _First::value, _First, _Rest...> ::type { 
#line 164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class ..._Traits> constexpr bool 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
disjunction_v = (disjunction< _Traits...> ::value); 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty, class ..._Types> constexpr bool 
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
_Is_any_of_v = disjunction_v< is_same< _Ty, _Types> ...> ; 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
[[nodiscard]] constexpr bool _Is_constant_evaluated() noexcept { 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
return __builtin_is_constant_evaluated(); 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
} 
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
is_integral_v = _Is_any_of_v< remove_cv_t< _Ty> , bool, char, signed char, unsigned char, __wchar_t, char16_t, char32_t, short, unsigned short, int, unsigned, long, unsigned long, __int64, unsigned __int64> ; 
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct is_integral : public bool_constant< is_integral_v< _Ty> >  { }; 
#line 198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
is_floating_point_v = _Is_any_of_v< remove_cv_t< _Ty> , float, double, long double> ; 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct is_floating_point : public bool_constant< is_floating_point_v< _Ty> >  { }; 
#line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
is_arithmetic_v = is_integral_v< _Ty>  || is_floating_point_v< _Ty> ; 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct is_arithmetic : public bool_constant< is_arithmetic_v< _Ty> >  { }; 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_reference { 
#line 213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using _Const_thru_ref_type = const _Ty; 
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_reference< _Ty &>  { 
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using _Const_thru_ref_type = const _Ty &; 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> 
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
struct remove_reference< _Ty &&>  { 
#line 225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using type = _Ty; 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
using _Const_thru_ref_type = const _Ty &&; 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}; 
#line 229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> using remove_reference_t = typename remove_reference< _Ty> ::type; 
#line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> using _Const_thru_ref = typename remove_reference< _Ty> ::_Const_thru_ref_type; 
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
template< class _Ty> using _Remove_cvref_t = remove_cv_t< remove_reference_t< _Ty> > ; 
#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
}
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtr1common"
#pragma warning(pop)
#pragma pack ( pop )
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float acos(float _Xx) noexcept { 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::acosf(_Xx); 
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float acosh(float _Xx) noexcept { 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::acoshf(_Xx); 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float asin(float _Xx) noexcept { 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::asinf(_Xx); 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float asinh(float _Xx) noexcept { 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::asinhf(_Xx); 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float atan(float _Xx) noexcept { 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::atanf(_Xx); 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float atanh(float _Xx) noexcept { 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::atanhf(_Xx); 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float atan2(float _Yx, float _Xx) noexcept { 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::atan2f(_Yx, _Xx); 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float cbrt(float _Xx) noexcept { 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::cbrtf(_Xx); 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float ceil(float _Xx) noexcept { 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::ceilf(_Xx); 
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float copysign(float _Number, float _Sign) noexcept { 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::copysignf(_Number, _Sign); 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float cos(float _Xx) noexcept { 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::cosf(_Xx); 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float cosh(float _Xx) noexcept { 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::coshf(_Xx); 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float erf(float _Xx) noexcept { 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::erff(_Xx); 
#line 98 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float erfc(float _Xx) noexcept { 
#line 101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::erfcf(_Xx); 
#line 102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float exp(float _Xx) noexcept { 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::expf(_Xx); 
#line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float exp2(float _Xx) noexcept { 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::exp2f(_Xx); 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float expm1(float _Xx) noexcept { 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::expm1f(_Xx); 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float fabs(float _Xx) noexcept { 
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fabsf(_Xx); 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float fdim(float _Xx, float _Yx) noexcept { 
#line 121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fdimf(_Xx, _Yx); 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float floor(float _Xx) noexcept { 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::floorf(_Xx); 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float fma(float _Xx, float _Yx, float _Zx) noexcept { 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fmaf(_Xx, _Yx, _Zx); 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float fmax(float _Xx, float _Yx) noexcept { 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fmaxf(_Xx, _Yx); 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float fmin(float _Xx, float _Yx) noexcept { 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fminf(_Xx, _Yx); 
#line 144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float fmod(float _Xx, float _Yx) noexcept { 
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fmodf(_Xx, _Yx); 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
inline float frexp(float _Xx, int *_Yx) noexcept { 
#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::frexpf(_Xx, _Yx); 
#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float hypot(float _Xx, float _Yx) noexcept { 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::hypotf(_Xx, _Yx); 
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline int ilogb(float _Xx) noexcept { 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::ilogbf(_Xx); 
#line 160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float ldexp(float _Xx, int _Yx) noexcept { 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::ldexpf(_Xx, _Yx); 
#line 164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float lgamma(float _Xx) noexcept { 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::lgammaf(_Xx); 
#line 168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline __int64 llrint(float _Xx) noexcept { 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::llrintf(_Xx); 
#line 172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline __int64 llround(float _Xx) noexcept { 
#line 175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::llroundf(_Xx); 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float log(float _Xx) noexcept { 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::logf(_Xx); 
#line 180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float log10(float _Xx) noexcept { 
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::log10f(_Xx); 
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float log1p(float _Xx) noexcept { 
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::log1pf(_Xx); 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float log2(float _Xx) noexcept { 
#line 191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::log2f(_Xx); 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float logb(float _Xx) noexcept { 
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::logbf(_Xx); 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long lrint(float _Xx) noexcept { 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::lrintf(_Xx); 
#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long lround(float _Xx) noexcept { 
#line 203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::lroundf(_Xx); 
#line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
inline float modf(float _Xx, float *_Yx) noexcept { 
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::modff(_Xx, _Yx); 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float nearbyint(float _Xx) noexcept { 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::nearbyintf(_Xx); 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float nextafter(float _Xx, float _Yx) noexcept { 
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::nextafterf(_Xx, _Yx); 
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float nexttoward(float _Xx, long double _Yx) noexcept { 
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::nexttowardf(_Xx, _Yx); 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float pow(float _Xx, float _Yx) noexcept { 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::powf(_Xx, _Yx); 
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float remainder(float _Xx, float _Yx) noexcept { 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::remainderf(_Xx, _Yx); 
#line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
inline float remquo(float _Xx, float _Yx, int *_Zx) noexcept { 
#line 231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::remquof(_Xx, _Yx, _Zx); 
#line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float rint(float _Xx) noexcept { 
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::rintf(_Xx); 
#line 236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float round(float _Xx) noexcept { 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::roundf(_Xx); 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float scalbln(float _Xx, long _Yx) noexcept { 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::scalblnf(_Xx, _Yx); 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float scalbn(float _Xx, int _Yx) noexcept { 
#line 253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::scalbnf(_Xx, _Yx); 
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float sin(float _Xx) noexcept { 
#line 257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::sinf(_Xx); 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float sinh(float _Xx) noexcept { 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::sinhf(_Xx); 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float sqrt(float _Xx) noexcept { 
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::sqrtf(_Xx); 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float tan(float _Xx) noexcept { 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::tanf(_Xx); 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float tanh(float _Xx) noexcept { 
#line 273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::tanhf(_Xx); 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float tgamma(float _Xx) noexcept { 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::tgammaf(_Xx); 
#line 278 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline float trunc(float _Xx) noexcept { 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::truncf(_Xx); 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double acos(long double _Xx) noexcept { 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::acosl(_Xx); 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double acosh(long double _Xx) noexcept { 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::acoshl(_Xx); 
#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double asin(long double _Xx) noexcept { 
#line 299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::asinl(_Xx); 
#line 300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double asinh(long double _Xx) noexcept { 
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::asinhl(_Xx); 
#line 304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double atan(long double _Xx) noexcept { 
#line 307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::atanl(_Xx); 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double atanh(long double _Xx) noexcept { 
#line 311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::atanhl(_Xx); 
#line 312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double atan2(long double _Yx, long double _Xx) noexcept 
#line 315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::atan2l(_Yx, _Xx); 
#line 317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double cbrt(long double _Xx) noexcept { 
#line 320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::cbrtl(_Xx); 
#line 321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double ceil(long double _Xx) noexcept { 
#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::ceill(_Xx); 
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double copysign(long double _Number, long double _Sign) noexcept 
#line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::copysignl(_Number, _Sign); 
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double cos(long double _Xx) noexcept { 
#line 345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::cosl(_Xx); 
#line 346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 348 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double cosh(long double _Xx) noexcept { 
#line 349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::coshl(_Xx); 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double erf(long double _Xx) noexcept { 
#line 353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::erfl(_Xx); 
#line 354 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double erfc(long double _Xx) noexcept { 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::erfcl(_Xx); 
#line 358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double exp(long double _Xx) noexcept { 
#line 361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::expl(_Xx); 
#line 362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double exp2(long double _Xx) noexcept { 
#line 365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::exp2l(_Xx); 
#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 368 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double expm1(long double _Xx) noexcept { 
#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::expm1l(_Xx); 
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double fabs(long double _Xx) noexcept { 
#line 373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fabsl(_Xx); 
#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double fdim(long double _Xx, long double _Yx) noexcept 
#line 377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fdiml(_Xx, _Yx); 
#line 379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 381 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double floor(long double _Xx) noexcept { 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::floorl(_Xx); 
#line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double fma(long double 
#line 392 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
_Xx, long double _Yx, long double _Zx) noexcept { 
#line 393 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fmal(_Xx, _Yx, _Zx); 
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 396 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double fmax(long double _Xx, long double _Yx) noexcept 
#line 397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fmaxl(_Xx, _Yx); 
#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 401 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double fmin(long double _Xx, long double _Yx) noexcept 
#line 402 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 403 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fminl(_Xx, _Yx); 
#line 404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 406 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double fmod(long double _Xx, long double _Yx) noexcept 
#line 407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::fmodl(_Xx, _Yx); 
#line 409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
inline long double frexp(long double _Xx, int *_Yx) noexcept { 
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::frexpl(_Xx, _Yx); 
#line 413 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double hypot(long double _Xx, long double _Yx) noexcept 
#line 416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 417 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::hypotl(_Xx, _Yx); 
#line 418 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline int ilogb(long double _Xx) noexcept { 
#line 421 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::ilogbl(_Xx); 
#line 422 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 424 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double ldexp(long double _Xx, int _Yx) noexcept { 
#line 425 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::ldexpl(_Xx, _Yx); 
#line 426 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 428 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double lgamma(long double _Xx) noexcept { 
#line 429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::lgammal(_Xx); 
#line 430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 432 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline __int64 llrint(long double _Xx) noexcept { 
#line 433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::llrintl(_Xx); 
#line 434 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 436 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline __int64 llround(long double _Xx) noexcept { 
#line 437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::llroundl(_Xx); 
#line 438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double log(long double _Xx) noexcept { 
#line 441 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::logl(_Xx); 
#line 442 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 444 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double log10(long double _Xx) noexcept { 
#line 445 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::log10l(_Xx); 
#line 446 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 448 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double log1p(long double _Xx) noexcept { 
#line 449 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::log1pl(_Xx); 
#line 450 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double log2(long double _Xx) noexcept { 
#line 453 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::log2l(_Xx); 
#line 454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 456 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double logb(long double _Xx) noexcept { 
#line 457 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::logbl(_Xx); 
#line 458 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 460 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long lrint(long double _Xx) noexcept { 
#line 461 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::lrintl(_Xx); 
#line 462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long lround(long double _Xx) noexcept { 
#line 465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::lroundl(_Xx); 
#line 466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 468 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
inline long double modf(long double _Xx, long double *_Yx) noexcept { 
#line 469 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::modfl(_Xx, _Yx); 
#line 470 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double nearbyint(long double _Xx) noexcept { 
#line 473 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::nearbyintl(_Xx); 
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double nextafter(long double _Xx, long double _Yx) noexcept 
#line 477 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::nextafterl(_Xx, _Yx); 
#line 479 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 481 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double nexttoward(long double _Xx, long double _Yx) noexcept 
#line 482 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 483 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::nexttowardl(_Xx, _Yx); 
#line 484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double pow(long double _Xx, long double _Yx) noexcept 
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 488 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::powl(_Xx, _Yx); 
#line 489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double remainder(long double _Xx, long double _Yx) noexcept 
#line 492 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
{ 
#line 493 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::remainderl(_Xx, _Yx); 
#line 494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 496 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
inline long double remquo(long double _Xx, long double _Yx, int *_Zx) noexcept { 
#line 497 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::remquol(_Xx, _Yx, _Zx); 
#line 498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 500 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double rint(long double _Xx) noexcept { 
#line 501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::rintl(_Xx); 
#line 502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 504 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double round(long double _Xx) noexcept { 
#line 510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::roundl(_Xx); 
#line 512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 514 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double scalbln(long double _Xx, long _Yx) noexcept { 
#line 515 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::scalblnl(_Xx, _Yx); 
#line 516 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 518 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double scalbn(long double _Xx, int _Yx) noexcept { 
#line 519 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::scalbnl(_Xx, _Yx); 
#line 520 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 522 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double sin(long double _Xx) noexcept { 
#line 523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::sinl(_Xx); 
#line 524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 526 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double sinh(long double _Xx) noexcept { 
#line 527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::sinhl(_Xx); 
#line 528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 530 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double sqrt(long double _Xx) noexcept { 
#line 531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::sqrtl(_Xx); 
#line 532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 534 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double tan(long double _Xx) noexcept { 
#line 535 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::tanl(_Xx); 
#line 536 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double tanh(long double _Xx) noexcept { 
#line 539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::tanhl(_Xx); 
#line 540 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 542 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double tgamma(long double _Xx) noexcept { 
#line 543 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::tgammal(_Xx); 
#line 544 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 546 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
[[nodiscard]] inline long double trunc(long double _Xx) noexcept { 
#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
return ::truncl(_Xx); 
#line 554 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
} 
#line 556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
namespace std { 
#line 557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template< class _Ty1, class _Ty2> using _Common_float_type_t = conditional_t< is_same_v< _Ty1, long double>  || is_same_v< _Ty2, long double> , long double, conditional_t< is_same_v< _Ty1, float>  && is_same_v< _Ty2, float> , float, double> > ; 
#line 561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}
#line 563 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 >
double frexp ( _Ty _Value, int * const _Exp ) noexcept {
    return :: frexp ( static_cast < double > ( _Value ), _Exp );
}
#line 568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, class _Ty3,
    :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > && :: std :: is_arithmetic_v < _Ty3 >, int > = 0 >
[ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, :: std :: _Common_float_type_t < _Ty2, _Ty3 > > fma (
    _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right ) noexcept {
    using _Common = :: std :: _Common_float_type_t < _Ty1, :: std :: _Common_float_type_t < _Ty2, _Ty3 >>;
    if constexpr ( :: std :: is_same_v < _Common, float > ) {
        return :: fmaf ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    } else if constexpr ( :: std :: is_same_v < _Common, double > ) {
        return :: fma ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    } else {
        return :: fmal ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    }
}
#line 582 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 >
:: std :: _Common_float_type_t < _Ty1, _Ty2 > remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo ) noexcept {
    using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >;
    if constexpr ( :: std :: is_same_v < _Common, float > ) {
        return :: remquof ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    } else if constexpr ( :: std :: is_same_v < _Common, double > ) {
        return :: remquo ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    } else {
        return :: remquol ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    }
}
#line 641 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double acos ( _Ty _Left ) noexcept { return :: acos ( static_cast < double > ( _Left ) ); }
#line 642 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double asin ( _Ty _Left ) noexcept { return :: asin ( static_cast < double > ( _Left ) ); }
#line 643 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double atan ( _Ty _Left ) noexcept { return :: atan ( static_cast < double > ( _Left ) ); }
#line 644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > atan2 ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: atan2 ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 645 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cos ( _Ty _Left ) noexcept { return :: cos ( static_cast < double > ( _Left ) ); }
#line 646 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sin ( _Ty _Left ) noexcept { return :: sin ( static_cast < double > ( _Left ) ); }
#line 647 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tan ( _Ty _Left ) noexcept { return :: tan ( static_cast < double > ( _Left ) ); }
#line 648 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double acosh ( _Ty _Left ) noexcept { return :: acosh ( static_cast < double > ( _Left ) ); }
#line 649 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double asinh ( _Ty _Left ) noexcept { return :: asinh ( static_cast < double > ( _Left ) ); }
#line 650 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double atanh ( _Ty _Left ) noexcept { return :: atanh ( static_cast < double > ( _Left ) ); }
#line 651 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cosh ( _Ty _Left ) noexcept { return :: cosh ( static_cast < double > ( _Left ) ); }
#line 652 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sinh ( _Ty _Left ) noexcept { return :: sinh ( static_cast < double > ( _Left ) ); }
#line 653 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tanh ( _Ty _Left ) noexcept { return :: tanh ( static_cast < double > ( _Left ) ); }
#line 654 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double exp ( _Ty _Left ) noexcept { return :: exp ( static_cast < double > ( _Left ) ); }
#line 655 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double exp2 ( _Ty _Left ) noexcept { return :: exp2 ( static_cast < double > ( _Left ) ); }
#line 656 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double expm1 ( _Ty _Left ) noexcept { return :: expm1 ( static_cast < double > ( _Left ) ); }
#line 658 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] int ilogb ( _Ty _Left ) noexcept { return :: ilogb ( static_cast < double > ( _Left ) ); }
#line 659 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double ldexp ( _Ty _Left, int _Arg2 ) noexcept { return :: ldexp ( static_cast < double > ( _Left ), _Arg2 ); }
#line 660 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log ( _Ty _Left ) noexcept { return :: log ( static_cast < double > ( _Left ) ); }
#line 661 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log10 ( _Ty _Left ) noexcept { return :: log10 ( static_cast < double > ( _Left ) ); }
#line 662 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log1p ( _Ty _Left ) noexcept { return :: log1p ( static_cast < double > ( _Left ) ); }
#line 663 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log2 ( _Ty _Left ) noexcept { return :: log2 ( static_cast < double > ( _Left ) ); }
#line 664 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double logb ( _Ty _Left ) noexcept { return :: logb ( static_cast < double > ( _Left ) ); }
#line 666 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double scalbn ( _Ty _Left, int _Arg2 ) noexcept { return :: scalbn ( static_cast < double > ( _Left ), _Arg2 ); }
#line 667 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double scalbln ( _Ty _Left, long _Arg2 ) noexcept { return :: scalbln ( static_cast < double > ( _Left ), _Arg2 ); }
#line 668 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cbrt ( _Ty _Left ) noexcept { return :: cbrt ( static_cast < double > ( _Left ) ); }
#line 670 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double fabs ( _Ty _Left ) noexcept { return :: fabs ( static_cast < double > ( _Left ) ); }
#line 671 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > hypot ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: hypot ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 673 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > pow ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: pow ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sqrt ( _Ty _Left ) noexcept { return :: sqrt ( static_cast < double > ( _Left ) ); }
#line 675 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double erf ( _Ty _Left ) noexcept { return :: erf ( static_cast < double > ( _Left ) ); }
#line 676 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double erfc ( _Ty _Left ) noexcept { return :: erfc ( static_cast < double > ( _Left ) ); }
#line 677 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double lgamma ( _Ty _Left ) noexcept { return :: lgamma ( static_cast < double > ( _Left ) ); }
#line 678 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tgamma ( _Ty _Left ) noexcept { return :: tgamma ( static_cast < double > ( _Left ) ); }
#line 679 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double ceil ( _Ty _Left ) noexcept { return :: ceil ( static_cast < double > ( _Left ) ); }
#line 680 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double floor ( _Ty _Left ) noexcept { return :: floor ( static_cast < double > ( _Left ) ); }
#line 681 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double nearbyint ( _Ty _Left ) noexcept { return :: nearbyint ( static_cast < double > ( _Left ) ); }
#line 682 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double rint ( _Ty _Left ) noexcept { return :: rint ( static_cast < double > ( _Left ) ); }
#line 683 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long lrint ( _Ty _Left ) noexcept { return :: lrint ( static_cast < double > ( _Left ) ); }
#line 684 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long long llrint ( _Ty _Left ) noexcept { return :: llrint ( static_cast < double > ( _Left ) ); }
#line 685 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double round ( _Ty _Left ) noexcept { return :: round ( static_cast < double > ( _Left ) ); }
#line 686 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long lround ( _Ty _Left ) noexcept { return :: lround ( static_cast < double > ( _Left ) ); }
#line 687 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long long llround ( _Ty _Left ) noexcept { return :: llround ( static_cast < double > ( _Left ) ); }
#line 688 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double trunc ( _Ty _Left ) noexcept { return :: trunc ( static_cast < double > ( _Left ) ); }
#line 689 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmod ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmod ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 690 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > remainder ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: remainder ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 692 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > copysign ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: copysign ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 694 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > nextafter ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: nextafter ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 695 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double nexttoward ( _Ty _Left, long double _Arg2 ) noexcept { return :: nexttoward ( static_cast < double > ( _Left ), _Arg2 ); }
#line 696 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fdim ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fdim ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 697 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmax ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmax ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 698 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmin ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmin ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 713 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
namespace std { 
#line 714 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::abs;
#line 715 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::acos;
#line 716 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::asin;
#line 717 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atan;
#line 718 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atan2;
#line 719 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ceil;
#line 720 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::cos;
#line 721 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::cosh;
#line 722 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::exp;
#line 723 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fabs;
#line 724 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::floor;
#line 725 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmod;
#line 726 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::frexp;
#line 727 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ldexp;
#line 728 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log;
#line 729 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log10;
#line 730 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::modf;
#line 731 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::pow;
#line 732 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sin;
#line 733 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sinh;
#line 734 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sqrt;
#line 735 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tan;
#line 736 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tanh;
#line 738 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::acosf;
#line 739 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::asinf;
#line 740 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atanf;
#line 741 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atan2f;
#line 742 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ceilf;
#line 743 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::cosf;
#line 744 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::coshf;
#line 745 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::expf;
#line 746 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fabsf;
#line 747 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::floorf;
#line 748 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmodf;
#line 749 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::frexpf;
#line 750 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ldexpf;
#line 751 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::logf;
#line 752 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log10f;
#line 753 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::modff;
#line 754 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::powf;
#line 755 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sinf;
#line 756 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sinhf;
#line 757 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sqrtf;
#line 758 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tanf;
#line 759 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tanhf;
#line 761 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::acosl;
#line 762 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::asinl;
#line 763 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atanl;
#line 764 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atan2l;
#line 765 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ceill;
#line 766 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::cosl;
#line 767 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::coshl;
#line 768 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::expl;
#line 769 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fabsl;
#line 770 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::floorl;
#line 771 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmodl;
#line 772 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::frexpl;
#line 773 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ldexpl;
#line 774 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::logl;
#line 775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log10l;
#line 776 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::modfl;
#line 777 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::powl;
#line 778 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sinl;
#line 779 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sinhl;
#line 780 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::sqrtl;
#line 781 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tanl;
#line 782 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tanhl;
#line 784 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::float_t;
#line 785 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::double_t;
#line 787 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::acosh;
#line 788 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::asinh;
#line 789 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atanh;
#line 790 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::cbrt;
#line 791 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::erf;
#line 792 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::erfc;
#line 793 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::expm1;
#line 794 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::exp2;
#line 796 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
inline namespace _Binary_hypot { 
#line 797 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::hypot;
#line 798 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}
#line 800 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ilogb;
#line 801 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lgamma;
#line 802 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log1p;
#line 803 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log2;
#line 804 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::logb;
#line 805 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::llrint;
#line 806 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lrint;
#line 807 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nearbyint;
#line 808 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::rint;
#line 809 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::llround;
#line 810 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lround;
#line 811 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fdim;
#line 812 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fma;
#line 813 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmax;
#line 814 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmin;
#line 815 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::round;
#line 816 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::trunc;
#line 817 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::remainder;
#line 818 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::remquo;
#line 819 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::copysign;
#line 820 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nan;
#line 821 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nextafter;
#line 822 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::scalbn;
#line 823 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::scalbln;
#line 824 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nexttoward;
#line 825 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tgamma;
#line 827 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::acoshf;
#line 828 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::asinhf;
#line 829 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atanhf;
#line 830 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::cbrtf;
#line 831 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::erff;
#line 832 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::erfcf;
#line 833 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::expm1f;
#line 834 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::exp2f;
#line 835 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::hypotf;
#line 836 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ilogbf;
#line 837 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lgammaf;
#line 838 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log1pf;
#line 839 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log2f;
#line 840 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::logbf;
#line 841 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::llrintf;
#line 842 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lrintf;
#line 843 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nearbyintf;
#line 844 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::rintf;
#line 845 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::llroundf;
#line 846 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lroundf;
#line 847 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fdimf;
#line 848 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmaf;
#line 849 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmaxf;
#line 850 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fminf;
#line 851 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::roundf;
#line 852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::truncf;
#line 853 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::remainderf;
#line 854 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::remquof;
#line 855 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::copysignf;
#line 856 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nanf;
#line 857 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nextafterf;
#line 858 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::scalbnf;
#line 859 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::scalblnf;
#line 860 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nexttowardf;
#line 861 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tgammaf;
#line 863 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::acoshl;
#line 864 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::asinhl;
#line 865 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::atanhl;
#line 866 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::cbrtl;
#line 867 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::erfl;
#line 868 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::erfcl;
#line 869 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::expm1l;
#line 870 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::exp2l;
#line 871 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::hypotl;
#line 872 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::ilogbl;
#line 873 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lgammal;
#line 874 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log1pl;
#line 875 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::log2l;
#line 876 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::logbl;
#line 877 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::llrintl;
#line 878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lrintl;
#line 879 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nearbyintl;
#line 880 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::rintl;
#line 881 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::llroundl;
#line 882 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::lroundl;
#line 883 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fdiml;
#line 884 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmal;
#line 885 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fmaxl;
#line 886 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fminl;
#line 887 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::roundl;
#line 888 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::truncl;
#line 889 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::remainderl;
#line 890 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::remquol;
#line 891 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::copysignl;
#line 892 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nanl;
#line 893 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nextafterl;
#line 894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::scalbnl;
#line 895 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::scalblnl;
#line 896 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::nexttowardl;
#line 897 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::tgammal;
#line 899 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::fpclassify;
#line 900 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::signbit;
#line 901 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::isfinite;
#line 902 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::isinf;
#line 903 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::isnan;
#line 904 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::isnormal;
#line 905 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::isgreater;
#line 906 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::isgreaterequal;
#line 907 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::isless;
#line 908 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::islessequal;
#line 909 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::islessgreater;
#line 910 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
using ::isunordered;
#line 911 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
}
#line 1489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cmath"
#pragma warning(pop)
#pragma pack ( pop )
#line 10839 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern "C" double __cdecl _hypot(double x, double y); 
#line 10840 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern "C" float __cdecl _hypotf(float x, float y); 
#line 10850 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline bool signbit(long double) throw(); 
#line 10851 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern "C" int _ldsign(long double); 
#line 10894 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline bool signbit(double) throw(); 
#line 10895 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern "C" int _dsign(double); 
#line 10939 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline bool signbit(float) throw(); 
#line 10940 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern "C" int _fdsign(float); 
#line 10948 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isinf(long double a); 
#line 10983 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isinf(double a); 
#line 11021 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isinf(float a); 
#line 11028 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isnan(long double a); 
#line 11061 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isnan(double a); 
#line 11097 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isnan(float a); 
#line 11104 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 11141 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isfinite(double a); 
#line 11177 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static __inline bool isfinite(float a); 
#line 11185 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
template< class T> extern T _Pow_int(T, int) throw(); 
#line 11186 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline __int64 abs(__int64) throw(); 
#line 11267 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 11271 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 11272 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline double __cdecl abs(double) throw(); 
#line 11273 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl fabs(float) throw(); 
#line 11274 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl ceil(float) throw(); 
#line 11275 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl floor(float) throw(); 
#line 11276 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl sqrt(float) throw(); 
#line 11277 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl pow(float, float) throw(); 
#line 11314 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
template< class _Ty1, class _Ty2, std::enable_if_t< std::is_arithmetic_v< _Ty1>  && std::is_arithmetic_v< _Ty2> , int>  > [[nodiscard]] std::_Common_float_type_t< _Ty1, _Ty2>  __cdecl pow(_Ty1 _Left, _Ty2 _Right) noexcept; 
#line 11321 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 11322 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl log10(float) throw(); 
#line 11323 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl fmod(float, float) throw(); 
#line 11324 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl modf(float, float *) throw(); 
#line 11325 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl exp(float) throw(); 
#line 11326 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl frexp(float, int *) throw(); 
#line 11327 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl ldexp(float, int) throw(); 
#line 11328 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl asin(float) throw(); 
#line 11329 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl sin(float) throw(); 
#line 11330 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl sinh(float) throw(); 
#line 11331 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl acos(float) throw(); 
#line 11332 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl cos(float) throw(); 
#line 11333 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl cosh(float) throw(); 
#line 11334 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl atan(float) throw(); 
#line 11335 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl atan2(float, float) throw(); 
#line 11336 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl tan(float) throw(); 
#line 11337 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl tanh(float) throw(); 
#line 11560 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 11561 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline int __cdecl ilogb(float) throw(); 
#line 11562 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern float __cdecl scalbn(float, float) throw(); 
#line 11563 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl scalbln(float, long) throw(); 
#line 11564 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl exp2(float) throw(); 
#line 11565 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl expm1(float) throw(); 
#line 11566 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl log2(float) throw(); 
#line 11567 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl log1p(float) throw(); 
#line 11568 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl acosh(float) throw(); 
#line 11569 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl asinh(float) throw(); 
#line 11570 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl atanh(float) throw(); 
#line 11571 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl hypot(float, float) throw(); 
#line 11572 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl cbrt(float) throw(); 
#line 11573 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl erf(float) throw(); 
#line 11574 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl erfc(float) throw(); 
#line 11575 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl lgamma(float) throw(); 
#line 11576 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl tgamma(float) throw(); 
#line 11577 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl copysign(float, float) throw(); 
#line 11578 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl nextafter(float, float) throw(); 
#line 11579 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl remainder(float, float) throw(); 
#line 11580 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 11581 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl round(float) throw(); 
#line 11582 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline long __cdecl lround(float) throw(); 
#line 11583 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline __int64 __cdecl llround(float) throw(); 
#line 11584 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl trunc(float) throw(); 
#line 11585 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl rint(float) throw(); 
#line 11586 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline long __cdecl lrint(float) throw(); 
#line 11587 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline __int64 __cdecl llrint(float) throw(); 
#line 11588 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl nearbyint(float) throw(); 
#line 11589 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl fdim(float, float) throw(); 
#line 11590 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl fma(float, float, float) throw(); 
#line 11591 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl fmax(float, float) throw(); 
#line 11592 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern inline float __cdecl fmin(float, float) throw(); 
#line 11595 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float exp10(const float a); 
#line 11597 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float rsqrt(const float a); 
#line 11599 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float rcbrt(const float a); 
#line 11601 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float sinpi(const float a); 
#line 11603 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float cospi(const float a); 
#line 11605 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
#line 11607 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline void sincos(const float a, float *const sptr, float *const cptr); 
#line 11609 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float j0(const float a); 
#line 11611 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float j1(const float a); 
#line 11613 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float jn(const int n, const float a); 
#line 11615 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float y0(const float a); 
#line 11617 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float y1(const float a); 
#line 11619 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float yn(const int n, const float a); 
#line 11621 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float cyl_bessel_i0(const float a); 
#line 11623 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float cyl_bessel_i1(const float a); 
#line 11625 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float erfinv(const float a); 
#line 11627 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float erfcinv(const float a); 
#line 11629 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float normcdfinv(const float a); 
#line 11631 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float normcdf(const float a); 
#line 11633 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float erfcx(const float a); 
#line 11635 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline double copysign(const double a, const float b); 
#line 11637 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline double copysign(const float a, const double b); 
#line 11645 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned min(const unsigned a, const unsigned b); 
#line 11653 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned min(const int a, const unsigned b); 
#line 11661 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned min(const unsigned a, const int b); 
#line 11669 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline long min(const long a, const long b); 
#line 11677 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned long min(const unsigned long a, const unsigned long b); 
#line 11685 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned long min(const long a, const unsigned long b); 
#line 11693 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned long min(const unsigned long a, const long b); 
#line 11701 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline __int64 min(const __int64 a, const __int64 b); 
#line 11709 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned __int64 min(const unsigned __int64 a, const unsigned __int64 b); 
#line 11717 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned __int64 min(const __int64 a, const unsigned __int64 b); 
#line 11725 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned __int64 min(const unsigned __int64 a, const __int64 b); 
#line 11736 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float min(const float a, const float b); 
#line 11747 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline double min(const double a, const double b); 
#line 11757 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline double min(const float a, const double b); 
#line 11767 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline double min(const double a, const float b); 
#line 11775 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned max(const unsigned a, const unsigned b); 
#line 11783 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned max(const int a, const unsigned b); 
#line 11791 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned max(const unsigned a, const int b); 
#line 11799 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline long max(const long a, const long b); 
#line 11807 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned long max(const unsigned long a, const unsigned long b); 
#line 11815 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned long max(const long a, const unsigned long b); 
#line 11823 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned long max(const unsigned long a, const long b); 
#line 11831 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline __int64 max(const __int64 a, const __int64 b); 
#line 11839 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned __int64 max(const unsigned __int64 a, const unsigned __int64 b); 
#line 11847 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned __int64 max(const __int64 a, const unsigned __int64 b); 
#line 11855 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline unsigned __int64 max(const unsigned __int64 a, const __int64 b); 
#line 11866 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline float max(const float a, const float b); 
#line 11877 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline double max(const double a, const double b); 
#line 11887 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline double max(const float a, const double b); 
#line 11897 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
static inline double max(const double a, const float b); 
#line 11909 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
extern "C" {
#line 11910 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
inline void *__nv_aligned_device_malloc(size_t size, size_t align) {int volatile ___ = 1;(void)size;(void)align;::exit(___);}









#line 11921 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
#line 11915 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
}
#line 433 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const long double a) 
#line 434 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 438 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isinf< long double> (a); 
#line 440 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 449 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const double a) 
#line 450 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 454 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isinf< double> (a); 
#line 456 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 465 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const float a) 
#line 466 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 470 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isinf< float> (a); 
#line 472 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 481 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const long double a) 
#line 482 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 486 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isnan< long double> (a); 
#line 488 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 497 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const double a) 
#line 498 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 502 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isnan< double> (a); 
#line 504 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 513 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const float a) 
#line 514 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 518 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isnan< float> (a); 
#line 520 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 529 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const long double a) 
#line 530 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 534 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isfinite< long double> (a); 
#line 536 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 545 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const double a) 
#line 546 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 550 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isfinite< double> (a); 
#line 552 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 561 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const float a) 
#line 562 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 566 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return isfinite< float> (a); 
#line 568 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 758 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float exp10(const float a) 
#line 759 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 760 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return exp10f(a); 
#line 761 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 763 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float rsqrt(const float a) 
#line 764 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 765 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return rsqrtf(a); 
#line 766 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 768 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float rcbrt(const float a) 
#line 769 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 770 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return rcbrtf(a); 
#line 771 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 773 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float sinpi(const float a) 
#line 774 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 775 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return sinpif(a); 
#line 776 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 778 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float cospi(const float a) 
#line 779 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 780 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return cospif(a); 
#line 781 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 783 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
#line 784 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 785 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
sincospif(a, sptr, cptr); 
#line 786 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 788 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline void sincos(const float a, float *const sptr, float *const cptr) 
#line 789 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 790 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
sincosf(a, sptr, cptr); 
#line 791 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 793 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float j0(const float a) 
#line 794 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 795 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return j0f(a); 
#line 796 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 798 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float j1(const float a) 
#line 799 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 800 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return j1f(a); 
#line 801 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 803 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float jn(const int n, const float a) 
#line 804 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 805 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return jnf(n, a); 
#line 806 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 808 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float y0(const float a) 
#line 809 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 810 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return y0f(a); 
#line 811 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 813 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float y1(const float a) 
#line 814 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 815 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return y1f(a); 
#line 816 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 818 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float yn(const int n, const float a) 
#line 819 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 820 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return ynf(n, a); 
#line 821 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 823 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float cyl_bessel_i0(const float a) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;::exit(___);}







#line 834 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 828 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float cyl_bessel_i1(const float a) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;::exit(___);}







#line 839 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#line 833 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float erfinv(const float a) 
#line 834 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 835 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return erfinvf(a); 
#line 836 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 838 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float erfcinv(const float a) 
#line 839 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 840 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return erfcinvf(a); 
#line 841 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 843 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float normcdfinv(const float a) 
#line 844 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 845 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return normcdfinvf(a); 
#line 846 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 848 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float normcdf(const float a) 
#line 849 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 850 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return normcdff(a); 
#line 851 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 853 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float erfcx(const float a) 
#line 854 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 855 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return erfcxf(a); 
#line 856 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 858 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline double copysign(const double a, const float b) 
#line 859 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 860 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return copysign(a, static_cast< double>(b)); 
#line 861 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 863 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline double copysign(const float a, const double b) 
#line 864 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 865 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return copysign(static_cast< double>(a), b); 
#line 866 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 868 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned min(const unsigned a, const unsigned b) 
#line 869 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 870 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return umin(a, b); 
#line 871 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 873 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned min(const int a, const unsigned b) 
#line 874 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 875 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return umin(static_cast< unsigned>(a), b); 
#line 876 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 878 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned min(const unsigned a, const int b) 
#line 879 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 880 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return umin(a, static_cast< unsigned>(b)); 
#line 881 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 883 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline long min(const long a, const long b) 
#line 884 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 885 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
long retval; 
#line 888 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable: 4127)
#line 892 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 894 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 896 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
#line 897 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} else { 
#line 898 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< long>(llmin(static_cast< __int64>(a), static_cast< __int64>(b)))); 
#line 899 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
}  
#line 900 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return retval; 
#line 901 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 903 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned long min(const unsigned long a, const unsigned long b) 
#line 904 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 905 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
unsigned long retval; 
#line 907 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable: 4127)
#line 910 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 912 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 914 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 915 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} else { 
#line 916 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 917 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
}  
#line 918 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return retval; 
#line 919 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 921 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned long min(const long a, const unsigned long b) 
#line 922 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 923 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
unsigned long retval; 
#line 925 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable: 4127)
#line 928 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 930 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 932 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 933 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} else { 
#line 934 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 935 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
}  
#line 936 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return retval; 
#line 937 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 939 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned long min(const unsigned long a, const long b) 
#line 940 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 941 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
unsigned long retval; 
#line 943 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable: 4127)
#line 946 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 948 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 950 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 951 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} else { 
#line 952 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 953 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
}  
#line 954 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return retval; 
#line 955 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 957 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline __int64 min(const __int64 a, const __int64 b) 
#line 958 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 959 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return llmin(a, b); 
#line 960 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 962 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned __int64 min(const unsigned __int64 a, const unsigned __int64 b) 
#line 963 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 964 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return ullmin(a, b); 
#line 965 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 967 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned __int64 min(const __int64 a, const unsigned __int64 b) 
#line 968 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 969 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return ullmin(static_cast< unsigned __int64>(a), b); 
#line 970 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 972 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned __int64 min(const unsigned __int64 a, const __int64 b) 
#line 973 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 974 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return ullmin(a, static_cast< unsigned __int64>(b)); 
#line 975 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 977 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float min(const float a, const float b) 
#line 978 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 979 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return fminf(a, b); 
#line 980 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 982 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline double min(const double a, const double b) 
#line 983 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 984 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return fmin(a, b); 
#line 985 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 987 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline double min(const float a, const double b) 
#line 988 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 989 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return fmin(static_cast< double>(a), b); 
#line 990 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 992 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline double min(const double a, const float b) 
#line 993 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 994 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return fmin(a, static_cast< double>(b)); 
#line 995 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 997 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned max(const unsigned a, const unsigned b) 
#line 998 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 999 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return umax(a, b); 
#line 1000 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1002 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned max(const int a, const unsigned b) 
#line 1003 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1004 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return umax(static_cast< unsigned>(a), b); 
#line 1005 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1007 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned max(const unsigned a, const int b) 
#line 1008 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1009 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return umax(a, static_cast< unsigned>(b)); 
#line 1010 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1012 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline long max(const long a, const long b) 
#line 1013 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1014 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
long retval; 
#line 1017 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable: 4127)
#line 1020 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 1022 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 1024 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
#line 1025 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} else { 
#line 1026 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< long>(llmax(static_cast< __int64>(a), static_cast< __int64>(b)))); 
#line 1027 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
}  
#line 1028 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return retval; 
#line 1029 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1031 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned long max(const unsigned long a, const unsigned long b) 
#line 1032 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1033 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
unsigned long retval; 
#line 1035 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable: 4127)
#line 1038 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1040 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 1042 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1043 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} else { 
#line 1044 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1045 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
}  
#line 1046 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return retval; 
#line 1047 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1049 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned long max(const long a, const unsigned long b) 
#line 1050 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1051 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
unsigned long retval; 
#line 1053 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable: 4127)
#line 1056 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1058 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 1060 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1061 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} else { 
#line 1062 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1063 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
}  
#line 1064 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return retval; 
#line 1065 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1067 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned long max(const unsigned long a, const long b) 
#line 1068 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1069 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
unsigned long retval; 
#line 1071 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable: 4127)
#line 1074 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1076 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 1078 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1079 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} else { 
#line 1080 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1081 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
}  
#line 1082 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return retval; 
#line 1083 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1085 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline __int64 max(const __int64 a, const __int64 b) 
#line 1086 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1087 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return llmax(a, b); 
#line 1088 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1090 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned __int64 max(const unsigned __int64 a, const unsigned __int64 b) 
#line 1091 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1092 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return ullmax(a, b); 
#line 1093 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1095 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned __int64 max(const __int64 a, const unsigned __int64 b) 
#line 1096 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1097 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return ullmax(static_cast< unsigned __int64>(a), b); 
#line 1098 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1100 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned __int64 max(const unsigned __int64 a, const __int64 b) 
#line 1101 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1102 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return ullmax(a, static_cast< unsigned __int64>(b)); 
#line 1103 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1105 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline float max(const float a, const float b) 
#line 1106 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1107 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return fmaxf(a, b); 
#line 1108 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1110 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline double max(const double a, const double b) 
#line 1111 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return fmax(a, b); 
#line 1113 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1115 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline double max(const float a, const double b) 
#line 1116 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1117 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return fmax(static_cast< double>(a), b); 
#line 1118 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1120 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline double max(const double a, const float b) 
#line 1121 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1122 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return fmax(a, static_cast< double>(b)); 
#line 1123 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1129 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (push)
#pragma warning (disable : 4211)
#line 1135 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline int min(const int a, const int b) 
#line 1136 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1137 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1138 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1140 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned umin(const unsigned a, const unsigned b) 
#line 1141 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1142 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1143 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1145 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline __int64 llmin(const __int64 a, const __int64 b) 
#line 1146 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1147 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1148 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1150 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned __int64 ullmin(const unsigned __int64 a, const unsigned __int64 
#line 1151 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
b) 
#line 1152 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1153 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1154 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1156 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline int max(const int a, const int b) 
#line 1157 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1158 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1159 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1161 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned umax(const unsigned a, const unsigned b) 
#line 1162 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1163 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1164 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1166 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline __int64 llmax(const __int64 a, const __int64 b) 
#line 1167 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1168 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1169 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1171 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
static inline unsigned __int64 ullmax(const unsigned __int64 a, const unsigned __int64 
#line 1172 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
b) 
#line 1173 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
{ 
#line 1174 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1175 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
} 
#line 1178 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#pragma warning (pop)
#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
extern "C" {
#line 3215 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __vimax_s32_relu(const int a, const int b); 
#line 3227 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b); 
#line 3236 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __vimin_s32_relu(const int a, const int b); 
#line 3248 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b); 
#line 3257 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __vimax3_s32(const int a, const int b, const int c); 
#line 3269 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3278 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3290 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3299 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __vimin3_s32(const int a, const int b, const int c); 
#line 3311 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3320 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3332 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3341 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __vimax3_s32_relu(const int a, const int b, const int c); 
#line 3353 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3362 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __vimin3_s32_relu(const int a, const int b, const int c); 
#line 3374 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3383 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __viaddmax_s32(const int a, const int b, const int c); 
#line 3395 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3404 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3416 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3425 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __viaddmin_s32(const int a, const int b, const int c); 
#line 3437 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3446 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3458 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3468 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __viaddmax_s32_relu(const int a, const int b, const int c); 
#line 3480 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3490 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __viaddmin_s32_relu(const int a, const int b, const int c); 
#line 3502 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3511 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __vibmax_s32(const int a, const int b, bool *const pred); 
#line 3520 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred); 
#line 3529 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline int __vibmin_s32(const int a, const int b, bool *const pred); 
#line 3538 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred); 
#line 3552 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3566 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3580 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3594 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
static __inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3601 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
}
#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __vimax_s32_relu(const int a, const int b) { 
#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
int ans = max(a, b); 
#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return (ans > 0) ? ans : 0; 
#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b) { 
#line 122 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 131 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 137 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)max(aS_lo, bS_lo); 
#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)max(aS_hi, bS_hi); 
#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 152 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 162 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __vimin_s32_relu(const int a, const int b) { 
#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
int ans = min(a, b); 
#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return (ans > 0) ? ans : 0; 
#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b) { 
#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 185 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 187 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 188 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 192 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 195 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 198 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)min(aS_lo, bS_lo); 
#line 199 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)min(aS_hi, bS_hi); 
#line 202 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 206 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 207 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __vimax3_s32(const int a, const int b, const int c) { 
#line 226 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return max(max(a, b), c); 
#line 228 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 230 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 231 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 244 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 247 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 249 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 250 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 253 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 254 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 257 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 259 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_lo = *((short *)(&cU_lo)); 
#line 260 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_hi = *((short *)(&cU_hi)); 
#line 263 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
#line 264 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
#line 267 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 268 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 271 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 273 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 274 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 286 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return max(max(a, b), c); 
#line 288 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 290 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 291 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 302 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 303 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 305 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 306 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 308 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 309 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 312 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = (unsigned short)max(max(aU_lo, bU_lo), cU_lo); 
#line 313 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = (unsigned short)max(max(aU_hi, bU_hi), cU_hi); 
#line 316 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 319 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 320 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 322 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __vimin3_s32(const int a, const int b, const int c) { 
#line 332 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return min(min(a, b), c); 
#line 334 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 336 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 337 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 348 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 349 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 351 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 352 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 354 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 355 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 358 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 359 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 361 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 362 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 364 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_lo = *((short *)(&cU_lo)); 
#line 365 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_hi = *((short *)(&cU_hi)); 
#line 368 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
#line 369 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
#line 372 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 373 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 376 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 379 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 380 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 382 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 392 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return min(min(a, b), c); 
#line 394 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 396 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 397 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 408 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 409 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 411 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 412 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 414 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 415 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 418 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = (unsigned short)min(min(aU_lo, bU_lo), cU_lo); 
#line 419 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = (unsigned short)min(min(aU_hi, bU_hi), cU_hi); 
#line 422 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 425 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 426 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 428 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __vimax3_s32_relu(const int a, const int b, const int c) { 
#line 438 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
int ans = max(max(a, b), c); 
#line 440 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return (ans > 0) ? ans : 0; 
#line 442 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 444 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 445 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 456 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 457 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 459 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 460 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 462 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 463 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 466 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 467 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 469 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 470 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 472 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_lo = *((short *)(&cU_lo)); 
#line 473 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_hi = *((short *)(&cU_hi)); 
#line 476 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
#line 477 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
#line 480 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 481 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 484 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 485 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 488 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 491 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 492 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 494 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __vimin3_s32_relu(const int a, const int b, const int c) { 
#line 504 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
int ans = min(min(a, b), c); 
#line 506 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return (ans > 0) ? ans : 0; 
#line 508 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 510 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 511 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 522 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 523 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 525 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 526 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 528 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 529 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 532 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 533 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 535 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 536 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 538 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_lo = *((short *)(&cU_lo)); 
#line 539 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_hi = *((short *)(&cU_hi)); 
#line 542 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
#line 543 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
#line 546 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 547 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 550 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 551 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 554 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 557 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 558 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 560 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __viaddmax_s32(const int a, const int b, const int c) { 
#line 570 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return max(a + b, c); 
#line 572 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 574 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 575 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 586 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 587 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 589 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 590 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 592 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 593 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 596 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 597 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 599 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 600 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 602 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_lo = *((short *)(&cU_lo)); 
#line 603 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_hi = *((short *)(&cU_hi)); 
#line 606 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
#line 607 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
#line 610 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 611 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 614 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 617 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 618 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 620 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 630 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return max(a + b, c); 
#line 632 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 634 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 635 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 646 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 647 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 649 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 650 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 652 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 653 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 656 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = (unsigned short)max((unsigned short)(aU_lo + bU_lo), cU_lo); 
#line 657 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = (unsigned short)max((unsigned short)(aU_hi + bU_hi), cU_hi); 
#line 660 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 663 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 664 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 666 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __viaddmin_s32(const int a, const int b, const int c) { 
#line 676 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return min(a + b, c); 
#line 678 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 680 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 681 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 692 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 693 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 695 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 696 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 698 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 699 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 702 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 703 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 705 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 706 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 708 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_lo = *((short *)(&cU_lo)); 
#line 709 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_hi = *((short *)(&cU_hi)); 
#line 712 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
#line 713 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
#line 716 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 717 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 720 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 723 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 724 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 726 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 736 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return min(a + b, c); 
#line 738 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 740 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 741 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 752 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 753 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 755 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 756 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 758 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 759 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 762 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = (unsigned short)min((unsigned short)(aU_lo + bU_lo), cU_lo); 
#line 763 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = (unsigned short)min((unsigned short)(aU_hi + bU_hi), cU_hi); 
#line 766 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 769 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 770 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 772 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __viaddmax_s32_relu(const int a, const int b, const int c) { 
#line 782 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
int ans = max(a + b, c); 
#line 784 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return (ans > 0) ? ans : 0; 
#line 786 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 788 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 789 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 800 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 801 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 803 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 804 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 806 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 807 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 810 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 811 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 813 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 814 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 816 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_lo = *((short *)(&cU_lo)); 
#line 817 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_hi = *((short *)(&cU_hi)); 
#line 820 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
#line 821 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
#line 823 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 824 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 827 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 828 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 831 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 834 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 835 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 837 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __viaddmin_s32_relu(const int a, const int b, const int c) { 
#line 847 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
int ans = min(a + b, c); 
#line 849 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return (ans > 0) ? ans : 0; 
#line 851 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 853 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 854 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned res; 
#line 865 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 866 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 868 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 869 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 871 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 872 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 875 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 876 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 878 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 879 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 881 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_lo = *((short *)(&cU_lo)); 
#line 882 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short cS_hi = *((short *)(&cU_hi)); 
#line 885 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
#line 886 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
#line 888 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 889 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 892 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 893 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 896 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 899 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return res; 
#line 900 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 904 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __vibmax_s32(const int a, const int b, bool *const pred) { 
#line 918 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
int ans = max(a, b); 
#line 920 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred) = (a >= b); 
#line 921 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return ans; 
#line 923 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 925 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred) { 
#line 939 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned ans = max(a, b); 
#line 941 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred) = (a >= b); 
#line 942 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return ans; 
#line 944 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 947 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline int __vibmin_s32(const int a, const int b, bool *const pred) { 
#line 961 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
int ans = min(a, b); 
#line 963 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred) = (a <= b); 
#line 964 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return ans; 
#line 966 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 969 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred) { 
#line 983 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned ans = min(a, b); 
#line 985 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred) = (a <= b); 
#line 986 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return ans; 
#line 988 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 990 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1012 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1013 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1015 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1016 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1019 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 1020 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 1022 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 1023 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 1026 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)max(aS_lo, bS_lo); 
#line 1027 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)max(aS_hi, bS_hi); 
#line 1029 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred_hi) = (aS_hi >= bS_hi); 
#line 1030 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred_lo) = (aS_lo >= bS_lo); 
#line 1033 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 1034 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 1037 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1039 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return ans; 
#line 1041 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 1043 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1065 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1066 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1068 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1069 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1072 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = (unsigned short)max(aU_lo, bU_lo); 
#line 1073 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = (unsigned short)max(aU_hi, bU_hi); 
#line 1075 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred_hi) = (aU_hi >= bU_hi); 
#line 1076 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred_lo) = (aU_lo >= bU_lo); 
#line 1079 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1081 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return ans; 
#line 1083 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 1085 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1107 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1108 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1110 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1111 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1114 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_lo = *((short *)(&aU_lo)); 
#line 1115 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short aS_hi = *((short *)(&aU_hi)); 
#line 1117 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_lo = *((short *)(&bU_lo)); 
#line 1118 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short bS_hi = *((short *)(&bU_hi)); 
#line 1121 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_lo = (short)min(aS_lo, bS_lo); 
#line 1122 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
short ansS_hi = (short)min(aS_hi, bS_hi); 
#line 1124 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred_hi) = (aS_hi <= bS_hi); 
#line 1125 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred_lo) = (aS_lo <= bS_lo); 
#line 1128 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 1129 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 1132 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1134 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return ans; 
#line 1136 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
#line 1138 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
static __inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1160 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1161 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1163 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1164 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1167 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_lo = (unsigned short)min(aU_lo, bU_lo); 
#line 1168 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned short ansU_hi = (unsigned short)min(aU_hi, bU_hi); 
#line 1170 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred_hi) = (aU_hi <= bU_hi); 
#line 1171 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
(*pred_lo) = (aU_lo <= bU_lo); 
#line 1174 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1176 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
return ans; 
#line 1178 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_functions.hpp"
} 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicAdd(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 91 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicSub(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicSub(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicExch(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicExch(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline float atomicExch(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicMin(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicMin(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicMax(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicMax(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicInc(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicDec(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicAnd(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 122 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicOr(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 126 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicOr(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicXor(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicXor(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 132 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 127 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline int atomicCAS(int *address, int compare, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
extern "C" {
#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
}
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
__declspec(deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning).")) static __inline bool any(bool cond) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)cond;::exit(___);}



#line 182 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 177 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
__declspec(deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning).")) static __inline bool all(bool cond) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)cond;::exit(___);}



#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\device_atomic_functions.h"
#line 90 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
extern "C" {
#line 1142 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
}
#line 1150 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1154 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1156 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1158 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1160 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1162 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1164 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1166 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1168 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1170 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1172 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1174 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1176 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.h"
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;::exit(___);}







#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}







#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}







#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}







#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 152 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 157 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 168 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}







#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\device_double_functions.hpp"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 88 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 91 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMax(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicAnd(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicOr(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicXor(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd(double *address, double val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_block(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_system(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_block(double *address, double val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 127 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_system(double *address, double val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 126 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicSub_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicSub_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 132 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicSub_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 135 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicSub_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 142 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 154 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 150 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 157 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_block(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_system(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 166 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 162 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 172 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 168 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 174 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 181 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 177 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 187 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 186 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 193 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 196 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 192 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 199 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 195 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 202 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 198 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 208 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 204 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 211 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 207 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 217 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 220 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 223 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 219 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 226 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 222 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_block(int *address, int compare, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 229 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 225 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_system(int *address, int compare, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 232 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 228 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
#line 229 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 232 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
#line 233 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 240 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_block(unsigned __int64 *address, unsigned __int64 
#line 237 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 238 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 245 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 241 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_system(unsigned __int64 *address, unsigned __int64 
#line 242 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 250 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 253 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 249 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 252 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 259 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 255 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 262 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 258 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 265 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 268 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 264 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 271 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 267 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 274 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 270 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 277 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 273 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 280 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 283 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 279 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 286 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 282 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 289 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 285 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 292 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 288 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 295 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 291 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 298 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 294 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 301 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 297 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 304 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 300 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 307 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 303 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 310 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 306 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 313 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 309 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 316 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 312 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 319 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 315 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 322 "D:\\Programming\\CUDA\\v12.4\\include\\sm_60_atomic_functions.h"
#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
extern "C" {
#line 1508 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
}
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1515 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
__declspec(deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning).")) static __inline unsigned ballot(bool pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)pred;::exit(___);}



#line 1522 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1517 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline int syncthreads_count(bool pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)pred;::exit(___);}



#line 1524 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1519 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_and(bool pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)pred;::exit(___);}



#line 1526 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1521 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_or(bool pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)pred;::exit(___);}



#line 1528 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1526 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGlobal(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1533 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1527 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline unsigned __isShared(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1534 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1528 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline unsigned __isConstant(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1535 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1529 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline unsigned __isLocal(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1536 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1531 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGridConstant(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1538 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1533 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_global(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1540 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1534 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_shared(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1541 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1535 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_constant(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1542 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1536 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_local(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1543 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1538 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_grid_constant(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1545 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1541 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_global_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}



#line 1548 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1542 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_shared_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}



#line 1549 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1543 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_constant_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}



#line 1550 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1544 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_local_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}



#line 1551 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 1546 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_grid_constant_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}



#line 1553 "D:\\Programming\\CUDA\\v12.4\\include\\sm_20_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __fns(unsigned mask, unsigned base, int offset) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}



#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline void __barrier_sync(unsigned id) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)id;::exit(___);}



#line 131 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline void __barrier_sync_count(unsigned id, unsigned cnt) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}



#line 132 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 126 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline void __syncwarp(unsigned mask = 4294967295U) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;::exit(___);}



#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 127 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline int __all_sync(unsigned mask, int pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}



#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline int __any_sync(unsigned mask, int pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}



#line 135 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline int __uni_sync(unsigned mask, int pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}



#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __ballot_sync(unsigned mask, int pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}



#line 137 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 131 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __activemask() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline int __shfl(int var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 142 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline int __shfl_up(int var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 150 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline int __shfl_down(int var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 152 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 146 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline int __shfl_xor(int var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 154 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline float __shfl(float var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline float __shfl_up(float var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 150 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline float __shfl_down(float var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 157 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline float __shfl_xor(float var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 158 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 154 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 161 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 162 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 157 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 164 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 158 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 166 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 167 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 161 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 168 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 162 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 170 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 164 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 172 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 170 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 177 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 172 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 179 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 174 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 181 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 182 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 177 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline double __shfl(double var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline double __shfl_up(double var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 185 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 179 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline double __shfl_down(double var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 186 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline double __shfl_xor(double var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 187 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_sync(unsigned mask, __int64 var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_sync(unsigned mask, unsigned __int64 var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 185 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_up_sync(unsigned mask, __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 192 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 186 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_up_sync(unsigned mask, unsigned __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 193 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 187 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_down_sync(unsigned mask, __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 188 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_down_sync(unsigned mask, unsigned __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 195 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_xor_sync(unsigned mask, __int64 var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 196 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_xor_sync(unsigned mask, unsigned __int64 var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 197 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 198 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 192 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 199 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 193 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 200 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 198 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline long __shfl(long var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 199 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 206 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 200 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline long __shfl_up(long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 207 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 208 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 202 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline long __shfl_down(long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 209 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 204 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline long __shfl_xor(long var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 211 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 212 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 208 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 215 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 209 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 217 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 211 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 218 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 212 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 219 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}



#line 220 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 221 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 215 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 222 "D:\\Programming\\CUDA\\v12.4\\include\\sm_30_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 91 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline long __ldg(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 92 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldg(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 94 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char __ldg(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline signed char __ldg(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short __ldg(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int __ldg(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldg(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char2 __ldg(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char4 __ldg(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short2 __ldg(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short4 __ldg(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int2 __ldg(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int4 __ldg(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldg(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldg(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldg(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldg(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldg(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldg(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldg(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldg(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldg(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 122 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldg(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float __ldg(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 126 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double __ldg(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 127 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float2 __ldg(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 122 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float4 __ldg(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double2 __ldg(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline long __ldcg(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 135 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcg(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 131 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char __ldcg(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 132 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcg(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short __ldcg(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int __ldcg(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 135 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcg(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 142 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcg(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 137 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcg(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcg(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcg(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 146 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcg(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcg(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 142 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcg(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcg(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcg(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 152 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 146 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcg(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcg(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 154 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcg(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcg(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 150 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcg(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 157 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcg(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 158 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 152 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcg(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcg(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 154 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcg(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 161 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float __ldcg(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 157 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double __ldcg(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 164 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 158 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcg(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcg(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 166 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcg(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 167 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 164 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline long __ldca(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 165 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldca(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 172 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 167 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char __ldca(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 174 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 168 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline signed char __ldca(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short __ldca(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 170 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int __ldca(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 177 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldca(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 172 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char2 __ldca(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 179 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char4 __ldca(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 174 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short2 __ldca(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 181 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short4 __ldca(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 182 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int2 __ldca(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 177 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int4 __ldca(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldca(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 185 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldca(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 187 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 181 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldca(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 188 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 182 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldca(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldca(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldca(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 185 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldca(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 192 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 186 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldca(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 193 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 187 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldca(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 188 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldca(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 195 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldca(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 196 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldca(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 197 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 192 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float __ldca(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 199 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 193 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double __ldca(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 200 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 194 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float2 __ldca(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 195 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float4 __ldca(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 202 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 196 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double2 __ldca(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 200 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline long __ldcs(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 207 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcs(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 208 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char __ldcs(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 204 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcs(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 211 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short __ldcs(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 212 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 206 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int __ldcs(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 207 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcs(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 208 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcs(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 215 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 209 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcs(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcs(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 217 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 211 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcs(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 218 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 212 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcs(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 219 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcs(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 220 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcs(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 221 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcs(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 223 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 217 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcs(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 224 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 218 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcs(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 225 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 219 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcs(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 226 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 220 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcs(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 227 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 221 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcs(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 228 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 222 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcs(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 229 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 223 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcs(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 230 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 224 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcs(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 231 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 225 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcs(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 232 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 226 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcs(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 233 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 228 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float __ldcs(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 235 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 229 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double __ldcs(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 230 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcs(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 237 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 231 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcs(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 238 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 232 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcs(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 239 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline long __ldlu(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 237 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldlu(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 244 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 239 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char __ldlu(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 240 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline signed char __ldlu(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 247 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 241 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short __ldlu(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 248 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 242 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int __ldlu(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 249 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldlu(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 250 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 244 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char2 __ldlu(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 251 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 245 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char4 __ldlu(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 252 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short2 __ldlu(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 253 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 247 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short4 __ldlu(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 254 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 248 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int2 __ldlu(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 255 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 249 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int4 __ldlu(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 250 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldlu(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 257 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 252 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldlu(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 259 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 253 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldlu(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 260 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 254 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldlu(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 255 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldlu(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 262 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldlu(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 263 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 257 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldlu(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 264 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 258 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldlu(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 265 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 259 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldlu(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 266 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 260 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldlu(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 267 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldlu(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 268 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 262 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldlu(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 269 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 264 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float __ldlu(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 271 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 265 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double __ldlu(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 272 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 266 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float2 __ldlu(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 273 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 267 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float4 __ldlu(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 274 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 268 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double2 __ldlu(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 275 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 272 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline long __ldcv(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 279 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 273 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcv(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 280 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 275 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char __ldcv(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 282 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcv(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 283 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 277 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short __ldcv(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 284 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 278 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int __ldcv(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 285 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 279 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcv(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 286 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 280 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcv(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 287 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 281 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcv(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 288 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 282 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcv(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 289 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 283 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcv(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 290 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 284 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcv(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 291 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 285 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcv(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 292 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 286 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcv(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 293 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 288 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcv(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 295 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 289 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcv(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 296 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 290 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcv(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 297 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 291 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcv(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 298 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 292 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcv(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 299 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 293 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcv(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 300 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 294 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcv(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 301 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 295 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcv(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 302 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 296 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcv(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 303 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 297 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcv(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 304 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 298 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcv(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 305 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 300 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float __ldcv(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 307 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 301 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double __ldcv(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 308 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 302 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcv(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 309 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 303 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcv(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 310 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 304 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcv(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 311 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 308 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(long *ptr, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 315 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 309 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned long *ptr, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 316 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 311 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char *ptr, char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 318 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 312 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(signed char *ptr, signed char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 319 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 313 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short *ptr, short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 320 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 314 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int *ptr, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 321 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 315 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(__int64 *ptr, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 322 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 316 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char2 *ptr, char2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 323 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 317 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char4 *ptr, char4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 324 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 318 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short2 *ptr, short2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 325 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 319 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short4 *ptr, short4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 326 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 320 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int2 *ptr, int2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 327 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 321 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int4 *ptr, int4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 328 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 322 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(longlong2 *ptr, longlong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 329 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 324 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned char *ptr, unsigned char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 331 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 325 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned short *ptr, unsigned short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 332 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 326 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned *ptr, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 333 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 327 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned __int64 *ptr, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 334 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 328 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uchar2 *ptr, uchar2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 335 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 329 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uchar4 *ptr, uchar4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 336 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 330 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ushort2 *ptr, ushort2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 337 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 331 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ushort4 *ptr, ushort4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 338 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 332 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uint2 *ptr, uint2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 339 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 333 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uint4 *ptr, uint4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 340 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 334 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ulonglong2 *ptr, ulonglong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 341 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 336 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float *ptr, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 343 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 337 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(double *ptr, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 344 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 338 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float2 *ptr, float2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 345 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 339 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float4 *ptr, float4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 346 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 340 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwb(double2 *ptr, double2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 347 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 344 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(long *ptr, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 351 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 345 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned long *ptr, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 352 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 347 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char *ptr, char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 354 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 348 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(signed char *ptr, signed char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 355 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 349 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short *ptr, short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 356 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 350 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int *ptr, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 357 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 351 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(__int64 *ptr, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 358 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 352 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char2 *ptr, char2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 359 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 353 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char4 *ptr, char4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 360 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 354 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short2 *ptr, short2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 361 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 355 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short4 *ptr, short4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 362 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 356 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int2 *ptr, int2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 363 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 357 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int4 *ptr, int4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 364 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 358 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(longlong2 *ptr, longlong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 365 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 360 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned char *ptr, unsigned char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 367 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 361 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned short *ptr, unsigned short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 368 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 362 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned *ptr, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 369 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 363 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned __int64 *ptr, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 370 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 364 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uchar2 *ptr, uchar2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 371 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 365 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uchar4 *ptr, uchar4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 372 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 366 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ushort2 *ptr, ushort2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 373 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 367 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ushort4 *ptr, ushort4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 374 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 368 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uint2 *ptr, uint2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 375 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 369 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uint4 *ptr, uint4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 376 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 370 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ulonglong2 *ptr, ulonglong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 377 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 372 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float *ptr, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 379 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 373 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(double *ptr, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 380 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 374 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float2 *ptr, float2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 381 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 375 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float4 *ptr, float4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 382 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 376 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcg(double2 *ptr, double2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 383 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 380 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(long *ptr, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 387 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 381 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned long *ptr, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 388 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 383 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char *ptr, char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 390 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 384 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(signed char *ptr, signed char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 391 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 385 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short *ptr, short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 392 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 386 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int *ptr, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 393 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 387 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(__int64 *ptr, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 394 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 388 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char2 *ptr, char2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 395 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 389 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char4 *ptr, char4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 396 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 390 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short2 *ptr, short2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 397 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 391 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short4 *ptr, short4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 398 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 392 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int2 *ptr, int2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 399 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 393 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int4 *ptr, int4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 400 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 394 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(longlong2 *ptr, longlong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 401 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 396 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned char *ptr, unsigned char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 403 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 397 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned short *ptr, unsigned short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 404 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 398 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned *ptr, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 405 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 399 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned __int64 *ptr, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 406 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 400 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uchar2 *ptr, uchar2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 407 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 401 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uchar4 *ptr, uchar4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 408 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 402 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ushort2 *ptr, ushort2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 409 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 403 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ushort4 *ptr, ushort4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 410 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 404 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uint2 *ptr, uint2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 411 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 405 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uint4 *ptr, uint4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 412 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 406 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ulonglong2 *ptr, ulonglong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 413 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 408 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float *ptr, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 415 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 409 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(double *ptr, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 416 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 410 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float2 *ptr, float2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 417 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 411 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float4 *ptr, float4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 418 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 412 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stcs(double2 *ptr, double2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 419 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 416 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(long *ptr, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 423 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 417 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned long *ptr, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 424 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 419 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char *ptr, char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 426 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 420 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(signed char *ptr, signed char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 427 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 421 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short *ptr, short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 428 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 422 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int *ptr, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 429 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 423 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(__int64 *ptr, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 430 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 424 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char2 *ptr, char2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 431 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 425 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char4 *ptr, char4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 432 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 426 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short2 *ptr, short2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 433 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 427 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short4 *ptr, short4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 434 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 428 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int2 *ptr, int2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 435 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 429 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int4 *ptr, int4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 436 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 430 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(longlong2 *ptr, longlong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 437 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 432 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned char *ptr, unsigned char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 439 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 433 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned short *ptr, unsigned short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 440 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 434 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned *ptr, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 441 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 435 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned __int64 *ptr, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 442 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 436 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uchar2 *ptr, uchar2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 443 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 437 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uchar4 *ptr, uchar4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 444 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 438 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ushort2 *ptr, ushort2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 445 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 439 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ushort4 *ptr, ushort4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 446 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 440 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uint2 *ptr, uint2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 447 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 441 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uint4 *ptr, uint4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 448 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 442 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ulonglong2 *ptr, ulonglong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 449 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 444 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float *ptr, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 451 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 445 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(double *ptr, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 452 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 446 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float2 *ptr, float2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 453 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 447 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float4 *ptr, float4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 454 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 448 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline void __stwt(double2 *ptr, double2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}



#line 455 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 465 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 472 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 477 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 484 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 490 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 497 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 502 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 509 "D:\\Programming\\CUDA\\v12.4\\include\\sm_32_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(int srcA, int srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 132 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 136 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(int srcA, int srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 159 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 166 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 171 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 182 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 197 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(int srcA, int srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 204 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 206 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(char4 srcA, char4 srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 223 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 225 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 232 "D:\\Programming\\CUDA\\v12.4\\include\\sm_61_intrinsics.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, int value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, long value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned __int64 value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, __int64 value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, float value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, double value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}



#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline void __nanosleep(unsigned ns) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ns;::exit(___);}



#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"
static __inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_70_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_add_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_min_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_max_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_add_sync(unsigned mask, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_min_sync(unsigned mask, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_max_sync(unsigned mask, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_and_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_or_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}



#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
extern "C" {
#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
inline void *__nv_associate_access_property(const void *ptr, unsigned __int64 
#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
property) {int volatile ___ = 1;(void)ptr;(void)property;::exit(___);}









#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
src, unsigned 
#line 122 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}









#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
src, unsigned 
#line 131 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}









#line 142 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
src, unsigned 
#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}









#line 151 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_80_rt.h"
}
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 92 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline unsigned __isCtaShared(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline unsigned __isClusterShared(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 94 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline void *__cluster_map_shared_rank(const void *ptr, unsigned target_block_rank) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)target_block_rank;::exit(___);}



#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline unsigned __cluster_query_shared_rank(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}



#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline uint2 __cluster_map_shared_multicast(const void *ptr, unsigned cluster_cta_mask) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)cluster_cta_mask;::exit(___);}



#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterDimIsSpecified() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterDim() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterRelativeBlockIdx() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 100 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterGridDimInClusters() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterIdx() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterRelativeBlockRank() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterSizeInBlocks() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_arrive() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_arrive_relaxed() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 106 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_wait() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 107 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline void __threadfence_cluster() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}



#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd(float2 *__address, float2 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}



#line 116 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd_block(float2 *__address, float2 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}



#line 117 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 111 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd_system(float2 *__address, float2 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}



#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd(float4 *__address, float4 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}



#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd_block(float4 *__address, float4 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}



#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd_system(float4 *__address, float4 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}



#line 121 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
#line 125 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
extern "C" {
#line 132 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
}
#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< bool __b, class _T> 
#line 140 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
struct __nv_atomic_enable_if { }; 
#line 142 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< class _T> 
#line 143 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
struct __nv_atomic_enable_if< true, _T>  { typedef _T __type; }; 
#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< class _T> 
#line 154 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
struct __nv_atomic_triv_cp_helper { 
#line 164 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
static const bool __val = __is_trivially_copyable(_T); 
#line 166 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
}; 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 201 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
atomicCAS(_T *__address, _T __compare, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__compare;(void)__val;::exit(___);}

















#line 224 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 212 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
atomicCAS_block(_T *__address, _T __compare, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__compare;(void)__val;::exit(___);}

















#line 235 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 223 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 225 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
atomicCAS_system(_T *__address, _T __compare, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__compare;(void)__val;::exit(___);}

















#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 234 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
atomicExch(_T *__address, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__val;::exit(___);}

















#line 257 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 244 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 246 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
atomicExch_block(_T *__address, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__val;::exit(___);}

















#line 267 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 254 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 256 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
atomicExch_system(_T *__address, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__val;::exit(___);}

















#line 277 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\sm_90_rt.h"
#line 65 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
#line 66 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
#line 67 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
#line 68 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
#line 69 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
#line 70 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
#line 71 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
#line 72 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
#line 73 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
#line 74 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
#line 75 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
#line 76 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
#line 77 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
#line 78 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
#line 79 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
#line 80 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
#line 81 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
#line 82 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
#line 83 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
#line 84 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
#line 85 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
#line 86 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
#line 87 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
#line 88 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
#line 90 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
#line 92 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< long>  { typedef void type; }; 
#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< long1>  { typedef void type; }; 
#line 94 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< long2>  { typedef void type; }; 
#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< long4>  { typedef void type; }; 
#line 96 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< unsigned long>  { typedef void type; }; 
#line 97 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ulong1>  { typedef void type; }; 
#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ulong2>  { typedef void type; }; 
#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< ulong4>  { typedef void type; }; 
#line 101 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
#line 102 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
#line 103 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 108 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 109 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1Dfetch(T *ptr, ::cudaTextureObject_t obj, int x) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;::exit(___);}







#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 114 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 115 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1Dfetch(::cudaTextureObject_t texObject, int x) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;::exit(___);}











#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 122 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 123 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1D(T *ptr, ::cudaTextureObject_t obj, float x) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;::exit(___);}







#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 129 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 130 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1D(::cudaTextureObject_t texObject, float x) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;::exit(___);}











#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 138 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2D(T *ptr, ::cudaTextureObject_t obj, float x, float y) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;::exit(___);}







#line 150 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 144 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 145 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2D(::cudaTextureObject_t texObject, float x, float y) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;::exit(___);}











#line 160 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 154 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2D(T *ptr, ::cudaTextureObject_t obj, float x, float y, bool *
#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;::exit(___);}











#line 170 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 162 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2D(::cudaTextureObject_t texObject, float x, float y, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;::exit(___);}











#line 178 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 173 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 174 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3D(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;::exit(___);}







#line 185 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 179 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 180 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;::exit(___);}











#line 195 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 188 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3D(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, bool *
#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;::exit(___);}











#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 197 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 198 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3D(::cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;::exit(___);}











#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 207 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 208 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DLayered(T *ptr, ::cudaTextureObject_t obj, float x, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;::exit(___);}







#line 219 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 213 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 214 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;::exit(___);}











#line 229 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 221 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 222 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;::exit(___);}







#line 233 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 227 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 228 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;::exit(___);}











#line 243 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 236 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 237 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;::exit(___);}











#line 252 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 244 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 245 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;::exit(___);}











#line 260 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 254 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 255 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemap(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;::exit(___);}







#line 266 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 261 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 262 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;::exit(___);}











#line 277 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 270 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 271 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;::exit(___);}







#line 282 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 277 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;::exit(___);}











#line 292 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 284 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 285 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2Dgather(T *ptr, ::cudaTextureObject_t obj, float x, float y, int comp = 0) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;::exit(___);}







#line 296 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 290 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 291 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;::exit(___);}











#line 306 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 299 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 300 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2Dgather(T *ptr, ::cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;::exit(___);}











#line 315 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 307 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 308 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2Dgather(::cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;::exit(___);}











#line 323 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 317 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 318 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DLod(T *ptr, ::cudaTextureObject_t obj, float x, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;::exit(___);}







#line 329 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 323 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 324 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DLod(::cudaTextureObject_t texObject, float x, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;::exit(___);}











#line 339 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 332 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 333 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;::exit(___);}







#line 344 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 338 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 339 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;::exit(___);}











#line 354 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 348 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 349 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;::exit(___);}











#line 364 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 356 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 357 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;::exit(___);}











#line 372 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 367 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 368 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;::exit(___);}







#line 379 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 373 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 374 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;::exit(___);}











#line 389 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 382 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 383 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;::exit(___);}











#line 398 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 390 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 391 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;::exit(___);}











#line 406 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 401 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 402 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;::exit(___);}







#line 413 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 407 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 408 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;::exit(___);}











#line 423 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 416 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 417 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;::exit(___);}







#line 428 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 422 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 423 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;::exit(___);}











#line 438 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 431 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 432 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;::exit(___);}











#line 447 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 439 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 440 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;::exit(___);}











#line 455 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 448 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 449 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;::exit(___);}







#line 460 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 454 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 455 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;::exit(___);}











#line 470 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 463 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 464 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}







#line 475 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 469 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 470 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}











#line 485 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 477 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 478 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}







#line 489 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 483 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 484 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}











#line 499 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 491 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 492 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;::exit(___);}







#line 503 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 497 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 498 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;::exit(___);}











#line 513 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 506 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 507 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, ::float2 dPdx, ::float2 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}







#line 518 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 512 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 513 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}











#line 528 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 521 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 522 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, ::float2 dPdx, ::float2 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}











#line 537 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 529 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 530 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}











#line 545 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 539 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 540 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}







#line 551 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 545 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 546 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}











#line 561 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 554 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 555 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}











#line 570 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 562 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 563 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}











#line 578 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 573 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 574 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}







#line 585 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 579 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 580 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}











#line 595 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 588 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 589 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}







#line 600 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 594 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 595 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}











#line 610 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 603 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 604 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}











#line 619 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 611 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 612 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}











#line 627 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 621 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 622 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}







#line 633 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 627 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 628 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
texCubemapLayeredGrad(::cudaTextureObject_t texObject, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}











#line 643 "D:\\Programming\\CUDA\\v12.4\\include\\texture_indirect_functions.h"
#line 58 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
#line 60 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
#line 61 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
#line 62 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
#line 63 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
#line 64 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
#line 65 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
#line 66 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
#line 67 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
#line 68 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
#line 69 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
#line 70 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
#line 71 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
#line 72 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< __int64>  { typedef void type; }; 
#line 73 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
#line 74 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< unsigned __int64>  { typedef void type; }; 
#line 75 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
#line 76 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
#line 77 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
#line 79 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
#line 80 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
#line 81 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
#line 82 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
#line 83 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
#line 84 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
#line 85 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
#line 86 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
#line 87 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
#line 89 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
#line 90 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
#line 91 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
#line 92 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
#line 93 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
#line 94 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
#line 95 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 98 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 99 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf1Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;::exit(___);}







#line 110 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 104 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 105 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;::exit(___);}











#line 120 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 112 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 113 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf2Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;::exit(___);}







#line 124 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 118 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 119 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;::exit(___);}











#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 127 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 128 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf3Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;::exit(___);}







#line 139 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 133 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 134 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;::exit(___);}











#line 149 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 141 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 142 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf1DLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;::exit(___);}







#line 153 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 147 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 148 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;::exit(___);}











#line 163 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 155 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 156 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf2DLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}







#line 167 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 161 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 162 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;::exit(___);}











#line 177 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 169 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 170 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surfCubemapread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;::exit(___);}







#line 181 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 175 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 176 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;::exit(___);}











#line 191 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 183 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 184 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surfCubemapLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int layerface, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;::exit(___);}







#line 195 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 189 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 190 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;::exit(___);}











#line 205 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 197 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 198 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf1Dwrite(T val, ::cudaSurfaceObject_t obj, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;::exit(___);}







#line 209 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 203 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 204 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf2Dwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;::exit(___);}







#line 215 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 209 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 210 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf3Dwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;::exit(___);}







#line 221 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 215 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 216 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf1DLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;::exit(___);}







#line 227 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 221 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 222 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surf2DLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}







#line 233 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 227 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 228 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surfCubemapwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;::exit(___);}







#line 239 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"

__pragma(warning(push))
__pragma(warning(disable : 4505)) 

#line 233 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 234 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
surfCubemapLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int layerface, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;::exit(___);}







#line 245 "D:\\Programming\\CUDA\\v12.4\\include\\surface_indirect_functions.h"
#line 3641 "D:\\Programming\\CUDA\\v12.4\\include\\crt/device_functions.h"
extern "C" unsigned __stdcall __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
#line 68 "D:\\Programming\\CUDA\\v12.4\\include\\device_launch_parameters.h"
extern "C" {
#line 71 "D:\\Programming\\CUDA\\v12.4\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx; 
#line 72 "D:\\Programming\\CUDA\\v12.4\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_blockIdx; 
#line 73 "D:\\Programming\\CUDA\\v12.4\\include\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_blockDim; 
#line 74 "D:\\Programming\\CUDA\\v12.4\\include\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_gridDim; 
#line 75 "D:\\Programming\\CUDA\\v12.4\\include\\device_launch_parameters.h"
extern const int __device_builtin_variable_warpSize; 
#line 80 "D:\\Programming\\CUDA\\v12.4\\include\\device_launch_parameters.h"
}
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstddef"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstddef"
namespace std { 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstddef"
using ::ptrdiff_t;
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstddef"
using max_align_t = double; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstddef"
using nullptr_t = decltype(nullptr); 
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstddef"
}
#line 101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstddef"
using std::max_align_t;
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstddef"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\initializer_list"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\initializer_list"
namespace std { 
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\initializer_list"
template < class _Elem >
class initializer_list {
public :
    using value_type = _Elem;
    using reference = const _Elem &;
    using const_reference = const _Elem &;
    using size_type = size_t;

    using iterator = const _Elem *;
    using const_iterator = const _Elem *;

    constexpr initializer_list ( ) noexcept : _First ( nullptr ), _Last ( nullptr ) { }

    constexpr initializer_list ( const _Elem * _First_arg, const _Elem * _Last_arg ) noexcept
        : _First ( _First_arg ), _Last ( _Last_arg ) { }

    [ [ nodiscard ] ] constexpr const _Elem * begin ( ) const noexcept {
        return _First;
    }

    [ [ nodiscard ] ] constexpr const _Elem * end ( ) const noexcept {
        return _Last;
    }

    [ [ nodiscard ] ] constexpr size_t size ( ) const noexcept {
        return static_cast < size_t > ( _Last - _First );
    }

private :
    const _Elem * _First;
    const _Elem * _Last;
};
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\initializer_list"
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * begin ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . begin ( );
}
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\initializer_list"
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * end ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . end ( );
}
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\initializer_list"
}
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\initializer_list"
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef signed char int8_t; 
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef short int16_t; 
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef int int32_t; 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef __int64 int64_t; 
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned char uint8_t; 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned short uint16_t; 
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned uint32_t; 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned __int64 uint64_t; 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef signed char int_least8_t; 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef short int_least16_t; 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef int int_least32_t; 
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef __int64 int_least64_t; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned char uint_least8_t; 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned short uint_least16_t; 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned uint_least32_t; 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned __int64 uint_least64_t; 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef signed char int_fast8_t; 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef int int_fast16_t; 
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef int int_fast32_t; 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef __int64 int_fast64_t; 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned char uint_fast8_t; 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned uint_fast16_t; 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned uint_fast32_t; 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned __int64 uint_fast64_t; 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef __int64 intmax_t; 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
typedef unsigned __int64 uintmax_t; 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdint.h"
#pragma warning(pop)
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
namespace std { 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int8_t;
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int16_t;
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int32_t;
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int64_t;
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint8_t;
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint16_t;
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint32_t;
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint64_t;
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_least8_t;
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_least16_t;
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_least32_t;
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_least64_t;
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_least8_t;
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_least16_t;
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_least32_t;
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_least64_t;
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_fast8_t;
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_fast16_t;
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_fast32_t;
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_fast64_t;
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_fast8_t;
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_fast16_t;
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_fast32_t;
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_fast64_t;
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::intmax_t;
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::intptr_t;
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uintmax_t;
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uintptr_t;
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int8_t;
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int16_t;
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int32_t;
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int64_t;
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint8_t;
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint16_t;
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint32_t;
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint64_t;
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_least8_t;
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_least16_t;
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_least32_t;
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_least64_t;
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_least8_t;
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_least16_t;
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_least32_t;
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_least64_t;
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_fast8_t;
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_fast16_t;
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_fast32_t;
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::int_fast64_t;
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_fast8_t;
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_fast16_t;
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_fast32_t;
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uint_fast64_t;
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::intmax_t;
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::intptr_t;
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uintmax_t;
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
using ::uintptr_t;
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
}
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
}
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdint"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
namespace std { 
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > constexpr bool 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Always_false = false; 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< bool _First_value, class _First, class ..._Rest> 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Conjunction { 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _First; 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _True, class _Next, class ..._Rest> 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Conjunction< true, _True, _Next, _Rest...>  { 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename std::_Conjunction< _Next::value, _Next, _Rest...> ::type; 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class ..._Traits> 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct conjunction : public true_type { }; 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _First, class ..._Rest> 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct conjunction< _First, _Rest...>  : public _Conjunction< _First::value, _First, _Rest...> ::type { 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class ..._Traits> constexpr bool 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
conjunction_v = (conjunction< _Traits...> ::value); 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Trait> 
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct negation : public bool_constant< !(static_cast< bool>(_Trait::value))>  { }; 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Trait> constexpr bool 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
negation_v = (negation< _Trait> ::value); 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_void_v = is_same_v< remove_cv_t< _Ty> , void> ; 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_void : public bool_constant< is_void_v< _Ty> >  { }; 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class ..._Types> using void_t = void; 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Identity { 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using _Identity_t = typename _Identity< _Ty> ::type; 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct add_const { 
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = const _Ty; 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using add_const_t = typename add_const< _Ty> ::type; 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct add_volatile { 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = volatile _Ty; 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using add_volatile_t = typename add_volatile< _Ty> ::type; 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct add_cv { 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = const volatile _Ty; 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using add_cv_t = typename add_cv< _Ty> ::type; 
#line 102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class  = void> 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Add_reference { 
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Lvalue = _Ty; 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Rvalue = _Ty; 
#line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Add_reference< _Ty, void_t< _Ty &> >  { 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Lvalue = _Ty &; 
#line 111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Rvalue = _Ty &&; 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct add_lvalue_reference { 
#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename _Add_reference< _Ty> ::_Lvalue; 
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using add_lvalue_reference_t = typename _Add_reference< _Ty> ::_Lvalue; 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct add_rvalue_reference { 
#line 124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename _Add_reference< _Ty> ::_Rvalue; 
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using add_rvalue_reference_t = typename _Add_reference< _Ty> ::_Rvalue; 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
add_rvalue_reference_t < _Ty > declval ( ) noexcept {
    static_assert ( _Always_false < _Ty >, "Calling declval is ill-formed, see N4950 [declval]/2." );
}
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_extent { 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_extent< _Ty [_Ix]>  { 
#line 142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_extent< _Ty []>  { 
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using remove_extent_t = typename remove_extent< _Ty> ::type; 
#line 153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_all_extents { 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, size_t _Ix> 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_all_extents< _Ty [_Ix]>  { 
#line 160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename std::remove_all_extents< _Ty> ::type; 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_all_extents< _Ty []>  { 
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename std::remove_all_extents< _Ty> ::type; 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using remove_all_extents_t = typename remove_all_extents< _Ty> ::type; 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_pointer { 
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_pointer< _Ty *>  { 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_pointer< _Ty *const>  { 
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_pointer< _Ty *volatile>  { 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct remove_pointer< _Ty *const volatile>  { 
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using remove_pointer_t = typename remove_pointer< _Ty> ::type; 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class  = void> 
#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Add_pointer { 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Ty; 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Add_pointer< _Ty, void_t< remove_reference_t< _Ty>  *> >  { 
#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = remove_reference_t< _Ty>  *; 
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct add_pointer { 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename _Add_pointer< _Ty> ::type; 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using add_pointer_t = typename _Add_pointer< _Ty> ::type; 
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > constexpr bool 
#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_array_v = false; 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, size_t _Nx> constexpr bool 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_array_v< _Ty [_Nx]>  = true; 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_array_v< _Ty []>  = true; 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_array : public bool_constant< is_array_v< _Ty> >  { }; 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > constexpr bool 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_lvalue_reference_v = false; 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_lvalue_reference_v< _Ty &>  = true; 
#line 255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_lvalue_reference : public bool_constant< is_lvalue_reference_v< _Ty> >  { }; 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > constexpr bool 
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_rvalue_reference_v = false; 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_rvalue_reference_v< _Ty &&>  = true; 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_rvalue_reference : public bool_constant< is_rvalue_reference_v< _Ty> >  { }; 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > constexpr bool 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_reference_v = false; 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_reference_v< _Ty &>  = true; 
#line 273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_reference_v< _Ty &&>  = true; 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_reference : public bool_constant< is_reference_v< _Ty> >  { }; 
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > constexpr bool 
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_pointer_v = false; 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_pointer_v< _Ty *>  = true; 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_pointer_v< _Ty *const>  = true; 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_pointer_v< _Ty *volatile>  = true; 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_pointer_v< _Ty *const volatile>  = true; 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_pointer : public bool_constant< is_pointer_v< _Ty> >  { }; 
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_null_pointer_v = is_same_v< remove_cv_t< _Ty> , std::nullptr_t> ; 
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_null_pointer : public bool_constant< is_null_pointer_v< _Ty> >  { }; 
#line 304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_union : public bool_constant< __is_union(_Ty)>  { }; 
#line 307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_union_v = __is_union(_Ty); 
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_class : public bool_constant< __is_class(_Ty)>  { }; 
#line 313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_class_v = __is_class(_Ty); 
#line 316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_fundamental_v = (is_arithmetic_v< _Ty>  || is_void_v< _Ty> ) || is_null_pointer_v< _Ty> ; 
#line 319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_fundamental : public bool_constant< is_fundamental_v< _Ty> >  { }; 
#line 322 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To> 
#line 323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_convertible : public bool_constant< __is_convertible_to(_From, _To)>  { 
#line 325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To> constexpr bool 
#line 328 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_convertible_v = __is_convertible_to(_From, _To); 
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 332 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_convertible< _Ty &, volatile _Ty &>  : public true_type { }; 
#line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_convertible< volatile _Ty &, volatile _Ty &>  : public true_type { }; 
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_convertible< _Ty &, const volatile _Ty &>  : public true_type { }; 
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 341 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_convertible< volatile _Ty &, const volatile _Ty &>  : public true_type { }; 
#line 343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_convertible_v< _Ty &, volatile _Ty &>  = true; 
#line 346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 347 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_convertible_v< volatile _Ty &, volatile _Ty &>  = true; 
#line 349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_convertible_v< _Ty &, const volatile _Ty &>  = true; 
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_convertible_v< volatile _Ty &, const volatile _Ty &>  = true; 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_enum : public bool_constant< __is_enum(_Ty)>  { }; 
#line 359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_enum_v = __is_enum(_Ty); 
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_compound : public bool_constant< !is_fundamental_v< _Ty> >  { }; 
#line 373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_compound_v = (!is_fundamental_v< _Ty> ); 
#line 499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class ..._Types> 
#line 500 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Arg_types { }; 
#line 502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1> 
#line 503 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Arg_types< _Ty1>  { 
#line 504 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using argument_type = _Ty1; 
#line 505 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 507 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 508 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Arg_types< _Ty1, _Ty2>  { 
#line 509 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using first_argument_type = _Ty1; 
#line 510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using second_argument_type = _Ty2; 
#line 511 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 513 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 514 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_memfunptr { 
#line 515 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Bool_type = false_type; 
#line 516 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; 
#line 541 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...)>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; 
#line 564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 565 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_member_function_pointer_v = (_Is_memfunptr< remove_cv_t< _Ty> > ::_Bool_type::value); 
#line 568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 569 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_member_function_pointer : public bool_constant< is_member_function_pointer_v< _Ty> >  { }; 
#line 571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > constexpr bool 
#line 572 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_const_v = false; 
#line 574 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 575 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_const_v< const _Ty>  = true; 
#line 577 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 578 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_const : public bool_constant< is_const_v< _Ty> >  { }; 
#line 580 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > constexpr bool 
#line 581 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_volatile_v = false; 
#line 583 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 584 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_volatile_v< volatile _Ty>  = true; 
#line 586 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 587 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_volatile : public bool_constant< is_volatile_v< _Ty> >  { }; 
#line 589 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 590 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_function_v = ((!is_const_v< const _Ty> ) && (!is_reference_v< _Ty> )); 
#line 593 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 594 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_function : public bool_constant< is_function_v< _Ty> >  { }; 
#line 596 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 597 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_object_v = is_const_v< const _Ty>  && (!is_void_v< _Ty> ); 
#line 600 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 601 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_object : public bool_constant< is_object_v< _Ty> >  { }; 
#line 603 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > 
#line 604 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_member_object_pointer { 
#line 605 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool value = false; 
#line 606 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 608 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 609 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_member_object_pointer< _Ty1 _Ty2::*>  { 
#line 610 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool value = (!is_function_v< _Ty1> ); 
#line 611 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Class_type = _Ty2; 
#line 612 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 618 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 619 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_member_object_pointer_v = (_Is_member_object_pointer< remove_cv_t< _Ty> > ::value); 
#line 622 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 623 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_member_object_pointer : public bool_constant< is_member_object_pointer_v< _Ty> >  { }; 
#line 629 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 630 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_member_pointer_v = is_member_object_pointer_v< _Ty>  || is_member_function_pointer_v< _Ty> ; 
#line 633 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 634 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_member_pointer : public bool_constant< is_member_pointer_v< _Ty> >  { }; 
#line 636 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 637 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_scalar_v = (((is_arithmetic_v< _Ty>  || is_enum_v< _Ty> ) || is_pointer_v< _Ty> ) || is_member_pointer_v< _Ty> ) || is_null_pointer_v< _Ty> ; 
#line 640 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 641 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_scalar : public bool_constant< is_scalar_v< _Ty> >  { }; 
#line 643 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_pod : public bool_constant< __is_pod(_Ty)>  { }; 
#line 646 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 647 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_pod_v = __is_pod(_Ty); 
#line 649 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 650 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_empty : public bool_constant< __is_empty(_Ty)>  { }; 
#line 652 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 653 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_empty_v = __is_empty(_Ty); 
#line 655 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 656 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_polymorphic : public bool_constant< __is_polymorphic(_Ty)>  { }; 
#line 658 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 659 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_polymorphic_v = __is_polymorphic(_Ty); 
#line 661 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 662 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_abstract : public bool_constant< __is_abstract(_Ty)>  { }; 
#line 664 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 665 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_abstract_v = __is_abstract(_Ty); 
#line 667 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 668 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_final : public bool_constant< __is_final(_Ty)>  { }; 
#line 670 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 671 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_final_v = __is_final(_Ty); 
#line 673 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_standard_layout : public bool_constant< __is_standard_layout(_Ty)>  { }; 
#line 676 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 677 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_standard_layout_v = __is_standard_layout(_Ty); 
#line 680 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 681 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_literal_type : public bool_constant< __is_literal_type(_Ty)>  { 
#line 683 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 685 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 686 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_literal_type_v = __is_literal_type(_Ty); 
#line 690 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 691 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivial : public bool_constant< __is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty)>  { 
#line 693 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 695 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 696 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivial_v = (__is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty)); 
#line 705 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 706 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_copyable : public bool_constant< __is_trivially_copyable(_Ty)>  { 
#line 708 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 710 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 711 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_copyable_v = __is_trivially_copyable(_Ty); 
#line 713 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 714 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct has_virtual_destructor : public bool_constant< __has_virtual_destructor(_Ty)>  { 
#line 716 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 718 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 719 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
has_virtual_destructor_v = __has_virtual_destructor(_Ty); 
#line 748 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class ..._Args> 
#line 749 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_constructible : public bool_constant< __is_constructible(_Ty, _Args...)>  { 
#line 751 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 753 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class ..._Args> constexpr bool 
#line 754 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_constructible_v = __is_constructible(_Ty, _Args...); 
#line 756 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 757 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_copy_constructible : public bool_constant< __is_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 759 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 761 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 762 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 764 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 765 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_default_constructible : public bool_constant< __is_constructible(_Ty)>  { 
#line 767 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 769 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 770 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_default_constructible_v = __is_constructible(_Ty); 
#line 772 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class  = void> 
#line 773 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_implicitly_default_constructible : public false_type { 
#line 775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 777 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> void _Implicitly_default_construct(const _Ty &); 
#line 780 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 781 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_implicitly_default_constructible< _Ty, void_t< decltype(_Implicitly_default_construct< _Ty> ({}))> >  : public true_type { 
#line 782 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 784 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 785 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_move_constructible : public bool_constant< __is_constructible(_Ty, _Ty)>  { 
#line 787 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 789 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 790 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_move_constructible_v = __is_constructible(_Ty, _Ty); 
#line 792 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _To, class _From> 
#line 793 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_assignable : public bool_constant< __is_assignable(_To, _From)>  { }; 
#line 795 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _To, class _From> constexpr bool 
#line 796 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_assignable_v = __is_assignable(_To, _From); 
#line 802 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _To, class _From> using _Is_assignable_no_precondition_check = is_assignable< _To, _From> ; 
#line 806 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 807 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_copy_assignable : public bool_constant< __is_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 810 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 812 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 813 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_copy_assignable_v = __is_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 826 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using _Is_copy_assignable_no_precondition_check = is_copy_assignable< _Ty> ; 
#line 829 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 830 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_copy_assignable_unchecked_v = is_copy_assignable_v< _Ty> ; 
#line 833 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 834 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_move_assignable : public bool_constant< __is_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 836 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 838 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 839 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_move_assignable_v = __is_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 850 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using _Is_move_assignable_no_precondition_check = is_move_assignable< _Ty> ; 
#line 853 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 854 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_move_assignable_unchecked_v = is_move_assignable_v< _Ty> ; 
#line 857 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 858 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_destructible : public bool_constant< __is_destructible(_Ty)>  { 
#line 860 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 862 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 863 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_destructible_v = __is_destructible(_Ty); 
#line 865 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class ..._Args> 
#line 866 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_constructible : public bool_constant< __is_trivially_constructible(_Ty, _Args...)>  { 
#line 868 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 870 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class ..._Args> constexpr bool 
#line 871 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...); 
#line 873 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 874 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_copy_constructible : public bool_constant< __is_trivially_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 877 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 879 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 880 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_copy_constructible_v = __is_trivially_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 883 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 884 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_default_constructible : public bool_constant< __is_trivially_constructible(_Ty)>  { 
#line 886 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 888 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 889 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_default_constructible_v = __is_trivially_constructible(_Ty); 
#line 891 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 892 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_move_constructible : public bool_constant< __is_trivially_constructible(_Ty, _Ty)>  { 
#line 894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 896 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 897 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty); 
#line 899 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _To, class _From> 
#line 900 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_assignable : public bool_constant< __is_trivially_assignable(_To, _From)>  { 
#line 902 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 904 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _To, class _From> constexpr bool 
#line 905 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_assignable_v = __is_trivially_assignable(_To, _From); 
#line 907 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 908 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_copy_assignable : public bool_constant< __is_trivially_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 911 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 913 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 914 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_copy_assignable_v = __is_trivially_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 917 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 918 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_move_assignable : public bool_constant< __is_trivially_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 920 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 922 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 923 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_move_assignable_v = __is_trivially_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 925 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 926 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_trivially_destructible : public bool_constant< __is_trivially_destructible(_Ty)>  { 
#line 928 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 931 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_trivially_destructible_v = __is_trivially_destructible(_Ty); 
#line 933 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class ..._Args> 
#line 934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_nothrow_constructible : public bool_constant< __is_nothrow_constructible(_Ty, _Args...)>  { 
#line 936 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 938 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class ..._Args> constexpr bool 
#line 939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...); 
#line 941 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 942 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_nothrow_copy_constructible : public bool_constant< __is_nothrow_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 946 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 948 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 949 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_nothrow_copy_constructible_v = __is_nothrow_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 952 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 953 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_nothrow_default_constructible : public bool_constant< __is_nothrow_constructible(_Ty)>  { 
#line 955 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 957 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 958 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty); 
#line 960 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 961 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_nothrow_move_constructible : public bool_constant< __is_nothrow_constructible(_Ty, _Ty)>  { 
#line 963 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 965 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 966 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty); 
#line 968 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _To, class _From> 
#line 969 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_nothrow_assignable : public bool_constant< __is_nothrow_assignable(_To, _From)>  { 
#line 971 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 973 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _To, class _From> constexpr bool 
#line 974 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From); 
#line 976 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 977 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_nothrow_copy_assignable : public bool_constant< __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 980 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 982 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 983 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_nothrow_copy_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 986 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 987 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_nothrow_move_assignable : public bool_constant< __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 989 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 991 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 992 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 994 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 995 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_nothrow_destructible : public bool_constant< __is_nothrow_destructible(_Ty)>  { 
#line 998 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1000 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1001 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_nothrow_destructible_v = __is_nothrow_destructible(_Ty); 
#line 1003 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, bool  = is_integral_v< _Ty> > 
#line 1004 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Sign_base { 
#line 1005 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Uty = remove_cv_t< _Ty> ; 
#line 1007 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool _Signed = ((static_cast< _Uty>(-1)) < (static_cast< _Uty>(0))); 
#line 1008 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool _Unsigned = (!_Signed); 
#line 1009 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1011 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1012 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Sign_base< _Ty, false>  { 
#line 1014 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool _Signed = is_floating_point_v< _Ty> ; 
#line 1015 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool _Unsigned = false; 
#line 1016 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1018 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1019 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_signed : public bool_constant< _Sign_base< _Ty> ::_Signed>  { }; 
#line 1021 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1022 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_signed_v = (_Sign_base< _Ty> ::_Signed); 
#line 1024 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1025 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_unsigned : public bool_constant< _Sign_base< _Ty> ::_Unsigned>  { }; 
#line 1027 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1028 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_unsigned_v = (_Sign_base< _Ty> ::_Unsigned); 
#line 1030 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 1031 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_nonbool_integral = is_integral_v< _Ty>  && (!is_same_v< remove_cv_t< _Ty> , bool> ); 
#line 1033 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< bool > 
#line 1034 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Select { 
#line 1035 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class > using _Apply = _Ty1; 
#line 1037 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1040 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Select< false>  { 
#line 1041 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class , class _Ty2> using _Apply = _Ty2; 
#line 1043 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1045 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t > struct _Make_signed2; 
#line 1049 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Make_signed2< 1Ui64>  { 
#line 1050 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > using _Apply = signed char; 
#line 1052 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1055 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Make_signed2< 2Ui64>  { 
#line 1056 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > using _Apply = short; 
#line 1058 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1061 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Make_signed2< 4Ui64>  { 
#line 1062 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using _Apply = typename _Select< is_same_v< _Ty, long>  || is_same_v< _Ty, unsigned long> > ::template _Apply< long, int> ; 
#line 1065 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1068 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Make_signed2< 8Ui64>  { 
#line 1069 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > using _Apply = __int64; 
#line 1071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1073 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using _Make_signed1 = typename _Make_signed2< sizeof(_Ty)> ::template _Apply< _Ty> ; 
#line 1077 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1078 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct make_signed { 
#line 1079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static_assert((_Is_nonbool_integral< _Ty>  || is_enum_v< _Ty> ), "make_signed<T> requires that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool type.");
#line 1083 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename remove_cv< _Ty> ::template _Apply< _Make_signed1> ; 
#line 1084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1086 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using make_signed_t = typename make_signed< _Ty> ::type; 
#line 1089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t > struct _Make_unsigned2; 
#line 1093 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Make_unsigned2< 1Ui64>  { 
#line 1094 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > using _Apply = unsigned char; 
#line 1096 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1099 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Make_unsigned2< 2Ui64>  { 
#line 1100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > using _Apply = unsigned short; 
#line 1102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Make_unsigned2< 4Ui64>  { 
#line 1106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using _Apply = typename _Select< is_same_v< _Ty, long>  || is_same_v< _Ty, unsigned long> > ::template _Apply< unsigned long, unsigned> ; 
#line 1110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Make_unsigned2< 8Ui64>  { 
#line 1114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class > using _Apply = unsigned __int64; 
#line 1116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using _Make_unsigned1 = typename _Make_unsigned2< sizeof(_Ty)> ::template _Apply< _Ty> ; 
#line 1122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct make_unsigned { 
#line 1124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static_assert((_Is_nonbool_integral< _Ty>  || is_enum_v< _Ty> ), "make_unsigned<T> requires that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool type.");
#line 1128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename remove_cv< _Ty> ::template _Apply< _Make_unsigned1> ; 
#line 1129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using make_unsigned_t = typename make_unsigned< _Ty> ::type; 
#line 1134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Rep >
constexpr make_unsigned_t < _Rep > _Unsigned_value ( _Rep _Val ) {
    return static_cast < make_unsigned_t < _Rep >> ( _Val );
}
#line 1139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct alignment_of : public integral_constant< unsigned __int64, __alignof(_Ty)>  { }; 
#line 1142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 1143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
alignment_of_v = __alignof(_Ty); 
#line 1145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, size_t _Len> 
#line 1146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
union _Align_type { 
#line 1147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Ty _Val; 
#line 1148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
char _Pad[_Len]; 
#line 1149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align, class _Ty, bool _Ok> struct _Aligned; 
#line 1154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align, class _Ty> 
#line 1155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Aligned< _Len, _Align, _Ty, true>  { 
#line 1156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Align_type< _Ty, _Len> ; 
#line 1157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align> 
#line 1160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Aligned< _Len, _Align, double, false>  { 
#line 1167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static_assert((_Always_false< _Aligned> ), "You\'ve instantiated std::aligned_storage<Len, Align> with an extended alignment (in other words, Align > alignof(max_align_t))." " Before VS 2017 15.8, the member \"type\" would non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 wa" "s fixed to handle this correctly, but the fix inherently changes layout and breaks binary compatibility (*only* for uses of alig" "ned_storage with extended alignments). To suppress this error, please define either (1) _ENABLE_EXTENDED_ALIGNED_STORAGE to conf" "irm that you want a type with an extended alignment, or (2) _DISABLE_EXTENDED_ALIGNED_STORAGE to get the old non-conforming beha" "vior.");
#line 1177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Align_type< max_align_t, _Len> ; 
#line 1179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align> 
#line 1182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Aligned< _Len, _Align, int, false>  { 
#line 1183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Next = double; 
#line 1184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename std::_Aligned< _Len, _Align, double, _Fits> ::type; 
#line 1186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align> 
#line 1189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Aligned< _Len, _Align, short, false>  { 
#line 1190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Next = int; 
#line 1191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename std::_Aligned< _Len, _Align, int, _Fits> ::type; 
#line 1193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align> 
#line 1196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Aligned< _Len, _Align, char, false>  { 
#line 1197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Next = short; 
#line 1198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename std::_Aligned< _Len, _Align, short, _Fits> ::type; 
#line 1200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align = 8Ui64> 
#line 1204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Aligned_storage { 
#line 1205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Next = char; 
#line 1206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename _Aligned< _Len, _Align, char, _Fits> ::type; 
#line 1208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align = 8Ui64> using _Aligned_storage_t = typename _Aligned_storage< _Len, _Align> ::type; 
#line 1213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align = 8Ui64> 
#line 1214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct aligned_storage { 
#line 1215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Aligned_storage_t< _Len, _Align> ; 
#line 1216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, size_t _Align = 8Ui64> using aligned_storage_t = _Aligned_storage_t< _Len, _Align> ; 
#line 1221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t ..._Vals> struct _Maximum; 
#line 1225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Maximum< >  : public integral_constant< unsigned __int64, 0Ui64>  { }; 
#line 1227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Val> 
#line 1228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Maximum< _Val>  : public integral_constant< unsigned __int64, _Val>  { }; 
#line 1230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _First, size_t _Second, size_t ..._Rest> 
#line 1231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Maximum< _First, _Second, _Rest...>  : public std::_Maximum< (((_First) < _Second) ? _Second : _First), _Rest...> ::type { 
#line 1233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, class ..._Types> 
#line 1236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct aligned_union { 
#line 1238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr size_t _Max_len = (_Maximum< _Len, sizeof(_Types)...> ::value); 
#line 1239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr size_t alignment_value = (_Maximum< __alignof(_Types)...> ::value); 
#line 1241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Aligned_storage_t< _Max_len, alignment_value> ; 
#line 1242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 1245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
#line 1247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(pop)) 
#line 1249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, bool  = is_enum_v< _Ty> > 
#line 1250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Underlying_type { 
#line 1251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = __underlying_type(_Ty); 
#line 1252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Underlying_type< _Ty, false>  { }; 
#line 1257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct underlying_type : public _Underlying_type< _Ty>  { }; 
#line 1260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using underlying_type_t = typename _Underlying_type< _Ty> ::type; 
#line 1263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 1264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
rank_v = (0); 
#line 1266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, size_t _Nx> constexpr size_t 
#line 1267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
rank_v< _Ty [_Nx]>  = rank_v< _Ty>  + 1; 
#line 1269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr size_t 
#line 1270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
rank_v< _Ty []>  = rank_v< _Ty>  + 1; 
#line 1272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct rank : public integral_constant< unsigned __int64, rank_v< _Ty> >  { }; 
#line 1275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, unsigned _Ix = 0U> constexpr size_t 
#line 1276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
extent_v = (0); 
#line 1278 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, size_t _Nx> constexpr size_t 
#line 1279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
extent_v< _Ty [_Nx], 0>  = _Nx; 
#line 1281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, unsigned _Ix, size_t _Nx> constexpr size_t 
#line 1282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
extent_v< _Ty [_Nx], _Ix>  = extent_v< _Ty, _Ix - (1)> ; 
#line 1284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, unsigned _Ix> constexpr size_t 
#line 1285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
extent_v< _Ty [], _Ix>  = extent_v< _Ty, _Ix - (1)> ; 
#line 1287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, unsigned _Ix = 0U> 
#line 1288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct extent : public integral_constant< unsigned __int64, extent_v< _Ty, _Ix> >  { }; 
#line 1290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Base, class _Derived> 
#line 1291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct is_base_of : public bool_constant< __is_base_of(_Base, _Derived)>  { 
#line 1293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Base, class _Derived> constexpr bool 
#line 1296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
is_base_of_v = __is_base_of(_Base, _Derived); 
#line 1298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct decay { 
#line 1300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Ty1 = remove_reference_t< _Ty> ; 
#line 1301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Ty2 = typename _Select< is_function_v< _Ty1> > ::template _Apply< add_pointer< _Ty1> , remove_cv< _Ty1> > ; 
#line 1302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = typename _Select< is_array_v< _Ty1> > ::template _Apply< add_pointer< remove_extent_t< _Ty1> > , _Ty2> ::type; 
#line 1303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using decay_t = typename decay< _Ty> ::type; 
#line 1308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> using _Conditional_type = decltype(false ? std::declval< _Ty1> () : std::declval< _Ty2> ()); 
#line 1325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2, class  = void> 
#line 1326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Decayed_cond_oper { }; 
#line 1329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 1330 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Decayed_cond_oper< _Ty1, _Ty2, void_t< _Conditional_type< _Ty1, _Ty2> > >  { 
#line 1331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = decay_t< _Conditional_type< _Ty1, _Ty2> > ; 
#line 1332 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class ..._Ty> struct common_type; 
#line 1337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class ..._Ty> using common_type_t = typename common_type< _Ty...> ::type; 
#line 1341 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct common_type< >  { }; 
#line 1343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1> 
#line 1344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct common_type< _Ty1>  : public std::common_type< _Ty1, _Ty1>  { }; 
#line 1346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2, class _Decayed1 = decay_t< _Ty1> , class _Decayed2 = decay_t< _Ty2> > 
#line 1347 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Common_type2 : public common_type< _Decayed1, _Decayed2>  { }; 
#line 1349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 1350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Common_type2< _Ty1, _Ty2, _Ty1, _Ty2>  : public _Decayed_cond_oper< _Ty1, _Ty2>  { }; 
#line 1352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 1353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct common_type< _Ty1, _Ty2>  : public _Common_type2< _Ty1, _Ty2>  { }; 
#line 1355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Void, class _Ty1, class _Ty2, class ..._Rest> 
#line 1356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Common_type3 { }; 
#line 1358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2, class ..._Rest> 
#line 1359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Common_type3< void_t< common_type_t< _Ty1, _Ty2> > , _Ty1, _Ty2, _Rest...>  : public common_type< common_type_t< _Ty1, _Ty2> , _Rest...>  { 
#line 1360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2, class ..._Rest> 
#line 1363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct common_type< _Ty1, _Ty2, _Rest...>  : public _Common_type3< void, _Ty1, _Ty2, _Rest...>  { }; 
#line 1365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> _Ty _Returns_exactly() noexcept; 
#line 1551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Type, template< class ...>  class _Template> constexpr bool 
#line 1552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_specialization_v = false; 
#line 1553 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< template< class ...>  class _Template, class ..._Types> constexpr bool 
#line 1554 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_specialization_v< _Template< _Types...> , _Template>  = true; 
#line 1556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Type, template< class ...>  class _Template> 
#line 1557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_specialization : public bool_constant< _Is_specialization_v< _Type, _Template> >  { }; 
#line 1559 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1560 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] constexpr _Ty &&forward(remove_reference_t< _Ty>  &_Arg) noexcept { 
#line 1561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
return static_cast< _Ty &&>(_Arg); 
#line 1562 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
} 
#line 1564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1565 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] constexpr _Ty &&forward(remove_reference_t< _Ty>  &&_Arg) noexcept { 
#line 1566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static_assert((!is_lvalue_reference_v< _Ty> ), "bad forward call");
#line 1567 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
return static_cast< _Ty &&>(_Arg); 
#line 1568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
} 
#line 1570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] constexpr remove_reference_t< _Ty>  &&move(_Ty &&_Arg) noexcept { 
#line 1572 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
return static_cast< remove_reference_t< _Ty>  &&>(_Arg); 
#line 1573 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
} 
#line 1575 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] constexpr
    conditional_t < ! is_nothrow_move_constructible_v < _Ty > && is_copy_constructible_v < _Ty >, const _Ty &, _Ty && >
    move_if_noexcept ( _Ty & _Arg ) noexcept {
    return :: std :: move ( _Arg );
}
#line 1582 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty * addressof ( _Ty & _Val ) noexcept {
    return __builtin_addressof ( _Val );
}
#line 1587 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
const _Ty * addressof ( const _Ty && ) = delete;
#line 1590 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable : 5215)
#pragma warning(disable : 5216)
#line 1599 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1600 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] _Ty 
#line 1599 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Fake_copy_init(_Ty) noexcept; 
#line 1610 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma warning(pop)
#line 1612 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
class reference_wrapper;
#line 1619 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
enum class _Invoker_strategy { 
#line 1620 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Functor, 
#line 1621 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Pmf_object, 
#line 1622 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Pmf_refwrap, 
#line 1623 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Pmf_pointer, 
#line 1624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Pmd_object, 
#line 1625 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Pmd_refwrap, 
#line 1626 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Pmd_pointer
#line 1627 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1629 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker_functor { 
#line 1630 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Functor; 
#line 1632 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Callable, class ... _Types >
    static constexpr auto _Call ( _Callable && _Obj, _Types && ... _Args ) noexcept (
        noexcept ( static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... ) ) )
        -> decltype ( static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... ) ) {
        return static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... );
    }
#line 1638 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1640 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker_pmf_object { 
#line 1641 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_object; 
#line 1643 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Decayed, class _Ty1, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1649 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1651 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker_pmf_refwrap { 
#line 1652 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_refwrap; 
#line 1654 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Decayed, class _Refwrap, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Refwrap _Rw, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1660 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1662 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker_pmf_pointer { 
#line 1663 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_pointer; 
#line 1665 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Decayed, class _Ty1, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1671 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1673 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker_pmd_object { 
#line 1674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_object; 
#line 1676 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Decayed, class _Ty1 >
    static constexpr auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept -> decltype ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmd ) {
        return static_cast < _Ty1 && > ( _Arg1 ) .* _Pmd;
    }
#line 1680 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1682 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker_pmd_refwrap { 
#line 1683 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_refwrap; 
#line 1685 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Decayed, class _Refwrap >
    static constexpr auto _Call ( _Decayed _Pmd, _Refwrap _Rw ) noexcept -> decltype ( _Rw . get ( ) .* _Pmd ) {
        return _Rw . get ( ) .* _Pmd;
    }
#line 1689 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1691 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker_pmd_pointer { 
#line 1692 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_pointer; 
#line 1694 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Decayed, class _Ty1 >
    static constexpr auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept ( noexcept ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd ) )
        -> decltype ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd ) {
        return ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd;
    }
#line 1699 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1701 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class _Ty1, class _Removed_cvref = _Remove_cvref_t< _Callable> , bool 
#line 1702 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_pmf = is_member_function_pointer_v< _Removed_cvref> , bool 
#line 1703 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_pmd = is_member_object_pointer_v< _Removed_cvref> > struct _Invoker1; 
#line 1706 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1707 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, true, false>  : public conditional_t< is_same_v< typename _Is_memfunptr< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> >  || is_base_of_v< typename _Is_memfunptr< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> > , _Invoker_pmf_object, conditional_t< _Is_specialization_v< _Remove_cvref_t< _Ty1> , reference_wrapper> , _Invoker_pmf_refwrap, _Invoker_pmf_pointer> >  { 
#line 1712 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1714 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1715 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, false, true>  : public conditional_t< is_same_v< typename _Is_member_object_pointer< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> >  || is_base_of_v< typename _Is_member_object_pointer< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> > , _Invoker_pmd_object, conditional_t< _Is_specialization_v< _Remove_cvref_t< _Ty1> , reference_wrapper> , _Invoker_pmd_refwrap, _Invoker_pmd_pointer> >  { 
#line 1721 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1723 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1724 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, false, false>  : public _Invoker_functor { }; 
#line 1726 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Callable >
inline auto invoke ( _Callable && _Obj ) noexcept ( noexcept ( static_cast < _Callable && > ( _Obj ) ( ) ) )
    -> decltype ( static_cast < _Callable && > ( _Obj ) ( ) ) {
    return static_cast < _Callable && > ( _Obj ) ( );
}
#line 1732 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Callable, class _Ty1, class ... _Types2 >
inline auto invoke ( _Callable && _Obj, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
    noexcept ( _Invoker1 < _Callable, _Ty1 > :: _Call (
        static_cast < _Callable && > ( _Obj ), static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... ) ) )
    -> decltype ( _Invoker1 < _Callable, _Ty1 > :: _Call (
        static_cast < _Callable && > ( _Obj ), static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... ) ) {
    if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Functor ) {
        return static_cast < _Callable && > ( _Obj ) ( static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_object ) {
        return ( static_cast < _Ty1 && > ( _Arg1 ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_refwrap ) {
        return ( _Arg1 . get ( ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_pointer ) {
        return ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmd_object ) {
        return static_cast < _Ty1 && > ( _Arg1 ) .* _Obj;
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmd_refwrap ) {
        return _Arg1 . get ( ) .* _Obj;
    } else {
        ;
        return ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Obj;
    }
}
#line 1756 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma warning(push)
#pragma warning(disable : 4242)
#pragma warning(disable : 4244)
#pragma warning(disable : 4365)
#line 1761 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To, bool  = is_convertible_v< _From, _To> , bool  = is_void_v< _To> > constexpr bool 
#line 1762 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_nothrow_convertible_v = noexcept(_Fake_copy_init< _To> (std::declval< _From> ())); 
#line 1764 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma warning(pop)
#line 1766 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To, bool _IsVoid> constexpr bool 
#line 1767 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_nothrow_convertible_v< _From, _To, false, _IsVoid>  = false; 
#line 1769 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To> constexpr bool 
#line 1770 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_nothrow_convertible_v< _From, _To, true, true>  = true; 
#line 1772 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To> 
#line 1773 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_nothrow_convertible : public bool_constant< _Is_nothrow_convertible_v< _From, _To, is_convertible_v< _From, _To> , is_void_v< _To> > >  { 
#line 1775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1785 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To, class  = void> 
#line 1786 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoke_convertible : public false_type { }; 
#line 1788 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To> 
#line 1789 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoke_convertible< _From, _To, void_t< decltype(std::_Fake_copy_init< _To> (std::_Returns_exactly< _From> ()))> >  : public true_type { 
#line 1790 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1792 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _From, class _To> 
#line 1793 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoke_nothrow_convertible : public bool_constant< noexcept(std::_Fake_copy_init< _To> (std::_Returns_exactly< _From> ()))>  { 
#line 1794 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1796 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Result, bool _Nothrow> 
#line 1797 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoke_traits_common { 
#line 1798 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using type = _Result; 
#line 1799 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Is_invocable = true_type; 
#line 1800 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Is_nothrow_invocable = bool_constant< _Nothrow> ; 
#line 1801 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Rx> using _Is_invocable_r = bool_constant< disjunction_v< is_void< _Rx> , _Invoke_convertible< type, _Rx> > > ; 
#line 1803 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Rx> using _Is_nothrow_invocable_r = bool_constant< conjunction_v< _Is_nothrow_invocable, disjunction< is_void< _Rx> , conjunction< _Invoke_convertible< type, _Rx> , _Invoke_nothrow_convertible< type, _Rx> > > > > ; 
#line 1807 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1809 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Void, class _Callable> 
#line 1810 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoke_traits_zero { 
#line 1812 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Is_invocable = false_type; 
#line 1813 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Is_nothrow_invocable = false_type; 
#line 1814 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Rx> using _Is_invocable_r = false_type; 
#line 1816 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Rx> using _Is_nothrow_invocable_r = false_type; 
#line 1818 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1820 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable> using _Decltype_invoke_zero = decltype(std::declval< _Callable> ()()); 
#line 1823 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable> 
#line 1824 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoke_traits_zero< void_t< _Decltype_invoke_zero< _Callable> > , _Callable>  : public _Invoke_traits_common< _Decltype_invoke_zero< _Callable> , noexcept(std::declval< _Callable> ()())>  { 
#line 1825 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1827 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Void, class ..._Types> 
#line 1828 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoke_traits_nonzero { 
#line 1830 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Is_invocable = false_type; 
#line 1831 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Is_nothrow_invocable = false_type; 
#line 1832 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Rx> using _Is_invocable_r = false_type; 
#line 1834 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Rx> using _Is_nothrow_invocable_r = false_type; 
#line 1836 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1838 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class _Ty1, class ..._Types2> using _Decltype_invoke_nonzero = decltype(_Invoker1< _Callable, _Ty1> ::_Call(std::declval< _Callable> (), std::declval< _Ty1> (), std::declval< _Types2> ()...)); 
#line 1842 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class _Ty1, class ..._Types2> 
#line 1843 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Invoke_traits_nonzero< void_t< _Decltype_invoke_nonzero< _Callable, _Ty1, _Types2...> > , _Callable, _Ty1, _Types2...>  : public _Invoke_traits_common< _Decltype_invoke_nonzero< _Callable, _Ty1, _Types2...> , noexcept(_Invoker1< _Callable, _Ty1> ::_Call(std::declval< _Callable> (), std::declval< _Ty1> (), std::declval< _Types2> ()...))>  { 
#line 1846 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1848 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class ..._Args> using _Select_invoke_traits = conditional_t< sizeof...(_Args) == (0), _Invoke_traits_zero< void, _Callable> , _Invoke_traits_nonzero< void, _Callable, _Args...> > ; 
#line 1853 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Fty> 
#line 1854 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct result_of { 
#line 1855 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static_assert((_Always_false< _Fty> ), "result_of<CallableType> is invalid; use result_of<CallableType(zero or more argument types)> instead.");
#line 1857 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1865 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class ..._Args> struct result_of< _Callable __cdecl (_Args ...)>  : public _Select_invoke_traits< _Callable, _Args...>  { }; template< class _Callable, class ..._Args> struct result_of< _Callable __vectorcall (_Args ...)>  : public _Select_invoke_traits< _Callable, _Args...>  { }; 
#line 1868 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 1869 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using result_of_t = typename result_of< _Ty> ::type; 
#line 1871 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(pop)) 
#line 1874 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Callable, class ..._Args> using _Invoke_result_t = typename _Select_invoke_traits< _Callable, _Args...> ::type; 
#line 1877 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Rx, class _Callable, class ..._Args> using _Is_invocable_r_ = typename conditional< sizeof...(_Args) == (0), _Invoke_traits_zero< void, _Callable> , _Invoke_traits_nonzero< void, _Callable, _Args...> > ::type::template _Is_invocable_r< _Rx> ; 
#line 1880 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Rx, class _Callable, class ..._Args> 
#line 1881 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_invocable_r : public _Is_invocable_r_< _Rx, _Callable, _Args...>  { 
#line 1883 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1954 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1955 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Function_args { }; 
#line 1963 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...)>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...)>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; 
#line 1972 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...)>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile &&>  { using result_type = _Ret; }; 
#line 1975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class  = void> 
#line 1976 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Weak_result_type { }; 
#line 1978 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 1979 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1980 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Weak_result_type< _Ty, void_t< typename _Ty::result_type> >  { 
#line 1981 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using result_type = typename _Ty::result_type; 
#line 1982 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1983 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(pop)) 
#line 1985 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class  = void> 
#line 1986 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Weak_argument_type : public _Weak_result_type< _Ty>  { }; 
#line 1988 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 1989 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 1990 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Weak_argument_type< _Ty, void_t< typename _Ty::argument_type> >  : public _Weak_result_type< _Ty>  { 
#line 1992 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using argument_type = typename _Ty::argument_type; 
#line 1993 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 1994 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(pop)) 
#line 1996 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class  = void> 
#line 1997 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Weak_binary_args : public _Weak_argument_type< _Ty>  { }; 
#line 1999 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 2000 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 2001 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Weak_binary_args< _Ty, void_t< typename _Ty::first_argument_type, typename _Ty::second_argument_type> >  : public _Weak_argument_type< _Ty>  { 
#line 2004 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using first_argument_type = typename _Ty::first_argument_type; 
#line 2005 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using second_argument_type = typename _Ty::second_argument_type; 
#line 2006 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2007 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(pop)) 
#line 2009 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> using _Weak_types = conditional_t< is_function_v< remove_pointer_t< _Ty> > , _Function_args< remove_pointer_t< _Ty> > , conditional_t< is_member_function_pointer_v< _Ty> , _Is_memfunptr< remove_cv_t< _Ty> > , _Weak_binary_args< _Ty> > > ; 
#line 2013 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> void _Refwrap_ctor_fun(_Identity_t< _Ty &> ) noexcept; 
#line 2015 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
void _Refwrap_ctor_fun ( _Identity_t < _Ty && > ) = delete;
#line 2018 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class _Uty, class  = void> 
#line 2019 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Refwrap_has_ctor_from : public false_type { }; 
#line 2021 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty, class _Uty> 
#line 2022 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Refwrap_has_ctor_from< _Ty, _Uty, void_t< decltype(std::_Refwrap_ctor_fun< _Ty> (std::declval< _Uty> ()))> >  : public true_type { 
#line 2023 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2025 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
class reference_wrapper

    : public _Weak_types < _Ty >

{
public :
    static_assert ( is_object_v < _Ty > || is_function_v < _Ty >,
        "reference_wrapper<T> requires T to be an object type or a function type." );

    using type = _Ty;

    template < class _Uty, enable_if_t < conjunction_v < negation < is_same < _Remove_cvref_t < _Uty >, reference_wrapper >>,
                                          _Refwrap_has_ctor_from < _Ty, _Uty >>,
                              int > = 0 >
    inline reference_wrapper ( _Uty && _Val ) noexcept (
        noexcept ( :: std :: _Refwrap_ctor_fun < _Ty > ( :: std :: declval < _Uty > ( ) ) ) ) {
        _Ty & _Ref = static_cast < _Uty && > ( _Val );
        _Ptr = :: std :: addressof ( _Ref );
    }

    inline operator _Ty & ( ) const noexcept {
        return * _Ptr;
    }

    [ [ nodiscard ] ] inline _Ty & get ( ) const noexcept {
        return * _Ptr;
    }

private :
    _Ty * _Ptr { };

public :
    template < class ... _Types >
    inline auto operator ( ) ( _Types && ... _Args ) const
        noexcept ( noexcept ( :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... ) ) )
            -> decltype ( :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... ) ) {
        return :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... );
    }
};
#line 2071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < _Ty > ref ( _Ty & _Val ) noexcept {
    return reference_wrapper < _Ty > ( _Val );
}
#line 2076 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
void ref ( const _Ty && ) = delete;
#line 2079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < _Ty > ref ( reference_wrapper < _Ty > _Val ) noexcept {
    return _Val;
}
#line 2084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < const _Ty > cref ( const _Ty & _Val ) noexcept {
    return reference_wrapper < const _Ty > ( _Val );
}
#line 2089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
void cref ( const _Ty && ) = delete;
#line 2092 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < const _Ty > cref ( reference_wrapper < _Ty > _Val ) noexcept {
    return _Val;
}
#line 2117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> struct _Is_swappable; 
#line 2120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> struct _Is_nothrow_swappable; 
#line 2126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty, int _Enabled = 0 >

inline void swap ( _Ty &, _Ty & ) noexcept ( is_nothrow_move_constructible_v < _Ty > && is_nothrow_move_assignable_v < _Ty > );
#line 2130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty, size_t _Size, enable_if_t < _Is_swappable < _Ty > :: value, int > = 0 >
inline void swap ( _Ty ( & ) [ _Size ], _Ty ( & ) [ _Size ] ) noexcept ( _Is_nothrow_swappable < _Ty > :: value );
#line 2133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2, class  = void> 
#line 2134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Swappable_with_helper : public false_type { }; 
#line 2136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 2137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Swappable_with_helper< _Ty1, _Ty2, void_t< decltype(swap(std::declval< _Ty1> (), std::declval< _Ty2> ()))> >  : public true_type { 
#line 2138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 2141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_swappable_with : public bool_constant< conjunction_v< _Swappable_with_helper< _Ty1, _Ty2> , _Swappable_with_helper< _Ty2, _Ty1> > >  { 
#line 2144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 2147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_swappable : public _Is_swappable_with< add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< _Ty> > ::type { 
#line 2149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 2152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Swap_cannot_throw : public bool_constant< noexcept(swap(std::declval< _Ty1> (), std::declval< _Ty2> ())) && noexcept(swap(std::declval< _Ty2> (), std::declval< _Ty1> ()))>  { 
#line 2156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 2159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_nothrow_swappable_with : public bool_constant< conjunction_v< _Is_swappable_with< _Ty1, _Ty2> , _Swap_cannot_throw< _Ty1, _Ty2> > >  { 
#line 2163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 2166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_nothrow_swappable : public _Is_nothrow_swappable_with< add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< _Ty> > ::type { 
#line 2169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
namespace _Has_ADL_swap_detail { 
#line 2210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
void swap(); 
#line 2213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class , class  = void> 
#line 2214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Has_ADL_swap : public false_type { }; 
#line 2215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 2216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Has_ADL_swap< _Ty, void_t< decltype(swap(std::declval< _Ty &> (), std::declval< _Ty &> ()))> >  : public true_type { }; 
#line 2217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}
#line 2218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Has_ADL_swap_detail::_Has_ADL_swap;
#line 2220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 2221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Is_trivially_swappable_v = conjunction_v< is_trivially_destructible< _Ty> , is_trivially_move_constructible< _Ty> , is_trivially_move_assignable< _Ty> , negation< _Has_ADL_swap_detail::_Has_ADL_swap< _Ty> > > ; 
#line 2229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Ty> 
#line 2230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_trivially_swappable : public bool_constant< _Is_trivially_swappable_v< _Ty> >  { 
#line 2232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Bitmask >
[ [ nodiscard ] ] constexpr bool _Bitmask_includes_any ( _Bitmask _Left, _Bitmask _Elements ) noexcept {
    return ( _Left & _Elements ) != _Bitmask { };
}
#line 2302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Bitmask >
[ [ nodiscard ] ] constexpr bool _Bitmask_includes_all ( _Bitmask _Left, _Bitmask _Elements ) noexcept {
    return ( _Left & _Elements ) == _Elements;
}
#line 2310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
constexpr size_t _FNV_offset_basis = 14695981039346656037Ui64; 
#line 2311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
constexpr size_t _FNV_prime = 1099511628211Ui64; 
#line 2317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] inline size_t _Fnv1a_append_bytes(size_t _Val, const unsigned char *const _First, const size_t 
#line 2318 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Count) noexcept { 
#line 2319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
for (size_t _Idx = (0); _Idx < _Count; ++_Idx) { 
#line 2320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Val ^= (static_cast< size_t>(_First[_Idx])); 
#line 2321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Val *= _FNV_prime; 
#line 2322 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}  
#line 2324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
return _Val; 
#line 2325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
} 
#line 2327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] size_t _Fnv1a_append_range ( const size_t _Val, const _Ty * const _First,
    const _Ty * const _Last ) noexcept {
    static_assert ( is_trivial_v < _Ty >, "Only trivial types can be directly hashed." );
    const auto _Firstb = reinterpret_cast < const unsigned char * > ( _First );
    const auto _Lastb = reinterpret_cast < const unsigned char * > ( _Last );
    return _Fnv1a_append_bytes ( _Val, _Firstb, static_cast < size_t > ( _Lastb - _Firstb ) );
}
#line 2336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Kty >
[ [ nodiscard ] ] size_t _Fnv1a_append_value (
    const size_t _Val, const _Kty & _Keyval ) noexcept {
    static_assert ( is_trivial_v < _Kty >, "Only trivial types can be directly hashed." );
    return _Fnv1a_append_bytes ( _Val, & reinterpret_cast < const unsigned char & > ( _Keyval ), sizeof ( _Kty ) );
}
#line 2343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Kty >
[ [ nodiscard ] ] size_t _Hash_representation ( const _Kty & _Keyval ) noexcept {
    return _Fnv1a_append_value ( _FNV_offset_basis, _Keyval );
}
#line 2348 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Kty >
[ [ nodiscard ] ] size_t _Hash_array_representation (
    const _Kty * const _First, const size_t _Count ) noexcept {
    static_assert ( is_trivial_v < _Kty >, "Only trivial types can be directly hashed." );
    return _Fnv1a_append_bytes (
        _FNV_offset_basis, reinterpret_cast < const unsigned char * > ( _First ), _Count * sizeof ( _Kty ) );
}
#line 2356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Kty >
struct hash;
#line 2359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Kty, bool _Enabled >
struct _Conditionally_enabled_hash {
    using argument_type = _Kty;
    using result_type = size_t;

    [ [ nodiscard ] ] size_t operator ( ) ( const _Kty & _Keyval ) const
        noexcept ( noexcept ( hash < _Kty > :: _Do_hash ( _Keyval ) ) ) {
        return hash < _Kty > :: _Do_hash ( _Keyval );
    }
};
#line 2370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _Kty> 
#line 2371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Conditionally_enabled_hash< _Kty, false>  { 
#line 2372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Conditionally_enabled_hash() = delete;
#line 2373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Conditionally_enabled_hash(const _Conditionally_enabled_hash &) = delete;
#line 2374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Conditionally_enabled_hash(_Conditionally_enabled_hash &&) = delete;
#line 2375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Conditionally_enabled_hash &operator=(const _Conditionally_enabled_hash &) = delete;
#line 2376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
_Conditionally_enabled_hash &operator=(_Conditionally_enabled_hash &&) = delete;
#line 2377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Kty >
struct hash : _Conditionally_enabled_hash < _Kty, ! is_const_v < _Kty > && ! is_volatile_v < _Kty >
                                                    && ( is_enum_v < _Kty > || is_integral_v < _Kty > || is_pointer_v < _Kty > ) > {

    static size_t _Do_hash ( const _Kty & _Keyval ) noexcept {
        return _Hash_representation ( _Keyval );
    }
};
#line 2389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma pack(8)
template<> 
#line 2389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct hash< float>  { 
#line 2390 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using argument_type = float; 
#line 2391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using result_type = size_t; 
#line 2392 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] size_t operator()(const float _Keyval) const noexcept { 
#line 2393 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
return _Hash_representation((_Keyval == (0.0F)) ? (0.0F) : _Keyval); 
#line 2394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
} 
#line 2395 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#pragma pack()
#line 2398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma pack(8)
template<> 
#line 2398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct hash< double>  { 
#line 2399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using argument_type = double; 
#line 2400 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using result_type = size_t; 
#line 2401 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] size_t operator()(const double _Keyval) const noexcept { 
#line 2402 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
return _Hash_representation((_Keyval == (0.0)) ? (0.0) : _Keyval); 
#line 2403 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
} 
#line 2404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#pragma pack()
#line 2407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma pack(8)
template<> 
#line 2407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct hash< long double>  { 
#line 2408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using argument_type = long double; 
#line 2409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using result_type = size_t; 
#line 2410 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] size_t operator()(const long double _Keyval) const noexcept { 
#line 2411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
return _Hash_representation((_Keyval == (0.0L)) ? (0.0L) : _Keyval); 
#line 2412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
} 
#line 2413 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#pragma pack()
#line 2416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma pack(8)
template<> 
#line 2416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct hash< std::nullptr_t>  { 
#line 2417 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using argument_type = nullptr_t; 
#line 2418 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using result_type = size_t; 
#line 2419 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
[[nodiscard]] size_t operator()(nullptr_t) const noexcept { 
#line 2420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
void *_Null{((void *)0i64)}; 
#line 2421 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
return _Hash_representation(_Null); 
#line 2422 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
} 
#line 2423 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#pragma pack()
template< class _Kty, class  = void> 
#pragma pack(8)
#line 2426 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_nothrow_hashable : public false_type { }; 
#pragma pack()
template< class _Kty> 
#pragma pack(8)
#line 2429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
struct _Is_nothrow_hashable< _Kty, void_t< decltype(hash< _Kty> {}(std::declval< const _Kty &> ()))> >  : public bool_constant< noexcept(hash< _Kty> {}(std::declval< const _Kty &> ()))>  { 
#line 2430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#pragma pack()
template < class _Ty = void >
struct less {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left < _Right ) ) ) {
        return _Left < _Right;
    }
};
#line 2445 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct less<>  { 
#line 2446 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right );
    }
#line 2453 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using is_transparent = int; 
#line 2454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2458 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< class _FloatingType> struct _Floating_type_traits; 
#line 2462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Floating_type_traits< float>  { 
#line 2463 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Mantissa_bits = 24; 
#line 2464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Exponent_bits = 8; 
#line 2465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Maximum_binary_exponent = 127; 
#line 2466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Minimum_binary_exponent = (-126); 
#line 2467 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Exponent_bias = 127; 
#line 2468 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Sign_shift = 31; 
#line 2469 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Exponent_shift = 23; 
#line 2471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Uint_type = uint32_t; 
#line 2473 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint32_t _Exponent_mask = 255U; 
#line 2474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint32_t _Normal_mantissa_mask = 16777215U; 
#line 2475 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint32_t _Denormal_mantissa_mask = 8388607U; 
#line 2476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint32_t _Special_nan_mantissa_mask = 4194304U; 
#line 2477 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint32_t _Shifted_sign_mask = 2147483648U; 
#line 2478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint32_t _Shifted_exponent_mask = 2139095040U; 
#line 2479 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2482 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Floating_type_traits< double>  { 
#line 2483 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Mantissa_bits = 53; 
#line 2484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Exponent_bits = 11; 
#line 2485 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Maximum_binary_exponent = 1023; 
#line 2486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Minimum_binary_exponent = (-1022); 
#line 2487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Exponent_bias = 1023; 
#line 2488 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Sign_shift = 63; 
#line 2489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr int32_t _Exponent_shift = 52; 
#line 2491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using _Uint_type = uint64_t; 
#line 2493 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint64_t _Exponent_mask = (2047U); 
#line 2494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint64_t _Normal_mantissa_mask = 9007199254740991Ui64; 
#line 2495 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint64_t _Denormal_mantissa_mask = 4503599627370495Ui64; 
#line 2496 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint64_t _Special_nan_mantissa_mask = 2251799813685248Ui64; 
#line 2497 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint64_t _Shifted_sign_mask = 9223372036854775808Ui64; 
#line 2498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
static constexpr uint64_t _Shifted_exponent_mask = 9218868437227405312Ui64; 
#line 2499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}; 
#line 2502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template<> struct _Floating_type_traits< long double>  : public std::_Floating_type_traits< double>  { }; 
#line 2506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template < class _To, class _From,
    enable_if_t < conjunction_v < bool_constant < sizeof ( _To ) == sizeof ( _From ) >, is_trivially_copyable < _To >,
                    is_trivially_copyable < _From > >,
        int > = 0 >
[ [ nodiscard ] ] constexpr _To _Bit_cast ( const _From & _Val ) noexcept {
    return __builtin_bit_cast ( _To, _Val );
}
#line 2514 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
template< bool _IsConst, class _Ty> using _Maybe_const = conditional_t< _IsConst, const _Ty, _Ty> ; 
#line 2518 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 2519 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 2520 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::add_const;
#line 2521 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::add_cv;
#line 2522 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::add_pointer;
#line 2523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::add_volatile;
#line 2524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::aligned_storage;
#line 2525 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::alignment_of;
#line 2526 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::conditional;
#line 2527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::decay;
#line 2528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::enable_if;
#line 2529 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::extent;
#line 2530 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::false_type;
#line 2531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::has_virtual_destructor;
#line 2532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::integral_constant;
#line 2533 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_abstract;
#line 2534 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_arithmetic;
#line 2535 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_array;
#line 2536 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_base_of;
#line 2537 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_class;
#line 2538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_compound;
#line 2539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_const;
#line 2540 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_convertible;
#line 2541 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_empty;
#line 2542 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_enum;
#line 2543 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_floating_point;
#line 2544 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_function;
#line 2545 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_fundamental;
#line 2546 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_integral;
#line 2547 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_member_function_pointer;
#line 2548 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_member_object_pointer;
#line 2549 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_member_pointer;
#line 2550 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_object;
#line 2551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_pod;
#line 2552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_pointer;
#line 2553 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_polymorphic;
#line 2554 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_reference;
#line 2555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_same;
#line 2556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_scalar;
#line 2557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_signed;
#line 2558 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_union;
#line 2559 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_unsigned;
#line 2560 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_void;
#line 2561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::is_volatile;
#line 2562 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::make_signed;
#line 2563 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::make_unsigned;
#line 2564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::rank;
#line 2565 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::remove_all_extents;
#line 2566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::remove_const;
#line 2567 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::remove_cv;
#line 2568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::remove_extent;
#line 2569 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::remove_pointer;
#line 2570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::remove_reference;
#line 2571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::remove_volatile;
#line 2572 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::true_type;
#line 2573 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::cref;
#line 2574 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::ref;
#line 2575 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::reference_wrapper;
#line 2577 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::result_of;
#line 2579 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
using std::hash;
#line 2580 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}
#line 2581 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
__pragma(warning(pop)) 
#line 2584 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
}
#line 2593 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\type_traits"
#pragma warning(pop)
#pragma pack ( pop )
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
namespace std { 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty, _Ty ... _Vals >
struct integer_sequence {
    static_assert ( is_integral_v < _Ty >, "integer_sequence<T, I...> requires T to be an integral type." );

    using value_type = _Ty;

    [ [ nodiscard ] ] static constexpr size_t size ( ) noexcept {
        return sizeof ... ( _Vals );
    }
};
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Ty, _Ty _Size> using make_integer_sequence = __make_integer_seq< integer_sequence, _Ty, _Size> ; 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t ..._Vals> using index_sequence = integer_sequence< unsigned __int64, _Vals...> ; 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Size> using make_index_sequence = make_integer_sequence< unsigned __int64, _Size> ; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr const _Ty & ( max ) ( const _Ty & _Left, const _Ty & _Right, _Pr _Pred ) noexcept (
    noexcept ( _Pred ( _Left, _Right ) ) ) {

    return _Pred ( _Left, _Right ) ? _Right : _Left;
}
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
#pragma warning(push)
#pragma warning(disable : 28285)
template < class _Ty >
[ [ nodiscard ] ] constexpr const _Ty &
    ( max ) ( const _Ty & _Left, const _Ty & _Right ) noexcept ( noexcept ( _Left < _Right ) ) {

    return _Left < _Right ? _Right : _Left;
}
#pragma warning(pop)
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty >, _Pr );
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > );
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr const _Ty & ( min ) ( const _Ty & _Left, const _Ty & _Right, _Pr _Pred ) noexcept (
    noexcept ( _Pred ( _Right, _Left ) ) ) {

    return _Pred ( _Right, _Left ) ? _Right : _Left;
}
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
#pragma warning(push)
#pragma warning(disable : 28285)
template < class _Ty >
[ [ nodiscard ] ] constexpr const _Ty &
    ( min ) ( const _Ty & _Left, const _Ty & _Right ) noexcept ( noexcept ( _Right < _Left ) ) {

    return _Right < _Left ? _Right : _Left;
}
#pragma warning(pop)
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty >, _Pr );
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > );
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty, size_t _Size, enable_if_t < _Is_swappable < _Ty > :: value, int > >
inline void swap ( _Ty ( & _Left ) [ _Size ], _Ty ( & _Right ) [ _Size ] ) noexcept ( _Is_nothrow_swappable < _Ty > :: value ) {
    if ( & _Left != & _Right ) {
        _Ty * _First1 = _Left;
        _Ty * _Last1 = _First1 + _Size;
        _Ty * _First2 = _Right;
        for (; _First1 != _Last1; ++ _First1, ++ _First2 ) {
            swap ( * _First1, * _First2 );
        }
    }
}
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty, int _Enabled >

inline void swap ( _Ty & _Left, _Ty & _Right ) noexcept (
    is_nothrow_move_constructible_v < _Ty > && is_nothrow_move_assignable_v < _Ty > ) {
    _Ty _Tmp = :: std :: move ( _Left );
    _Left = :: std :: move ( _Right );
    _Right = :: std :: move ( _Tmp );
}
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
#pragma pack(8)
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct piecewise_construct_t { 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
explicit piecewise_construct_t() = default;
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#pragma pack()
constexpr piecewise_construct_t piecewise_construct{}; 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class ..._Types> class tuple; 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2 >
struct pair;
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Ty, size_t _Size> class array; 
#line 149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Tuple> struct tuple_size; 
#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Ty> constexpr size_t 
#line 153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
tuple_size_v = (tuple_size< _Ty> ::value); 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class _Tuple> struct tuple_element; 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class _Tuple> using tuple_element_t = typename tuple_element< _Index, _Tuple> ::type; 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class ..._Types> 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr auto &&
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
_Tuple_get(tuple< _Types...>  && _Tuple) noexcept; 
#line 164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class ..._Types> 
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr tuple_element_t< _Index, tuple< _Types...> >  &
#line 164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
get(tuple< _Types...>  & _Tuple) noexcept; 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class ..._Types> 
#line 168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr const tuple_element_t< _Index, tuple< _Types...> >  &
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
get(const tuple< _Types...>  & _Tuple) noexcept; 
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class ..._Types> 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr tuple_element_t< _Index, tuple< _Types...> >  &&
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
get(tuple< _Types...>  && _Tuple) noexcept; 
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class ..._Types> 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr const tuple_element_t< _Index, tuple< _Types...> >  &&
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
get(const tuple< _Types...>  && _Tuple) noexcept; 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Idx, class _Ty, size_t _Size> 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr _Ty &
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
get(array< _Ty, _Size>  & _Arr) noexcept; 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Idx, class _Ty, size_t _Size> 
#line 180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr const _Ty &
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
get(const array< _Ty, _Size>  & _Arr) noexcept; 
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Idx, class _Ty, size_t _Size> 
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr _Ty &&
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
get(array< _Ty, _Size>  && _Arr) noexcept; 
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Idx, class _Ty, size_t _Size> 
#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
[[nodiscard]] constexpr const _Ty &&
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
get(const array< _Ty, _Size>  && _Arr) noexcept; 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2 >
struct pair {
    using first_type = _Ty1;
    using second_type = _Ty2;

    template < class _Uty1 = _Ty1, class _Uty2 = _Ty2,
        enable_if_t < conjunction_v < is_default_constructible < _Uty1 >, is_default_constructible < _Uty2 >>, int > = 0 >
    constexpr explicit (
        ! conjunction_v < _Is_implicitly_default_constructible < _Uty1 >, _Is_implicitly_default_constructible < _Uty2 >> )
        pair ( ) noexcept (
            is_nothrow_default_constructible_v < _Uty1 > && is_nothrow_default_constructible_v < _Uty2 > )
        : first ( ), second ( ) { }

    template < class _Uty1 = _Ty1, class _Uty2 = _Ty2,
        enable_if_t < conjunction_v < is_copy_constructible < _Uty1 >, is_copy_constructible < _Uty2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < const _Uty1 &, _Uty1 >, is_convertible < const _Uty2 &, _Uty2 >> )
        pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 ) noexcept (
            is_nothrow_copy_constructible_v < _Uty1 > && is_nothrow_copy_constructible_v < _Uty2 > )
        : first ( _Val1 ), second ( _Val2 ) { }




    template < class _Other1, class _Other2,

        enable_if_t < conjunction_v < is_constructible < _Ty1, _Other1 >, is_constructible < _Ty2, _Other2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < _Other1, _Ty1 >, is_convertible < _Other2, _Ty2 >> )
        pair ( _Other1 && _Val1, _Other2 && _Val2 ) noexcept (
            is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )
        : first ( :: std :: forward < _Other1 > ( _Val1 ) ), second ( :: std :: forward < _Other2 > ( _Val2 ) ) {
    }

    pair ( const pair & ) = default;
    pair ( pair && ) = default;










    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < is_constructible < _Ty1, const _Other1 & >, is_constructible < _Ty2, const _Other2 & >>,
            int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < const _Other1 &, _Ty1 >, is_convertible < const _Other2 &, _Ty2 >> )
        pair ( const pair < _Other1, _Other2 > & _Right ) noexcept ( is_nothrow_constructible_v < _Ty1, const _Other1 & > &&
                is_nothrow_constructible_v < _Ty2, const _Other2 & > )
        : first ( _Right . first ), second ( _Right . second ) { }

    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < is_constructible < _Ty1, _Other1 >, is_constructible < _Ty2, _Other2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < _Other1, _Ty1 >, is_convertible < _Other2, _Ty2 >> )
        pair ( pair < _Other1, _Other2 > && _Right ) noexcept (
            is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )
        : first ( :: std :: forward < _Other1 > ( _Right . first ) ), second ( :: std :: forward < _Other2 > ( _Right . second ) ) { }




























    template < class _Tuple1, class _Tuple2, size_t ... _Indices1, size_t ... _Indices2 >
    constexpr pair ( _Tuple1 & _Val1, _Tuple2 & _Val2, index_sequence < _Indices1 ... >, index_sequence < _Indices2 ... > )
        : first ( _Tuple_get < _Indices1 > ( :: std :: move ( _Val1 ) ) ... ), second ( _Tuple_get < _Indices2 > ( :: std :: move ( _Val2 ) ) ... ) { }

    template < class ... _Types1, class ... _Types2 >
    inline pair ( piecewise_construct_t, tuple < _Types1 ... > _Val1, tuple < _Types2 ... > _Val2 )
        : pair ( _Val1, _Val2, index_sequence_for < _Types1 ... > { }, index_sequence_for < _Types2 ... > { } ) { }

    pair & operator = ( const volatile pair & ) = delete;

    template < class _Myself = pair,
        enable_if_t < conjunction_v < _Is_copy_assignable_no_precondition_check < typename _Myself :: first_type >,
                        _Is_copy_assignable_no_precondition_check < typename _Myself :: second_type >>,
            int > = 0 >
    inline pair & operator = ( _Identity_t < const _Myself & > _Right ) noexcept (
        conjunction_v < is_nothrow_copy_assignable < _Ty1 >, is_nothrow_copy_assignable < _Ty2 >> ) {
        first = _Right . first;
        second = _Right . second;
        return * this;
    }















    template < class _Myself = pair,
        enable_if_t < conjunction_v < _Is_move_assignable_no_precondition_check < typename _Myself :: first_type >,
                        _Is_move_assignable_no_precondition_check < typename _Myself :: second_type >>,
            int > = 0 >
    inline pair & operator = ( _Identity_t < _Myself && > _Right ) noexcept (
        conjunction_v < is_nothrow_move_assignable < _Ty1 >, is_nothrow_move_assignable < _Ty2 >> ) {
        first = :: std :: forward < _Ty1 > ( _Right . first );
        second = :: std :: forward < _Ty2 > ( _Right . second );
        return * this;
    }















    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < negation < is_same < pair, pair < _Other1, _Other2 >> >, is_assignable < _Ty1 &, const _Other1 & >,
                        is_assignable < _Ty2 &, const _Other2 & >>,
            int > = 0 >
    inline pair & operator = ( const pair < _Other1, _Other2 > & _Right ) noexcept (
        is_nothrow_assignable_v < _Ty1 &, const _Other1 & > &&
            is_nothrow_assignable_v < _Ty2 &, const _Other2 & > ) {
        first = _Right . first;
        second = _Right . second;
        return * this;
    }















    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < negation < is_same < pair, pair < _Other1, _Other2 >> >, is_assignable < _Ty1 &, _Other1 >,
                        is_assignable < _Ty2 &, _Other2 >>,
            int > = 0 >
    inline pair & operator = ( pair < _Other1, _Other2 > && _Right ) noexcept (
        is_nothrow_assignable_v < _Ty1 &, _Other1 > && is_nothrow_assignable_v < _Ty2 &, _Other2 > ) {
        first = :: std :: forward < _Other1 > ( _Right . first );
        second = :: std :: forward < _Other2 > ( _Right . second );
        return * this;
    }









































    inline void swap ( pair & _Right ) noexcept (
        _Is_nothrow_swappable < _Ty1 > :: value && _Is_nothrow_swappable < _Ty2 > :: value ) {
        using :: std :: swap;
        if ( this != :: std :: addressof ( _Right ) ) {
            swap ( first, _Right . first );
            swap ( second, _Right . second );
        }
    }













    _Ty1 first;
    _Ty2 second;
};
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2,
    enable_if_t < _Is_swappable < _Ty1 > :: value && _Is_swappable < _Ty2 > :: value, int > = 0 >
inline void swap ( pair < _Ty1, _Ty2 > & _Left, pair < _Ty1, _Ty2 > & _Right ) noexcept ( noexcept ( _Left . swap ( _Right ) ) ) {
    _Left . swap ( _Right );
}
#line 489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator == ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Left . first == _Right . first && _Left . second == _Right . second;
}
#line 506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator != ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Left == _Right );
}
#line 512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator < ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Left . first < _Right . first || ( ! ( _Right . first < _Left . first ) && _Left . second < _Right . second );
}
#line 517 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator > ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Right < _Left;
}
#line 522 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator <= ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Right < _Left );
}
#line 527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator >= ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Left < _Right );
}
#line 550 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Ty> 
#line 551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct _Unrefwrap_helper { 
#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using type = _Ty; 
#line 553 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Ty> 
#line 556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct _Unrefwrap_helper< reference_wrapper< _Ty> >  { 
#line 557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using type = _Ty &; 
#line 558 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Ty> using _Unrefwrap_t = typename _Unrefwrap_helper< decay_t< _Ty> > ::type; 
#line 564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr pair < _Unrefwrap_t < _Ty1 >, _Unrefwrap_t < _Ty2 > > make_pair ( _Ty1 && _Val1, _Ty2 && _Val2 ) noexcept (
    is_nothrow_constructible_v < _Unrefwrap_t < _Ty1 >, _Ty1 > &&
        is_nothrow_constructible_v < _Unrefwrap_t < _Ty2 >, _Ty2 > ) {

    using _Mypair = pair < _Unrefwrap_t < _Ty1 >, _Unrefwrap_t < _Ty2 >>;
    return _Mypair ( :: std :: forward < _Ty1 > ( _Val1 ), :: std :: forward < _Ty2 > ( _Val2 ) );
}
#line 573 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
namespace rel_ops { 
#line 574 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty >
     [ [ nodiscard ] ] bool operator != ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Left == _Right );
    }
#line 579 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty >
     [ [ nodiscard ] ] bool operator > ( const _Ty & _Left, const _Ty & _Right ) {
        return _Right < _Left;
    }
#line 584 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty >
     [ [ nodiscard ] ] bool operator <= ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Right < _Left );
    }
#line 589 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty >
     [ [ nodiscard ] ] bool operator >= ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Left < _Right );
    }
#line 593 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}
#line 595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Tuple, class  = void> 
#line 596 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct _Tuple_size_sfinae { }; 
#line 598 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Tuple> 
#line 599 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct _Tuple_size_sfinae< _Tuple, void_t< decltype(tuple_size< _Tuple> ::value)> >  : public integral_constant< unsigned __int64, tuple_size< _Tuple> ::value>  { 
#line 600 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 602 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Tuple> 
#line 603 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_size< const _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 605 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Tuple> 
#line 606 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_size< volatile _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 608 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Tuple> 
#line 609 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_size< const volatile _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 611 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class _Tuple> 
#line 612 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_element< _Index, const _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 613 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 614 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using type = std::add_const_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 615 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 617 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class _Tuple> 
#line 618 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_element< _Index, volatile _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 620 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 621 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using type = std::add_volatile_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 622 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class _Tuple> 
#line 625 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_element< _Index, const volatile _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 627 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 628 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using type = std::add_cv_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 629 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 631 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Ty, size_t _Size> 
#line 632 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_size< array< _Ty, _Size> >  : public integral_constant< unsigned __int64, _Size>  { }; 
#line 634 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Idx, class _Ty, size_t _Size> 
#line 635 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_element< _Idx, array< _Ty, _Size> >  { 
#line 636 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
static_assert((_Idx < _Size), "array index out of bounds");
#line 638 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using type = _Ty; 
#line 639 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 641 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class ..._Types> 
#line 642 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_size< tuple< _Types...> >  : public integral_constant< unsigned __int64, sizeof...(_Types)>  { }; 
#line 644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index> 
#line 645 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_element< _Index, tuple< > >  { 
#line 646 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
static_assert((_Always_false< integral_constant< size_t, _Index> > ), "tuple index out of bounds");
#line 647 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 649 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _This, class ..._Rest> 
#line 650 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_element< 0, tuple< _This, _Rest...> >  { 
#line 651 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using type = _This; 
#line 653 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using _Ttype = tuple< _This, _Rest...> ; 
#line 654 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 656 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Index, class _This, class ..._Rest> 
#line 657 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_element< _Index, tuple< _This, _Rest...> >  : public std::tuple_element< _Index - (1), tuple< _Rest...> >  { 
#line 658 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 660 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< class _Ty1, class _Ty2> 
#line 661 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_size< pair< _Ty1, _Ty2> >  : public integral_constant< unsigned __int64, 2Ui64>  { }; 
#line 663 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template< size_t _Idx, class _Ty1, class _Ty2> 
#line 664 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
struct tuple_element< _Idx, pair< _Ty1, _Ty2> >  { 
#line 665 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
static_assert((_Idx < (2)), "pair index out of bounds");
#line 667 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using type = conditional_t< _Idx == (0), _Ty1, _Ty2> ; 
#line 668 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}; 
#line 670 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return _Pr . first;
    } else {
        return _Pr . second;
    }
}
#line 680 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr _Ty1 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . first;
}
#line 686 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr _Ty2 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . second;
}
#line 692 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return _Pr . first;
    } else {
        return _Pr . second;
    }
}
#line 702 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const _Ty1 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . first;
}
#line 708 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr const _Ty2 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . second;
}
#line 714 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return :: std :: forward < _Ty1 > ( _Pr . first );
    } else {
        return :: std :: forward < _Ty2 > ( _Pr . second );
    }
}
#line 724 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr _Ty1 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < _Ty1 > ( _Pr . first );
}
#line 730 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr _Ty2 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < _Ty2 > ( _Pr . second );
}
#line 736 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return :: std :: forward < const _Ty1 > ( _Pr . first );
    } else {
        return :: std :: forward < const _Ty2 > ( _Pr . second );
    }
}
#line 746 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const _Ty1 && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < const _Ty1 > ( _Pr . first );
}
#line 752 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr const _Ty2 && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < const _Ty2 > ( _Pr . second );
}
#line 758 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty, class _Other = _Ty >
inline _Ty exchange ( _Ty & _Val, _Other && _New_val ) noexcept (
    conjunction_v < is_nothrow_move_constructible < _Ty >, is_nothrow_assignable < _Ty &, _Other >> ) {

    _Ty _Old_val = static_cast < _Ty && > ( _Val );
    _Val = static_cast < _Other && > ( _New_val );
    return _Old_val;
}
#line 767 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty >
[ [ nodiscard ] ] constexpr add_const_t < _Ty > & as_const ( _Ty & _Val ) noexcept {
    return _Val;
}
#line 772 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
template < class _Ty >
void as_const ( const _Ty && ) = delete;
#line 927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 928 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using std::get;
#line 929 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using std::tuple_element;
#line 930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
using std::tuple_size;
#line 931 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}
#line 934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
}
#line 943 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\utility"
#pragma warning(pop)
#pragma pack ( pop )
#line 206 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 207 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaLaunchKernel(const T *
#line 208 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, ::dim3 
#line 209 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
gridDim, ::dim3 
#line 210 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockDim, void **
#line 211 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
args, ::size_t 
#line 212 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
sharedMem = 0, ::cudaStream_t 
#line 213 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream = 0) 
#line 215 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 216 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 217 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 277 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class ...ExpTypes, class ...ActTypes> static __inline ::cudaError_t 
#line 278 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaLaunchKernelEx(const ::cudaLaunchConfig_t *
#line 279 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
config, void (*
#line 280 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kernel)(ExpTypes ...), ActTypes &&...
#line 281 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
args) 
#line 283 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 284 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return [&](ExpTypes ...coercedArgs) { 
#line 285 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
void *pArgs[] = {(&coercedArgs)...}; 
#line 286 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaLaunchKernelExC(config, (const void *)(kernel), pArgs); 
#line 287 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} (std::forward< ActTypes> (args)...); 
#line 288 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 340 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 341 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaLaunchCooperativeKernel(const T *
#line 342 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, ::dim3 
#line 343 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
gridDim, ::dim3 
#line 344 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockDim, void **
#line 345 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
args, ::size_t 
#line 346 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
sharedMem = 0, ::cudaStream_t 
#line 347 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream = 0) 
#line 349 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 350 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 351 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 384 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 385 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
event, unsigned 
#line 386 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags) 
#line 388 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 389 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaEventCreateWithFlags(event, flags); 
#line 390 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 428 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
static __inline cudaError_t cudaGraphInstantiate(cudaGraphExec_t *
#line 429 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pGraphExec, cudaGraph_t 
#line 430 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
graph, cudaGraphNode_t *
#line 431 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pErrorNode, char *
#line 432 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pLogBuffer, size_t 
#line 433 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
bufferSize) 
#line 435 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 436 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
(void)pErrorNode; 
#line 437 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
(void)pLogBuffer; 
#line 438 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
(void)bufferSize; 
#line 439 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGraphInstantiate(pGraphExec, graph, 0); 
#line 440 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 499 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
static __inline cudaError_t cudaMallocHost(void **
#line 500 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
ptr, size_t 
#line 501 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, unsigned 
#line 502 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags) 
#line 504 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 505 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaHostAlloc(ptr, size, flags); 
#line 506 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 508 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 509 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaHostAlloc(T **
#line 510 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
ptr, ::size_t 
#line 511 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, unsigned 
#line 512 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags) 
#line 514 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 515 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 516 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 518 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 519 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaHostGetDevicePointer(T **
#line 520 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pDevice, void *
#line 521 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pHost, unsigned 
#line 522 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags) 
#line 524 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 525 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 526 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 628 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 629 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMallocManaged(T **
#line 630 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
devPtr, ::size_t 
#line 631 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, unsigned 
#line 632 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags = 1) 
#line 634 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 635 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 636 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 646 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> ::cudaError_t 
#line 647 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMemAdvise(T *
#line 648 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
devPtr, ::size_t 
#line 649 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::cudaMemoryAdvise 
#line 650 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
advice, ::cudaMemLocation 
#line 651 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
location) 
#line 653 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 654 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMemAdvise_v2((const void *)devPtr, count, advice, location); 
#line 655 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 657 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 658 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMemPrefetchAsync(T *
#line 659 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
devPtr, ::size_t 
#line 660 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::cudaMemLocation 
#line 661 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
location, unsigned 
#line 662 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags, ::cudaStream_t 
#line 663 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream = 0) 
#line 665 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 666 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMemPrefetchAsync_v2((const void *)devPtr, count, location, flags, stream); 
#line 667 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 749 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 750 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaStreamAttachMemAsync(::cudaStream_t 
#line 751 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream, T *
#line 752 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
devPtr, ::size_t 
#line 753 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
length = 0, unsigned 
#line 754 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags = 4) 
#line 756 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 757 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 758 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 760 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 761 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMalloc(T **
#line 762 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
devPtr, ::size_t 
#line 763 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size) 
#line 765 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 766 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 767 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 769 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 770 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMallocHost(T **
#line 771 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
ptr, ::size_t 
#line 772 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, unsigned 
#line 773 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags = 0) 
#line 775 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 776 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 777 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 779 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 780 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMallocPitch(T **
#line 781 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
devPtr, ::size_t *
#line 782 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pitch, ::size_t 
#line 783 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
width, ::size_t 
#line 784 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
height) 
#line 786 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 787 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 788 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 799 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
static __inline cudaError_t cudaMallocAsync(void **
#line 800 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
ptr, size_t 
#line 801 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, cudaMemPool_t 
#line 802 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
memPool, cudaStream_t 
#line 803 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream) 
#line 805 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 806 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
#line 807 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 809 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 810 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMallocAsync(T **
#line 811 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
ptr, ::size_t 
#line 812 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, ::cudaMemPool_t 
#line 813 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
memPool, ::cudaStream_t 
#line 814 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream) 
#line 816 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 817 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
#line 818 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 820 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 821 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMallocAsync(T **
#line 822 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
ptr, ::size_t 
#line 823 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, ::cudaStream_t 
#line 824 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream) 
#line 826 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 827 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
#line 828 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 830 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 831 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMallocFromPoolAsync(T **
#line 832 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
ptr, ::size_t 
#line 833 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, ::cudaMemPool_t 
#line 834 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
memPool, ::cudaStream_t 
#line 835 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream) 
#line 837 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 838 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
#line 839 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 878 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 879 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMemcpyToSymbol(const T &
#line 880 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, const void *
#line 881 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
src, ::size_t 
#line 882 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 883 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 884 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice) 
#line 886 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 887 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 888 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 932 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 933 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
#line 934 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, const void *
#line 935 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
src, ::size_t 
#line 936 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 937 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 938 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 939 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream = 0) 
#line 941 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 942 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 943 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 980 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 981 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMemcpyFromSymbol(void *
#line 982 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dst, const T &
#line 983 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, ::size_t 
#line 984 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 985 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 986 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost) 
#line 988 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 989 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 990 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1034 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1035 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
#line 1036 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dst, const T &
#line 1037 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, ::size_t 
#line 1038 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 1039 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 1040 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 1041 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
stream = 0) 
#line 1043 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1044 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 1045 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1103 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1104 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGraphAddMemcpyNodeToSymbol(::cudaGraphNode_t *
#line 1105 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pGraphNode, ::cudaGraph_t 
#line 1106 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
graph, const ::cudaGraphNode_t *
#line 1107 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pDependencies, ::size_t 
#line 1108 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
numDependencies, const T &
#line 1109 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, const void *
#line 1110 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
src, ::size_t 
#line 1111 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 1112 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset, ::cudaMemcpyKind 
#line 1113 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind) 
#line 1114 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1115 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
#line 1116 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1174 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1175 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGraphAddMemcpyNodeFromSymbol(::cudaGraphNode_t *
#line 1176 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pGraphNode, ::cudaGraph_t 
#line 1177 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
graph, const ::cudaGraphNode_t *
#line 1178 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
pDependencies, ::size_t 
#line 1179 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
numDependencies, void *
#line 1180 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dst, const T &
#line 1181 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, ::size_t 
#line 1182 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 1183 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset, ::cudaMemcpyKind 
#line 1184 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind) 
#line 1185 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1186 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
#line 1187 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1225 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1226 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGraphMemcpyNodeSetParamsToSymbol(::cudaGraphNode_t 
#line 1227 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
node, const T &
#line 1228 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, const void *
#line 1229 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
src, ::size_t 
#line 1230 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 1231 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset, ::cudaMemcpyKind 
#line 1232 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind) 
#line 1233 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1234 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
#line 1235 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1273 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1274 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGraphMemcpyNodeSetParamsFromSymbol(::cudaGraphNode_t 
#line 1275 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
node, void *
#line 1276 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dst, const T &
#line 1277 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, ::size_t 
#line 1278 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 1279 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset, ::cudaMemcpyKind 
#line 1280 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind) 
#line 1281 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1282 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
#line 1283 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1331 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1332 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGraphExecMemcpyNodeSetParamsToSymbol(::cudaGraphExec_t 
#line 1333 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
hGraphExec, ::cudaGraphNode_t 
#line 1334 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
node, const T &
#line 1335 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, const void *
#line 1336 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
src, ::size_t 
#line 1337 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 1338 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset, ::cudaMemcpyKind 
#line 1339 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind) 
#line 1340 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1341 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
#line 1342 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1390 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1391 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGraphExecMemcpyNodeSetParamsFromSymbol(::cudaGraphExec_t 
#line 1392 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
hGraphExec, ::cudaGraphNode_t 
#line 1393 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
node, void *
#line 1394 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dst, const T &
#line 1395 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol, ::size_t 
#line 1396 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
count, ::size_t 
#line 1397 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
offset, ::cudaMemcpyKind 
#line 1398 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kind) 
#line 1399 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1400 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
#line 1401 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1404 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
static __inline cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, cudaGraphExecUpdateResult *updateResult_out) 
#line 1405 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1406 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGraphExecUpdateResultInfo resultInfo; 
#line 1407 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaError_t status = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo); 
#line 1408 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (hErrorNode_out) { 
#line 1409 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
(*hErrorNode_out) = (resultInfo.errorNode); 
#line 1410 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1411 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (updateResult_out) { 
#line 1412 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
(*updateResult_out) = (resultInfo.result); 
#line 1413 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1414 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1415 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1443 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1444 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaUserObjectCreate(::cudaUserObject_t *
#line 1445 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
object_out, T *
#line 1446 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
objectToWrap, unsigned 
#line 1447 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
initialRefcount, unsigned 
#line 1448 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags) 
#line 1449 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1450 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
#line 1453 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
#line 1456 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1458 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1459 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaUserObjectCreate(::cudaUserObject_t *
#line 1460 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
object_out, T *
#line 1461 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
objectToWrap, unsigned 
#line 1462 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
initialRefcount, ::cudaUserObjectFlags 
#line 1463 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags) 
#line 1464 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1465 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
#line 1466 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1493 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1494 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGetSymbolAddress(void **
#line 1495 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
devPtr, const T &
#line 1496 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol) 
#line 1498 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1499 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 1500 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1525 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1526 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGetSymbolSize(::size_t *
#line 1527 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size, const T &
#line 1528 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
symbol) 
#line 1530 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1531 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 1532 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1577 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1578 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaFuncSetCacheConfig(T *
#line 1579 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, ::cudaFuncCache 
#line 1580 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cacheConfig) 
#line 1582 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1583 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1584 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1586 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> 
#line 1588 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
__declspec(deprecated) static __inline ::cudaError_t 
#line 1589 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaFuncSetSharedMemConfig(T *
#line 1590 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, ::cudaSharedMemConfig 
#line 1591 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
config) 
#line 1593 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1598 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
#pragma warning(suppress: 4996)
#line 1600 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1604 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1636 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1637 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1638 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
numBlocks, T 
#line 1639 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, int 
#line 1640 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSize, ::size_t 
#line 1641 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dynamicSMemSize) 
#line 1642 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1643 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1644 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1688 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1689 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1690 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
numBlocks, T 
#line 1691 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, int 
#line 1692 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSize, ::size_t 
#line 1693 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dynamicSMemSize, unsigned 
#line 1694 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags) 
#line 1695 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1696 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1697 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1702 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
class __cudaOccupancyB2DHelper { 
#line 1703 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size_t n; 
#line 1705 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1706 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
size_t operator()(int) 
#line 1707 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1708 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return n; 
#line 1709 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1710 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}; 
#line 1758 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1759 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1760 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
minGridSize, int *
#line 1761 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSize, T 
#line 1762 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, UnaryFunction 
#line 1763 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1764 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1765 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags = 0) 
#line 1766 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1767 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
::cudaError_t status; 
#line 1770 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int device; 
#line 1771 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
::cudaFuncAttributes attr; 
#line 1774 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int maxThreadsPerMultiProcessor; 
#line 1775 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int warpSize; 
#line 1776 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int devMaxThreadsPerBlock; 
#line 1777 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int multiProcessorCount; 
#line 1778 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int funcMaxThreadsPerBlock; 
#line 1779 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int occupancyLimit; 
#line 1780 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int granularity; 
#line 1783 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int maxBlockSize = 0; 
#line 1784 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int numBlocks = 0; 
#line 1785 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int maxOccupancy = 0; 
#line 1788 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int blockSizeToTryAligned; 
#line 1789 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int blockSizeToTry; 
#line 1790 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int blockSizeLimitAligned; 
#line 1791 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int occupancyInBlocks; 
#line 1792 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
int occupancyInThreads; 
#line 1793 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
::size_t dynamicSMemSize; 
#line 1799 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1800 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return cudaErrorInvalidValue; 
#line 1801 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1807 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
status = ::cudaGetDevice(&device); 
#line 1808 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1809 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1810 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1812 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1816 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1817 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1818 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1820 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1824 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1825 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1826 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1828 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1832 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1833 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1834 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1836 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1840 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1841 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1842 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1844 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
status = cudaFuncGetAttributes(&attr, func); 
#line 1845 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1846 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1847 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1849 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1855 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1856 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
granularity = warpSize; 
#line 1858 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (blockSizeLimit == 0) { 
#line 1859 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1860 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1862 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1863 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1864 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1866 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1867 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1868 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1870 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1872 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1876 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1877 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeToTry = blockSizeLimit; 
#line 1878 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} else { 
#line 1879 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeToTry = blockSizeToTryAligned; 
#line 1880 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1882 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1884 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1891 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1892 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1893 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1895 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1897 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (occupancyInThreads > maxOccupancy) { 
#line 1898 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
maxBlockSize = blockSizeToTry; 
#line 1899 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
numBlocks = occupancyInBlocks; 
#line 1900 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
maxOccupancy = occupancyInThreads; 
#line 1901 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1905 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
if (occupancyLimit == maxOccupancy) { 
#line 1906 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
break; 
#line 1907 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1908 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
}  
#line 1916 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1917 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
(*blockSize) = maxBlockSize; 
#line 1919 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return status; 
#line 1920 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 1954 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1955 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1956 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
minGridSize, int *
#line 1957 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSize, T 
#line 1958 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, UnaryFunction 
#line 1959 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1960 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1961 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 1962 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1963 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2000 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 2001 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSize(int *
#line 2002 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
minGridSize, int *
#line 2003 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSize, T 
#line 2004 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, ::size_t 
#line 2005 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 2006 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 2007 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2008 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 2009 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2038 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 2039 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyAvailableDynamicSMemPerBlock(::size_t *
#line 2040 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dynamicSmemSize, T 
#line 2041 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, int 
#line 2042 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
numBlocks, int 
#line 2043 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSize) 
#line 2044 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2045 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
#line 2046 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2097 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 2098 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 2099 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
minGridSize, int *
#line 2100 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSize, T 
#line 2101 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, ::size_t 
#line 2102 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 2103 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 2104 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
flags = 0) 
#line 2105 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2106 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 2107 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2141 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 2142 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyMaxPotentialClusterSize(int *
#line 2143 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
clusterSize, T *
#line 2144 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, const ::cudaLaunchConfig_t *
#line 2145 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
config) 
#line 2146 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2147 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaOccupancyMaxPotentialClusterSize(clusterSize, (const void *)func, config); 
#line 2148 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2184 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 2185 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaOccupancyMaxActiveClusters(int *
#line 2186 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
numClusters, T *
#line 2187 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func, const ::cudaLaunchConfig_t *
#line 2188 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
config) 
#line 2189 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2190 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveClusters(numClusters, (const void *)func, config); 
#line 2191 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2224 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 2225 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 2226 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
attr, T *
#line 2227 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
entry) 
#line 2229 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2230 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 2231 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2286 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 2287 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaFuncSetAttribute(T *
#line 2288 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
entry, ::cudaFuncAttribute 
#line 2289 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
attr, int 
#line 2290 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
value) 
#line 2292 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2293 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
#line 2294 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2318 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t __stdcall 
#line 2319 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaFuncGetName(const char **
#line 2320 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
name, const T *
#line 2321 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
func) 
#line 2323 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2324 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaFuncGetName(name, (const void *)func); 
#line 2325 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2341 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 2342 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
cudaGetKernel(::cudaKernel_t *
#line 2343 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
kernelPtr, const T *
#line 2344 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
entryFuncAddr) 
#line 2346 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
{ 
#line 2347 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
return ::cudaGetKernel(kernelPtr, (const void *)entryFuncAddr); 
#line 2348 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
} 
#line 2362 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\cuda_runtime.h"
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_printf_options() 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_scanf_options() 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
}__pragma(pack ( pop )) 
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_stdio_config.h"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
typedef 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
struct _iobuf { 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
void *_Placeholder; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} FILE; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl __acrt_iob_func(unsigned _Ix); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl fgetwc(FILE * _Stream); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _fgetwchar(); 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl fputwc(__wchar_t _Character, FILE * _Stream); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _fputwchar(__wchar_t _Character); 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl getwc(FILE * _Stream); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl getwchar(); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__wchar_t *__cdecl fgetws(__wchar_t * _Buffer, int _BufferCount, FILE * _Stream); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl fputws(const __wchar_t * _Buffer, FILE * _Stream); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__wchar_t *__cdecl _getws_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline wchar_t * __cdecl _getws_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _getws_s ( _Buffer, _Size ); }}
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl putwc(__wchar_t _Character, FILE * _Stream); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl putwchar(__wchar_t _Character); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl _putws(const __wchar_t * _Buffer); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl ungetwc(wint_t _Character, FILE * _Stream); 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wfopen(const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
errno_t __cdecl _wfopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wfreopen(const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
errno_t __cdecl _wfreopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wfsopen(const __wchar_t * _FileName, const __wchar_t * _Mode, int _ShFlag); 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl _wremove(const __wchar_t * _FileName); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(allocator) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
errno_t __cdecl _wtmpnam_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wtmpnam_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wtmpnam_s ( _Buffer, _Size ); }}
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _fgetwc_nolock(FILE * _Stream); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _fputwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _getwc_nolock(FILE * _Stream); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _putwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE * _Stream); 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_l(FILE *const 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf(FILE *const 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_s_l(FILE *const 
#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf_s(FILE *const 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p_l(FILE *const 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p(FILE *const 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_l(const __wchar_t *const 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf(const __wchar_t *const 
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_s_l(const __wchar_t *const 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf_s(const __wchar_t *const 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p_l(const __wchar_t *const 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p(const __wchar_t *const 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_l(FILE *const 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf(FILE *const 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_s_l(FILE *const 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf_s(FILE *const 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p_l(FILE *const 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 566 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p(FILE *const 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_l(const __wchar_t *const 
#line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 602 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf(const __wchar_t *const 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 619 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 625 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_s_l(const __wchar_t *const 
#line 626 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 635 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 639 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf_s(const __wchar_t *const 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p_l(const __wchar_t *const 
#line 665 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 674 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p(const __wchar_t *const 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_l(FILE *const 
#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 716 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 717 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 727 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 731 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf(FILE *const 
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 733 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_s_l(FILE *const 
#line 746 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 748 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 754 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf_s(FILE *const 
#line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_l(const __wchar_t *const 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf(const __wchar_t *const 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_s_l(const __wchar_t *const 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf_s(const __wchar_t *const 
#line 823 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_l(FILE *const 
#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf(FILE *const 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_s_l(FILE *const 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf_s(FILE *const 
#line 896 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 907 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_l(const __wchar_t *const 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 925 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 929 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf(const __wchar_t *const 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 944 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_s_l(const __wchar_t *const 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 960 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 962 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 964 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf_s(const __wchar_t *const 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1017 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_l(__wchar_t *const 
#line 1052 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1053 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1054 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1055 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1067 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s_l(__wchar_t *const 
#line 1073 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1077 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1084 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vsnwprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1088 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s(__wchar_t *const 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1097 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1098 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1099 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, ...); __inline int __cdecl _vsnwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, va_list _Args); 
#line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf(__wchar_t *
#line 1121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _vsnwprintf_s ( wchar_t ( & _Buffer ) [ _Size ], size_t _BufferCount, wchar_t const * _Format, va_list _ArgList ) throw ( ) { return _vsnwprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(__wchar_t *const 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c(__wchar_t *const 
#line 1167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_l(__wchar_t *const 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __vswprintf_l(__wchar_t *const 
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf(__wchar_t *const 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf(__wchar_t *const 
#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_s_l(__wchar_t *const 
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf_s(__wchar_t *const 
#line 1269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vswprintf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, va_list _ArgList ) throw ( ) { return vswprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(__wchar_t *const 
#line 1295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p(__wchar_t *const 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_l(const __wchar_t *const 
#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1333 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1340 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1344 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf(const __wchar_t *const 
#line 1351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_l(_Format, 0, _ArgList); 
#line 1359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p_l(const __wchar_t *const 
#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1383 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p(const __wchar_t *const 
#line 1384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t *const 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1407 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1408 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_l(__wchar_t *const 
#line 1418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1420 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1421 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1430 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t *const 
#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1440 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1448 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf(__wchar_t *const 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1472 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, va_list _Args); 
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t * _Buffer, const __wchar_t * _Format, ...); __inline int __cdecl _vswprintf(__wchar_t * _Buffer, const __wchar_t * _Format, va_list _Args); 
#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_s_l(__wchar_t *const 
#line 1494 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf_s(__wchar_t *const 
#line 1516 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1518 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1524 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1525 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1527 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1528 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1535 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl swprintf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return vswprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(__wchar_t *const 
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1555 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p(__wchar_t *const 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1567 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1576 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1578 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c_l(__wchar_t *const 
#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1587 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1589 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1599 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1600 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1606 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c(__wchar_t *const 
#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1608 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1615 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_l(__wchar_t *const 
#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1628 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1635 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1637 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1638 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1644 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t *
#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1652 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1658 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1659 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1664 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1665 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s_l(__wchar_t *const 
#line 1672 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1674 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1676 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1681 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1682 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1683 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1684 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1688 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s(__wchar_t *const 
#line 1694 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1696 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1707 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _snwprintf_s ( wchar_t ( & _Buffer ) [ _Size ], size_t _BufferCount, wchar_t const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return _vsnwprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(const __wchar_t *const 
#line 1722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1729 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1732 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, _Locale, _ArgList); 
#line 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1734 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1735 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf(const __wchar_t *const 
#line 1741 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1748 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, 0, _ArgList); 
#line 1751 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p_l(const __wchar_t *const 
#line 1759 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1760 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1768 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList); 
#line 1770 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1772 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p(const __wchar_t *const 
#line 1778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1783 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1785 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1787 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1797 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 6054)
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
swprintf(__wchar_t *const 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) throw() 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1809 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1810 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1811 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1813 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1816 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
vswprintf(__wchar_t *const 
#line 1818 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1823 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1824 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_swprintf_l(__wchar_t *const 
#line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1829 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1830 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) throw() 
#line 1832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1833 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1836 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1838 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1839 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_vswprintf_l(__wchar_t *const 
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1844 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1849 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1850 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_l(const __wchar_t *const 
#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1885 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1886 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1895 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1900 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf(const __wchar_t *
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *
#line 1902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1909 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1915 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_s_l(const __wchar_t *const 
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1917 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1918 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1925 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf_s(const __wchar_t *const 
#line 1936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1938 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1944 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 1945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1950 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vswscanf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, va_list _ArgList ) throw ( ) { return vswscanf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(const __wchar_t *const 
#line 1961 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1965 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1971 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1974 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_s_l(const __wchar_t *const 
#line 1980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1981 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1990 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1993 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_l(const __wchar_t *const 
#line 1999 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, _locale_t 
#line 2001 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2007 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2010 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2013 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf(const __wchar_t *const 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2030 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_s_l(const __wchar_t *const 
#line 2038 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2039 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2050 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2051 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2052 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf_s(const __wchar_t *const 
#line 2060 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2061 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2067 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2069 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2070 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_l(const __wchar_t *const 
#line 2081 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2082 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2084 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2090 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf(const __wchar_t *const 
#line 2104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s_l(const __wchar_t *const 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s(const __wchar_t *const 
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
}__pragma(pack ( pop )) 
#line 2171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
typedef __int64 fpos_t; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
errno_t __cdecl _get_stream_buffer_pointers(FILE * _Stream, char *** _Base, char *** _Pointer, int ** _Count); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
errno_t __cdecl clearerr_s(FILE * _Stream); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
errno_t __cdecl fopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode); 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
size_t __cdecl fread_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
errno_t __cdecl freopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode, FILE * _OldStream); 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
char *__cdecl gets_s(char * _Buffer, rsize_t _Size); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
errno_t __cdecl tmpfile_s(FILE ** _Stream); 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
errno_t __cdecl tmpnam_s(char * _Buffer, rsize_t _Size); 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
void __cdecl clearerr(FILE * _Stream); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fclose(FILE * _Stream); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fcloseall(); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl feof(FILE * _Stream); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl ferror(FILE * _Stream); 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fflush(FILE * _Stream); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fgetc(FILE * _Stream); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fgetchar(); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fgetpos(FILE * _Stream, fpos_t * _Position); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
char *__cdecl fgets(char * _Buffer, int _MaxCount, FILE * _Stream); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fileno(FILE * _Stream); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _flushall(); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
FILE *__cdecl fopen(const char * _FileName, const char * _Mode); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fputc(int _Character, FILE * _Stream); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fputchar(int _Character); 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fputs(const char * _Buffer, FILE * _Stream); 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
size_t __cdecl fread(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
FILE *__cdecl freopen(const char * _FileName, const char * _Mode, FILE * _Stream); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
FILE *__cdecl _fsopen(const char * _FileName, const char * _Mode, int _ShFlag); 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fsetpos(FILE * _Stream, const fpos_t * _Position); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fseek(FILE * _Stream, long _Offset, int _Origin); 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fseeki64(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
long __cdecl ftell(FILE * _Stream); 
#line 292 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__int64 __cdecl _ftelli64(FILE * _Stream); 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
size_t __cdecl fwrite(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl getc(FILE * _Stream); 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl getchar(); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _getmaxstdio(); 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline char * __cdecl gets_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return gets_s ( _Buffer, _Size ); }}
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _getw(FILE * _Stream); 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
void __cdecl perror(const char * _ErrorMessage); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _pclose(FILE * _Stream); 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
FILE *__cdecl _popen(const char * _Command, const char * _Mode); 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl putc(int _Character, FILE * _Stream); 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl putchar(int _Character); 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl puts(const char * _Buffer); 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _putw(int _Word, FILE * _Stream); 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl remove(const char * _FileName); 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl rename(const char * _OldFileName, const char * _NewFileName); 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _unlink(const char * _FileName); 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl unlink(const char * _FileName); 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
void __cdecl rewind(FILE * _Stream); 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _rmtmp(); 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
void __cdecl setbuf(FILE * _Stream, char * _Buffer); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _setmaxstdio(int _Maximum); 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl setvbuf(FILE * _Stream, char * _Buffer, int _Mode, size_t _Size); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__declspec(allocator) char *__cdecl _tempnam(const char * _DirectoryName, const char * _FilePrefix); 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
FILE *__cdecl tmpfile(); 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl tmpnam_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return tmpnam_s ( _Buffer, _Size ); }}
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
char *__cdecl tmpnam(char * _Buffer); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl ungetc(int _Character, FILE * _Stream); 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
void __cdecl _lock_file(FILE * _Stream); 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
void __cdecl _unlock_file(FILE * _Stream); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fclose_nolock(FILE * _Stream); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fflush_nolock(FILE * _Stream); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fgetc_nolock(FILE * _Stream); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fputc_nolock(int _Character, FILE * _Stream); 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
size_t __cdecl _fread_nolock(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
size_t __cdecl _fread_nolock_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fseek_nolock(FILE * _Stream, long _Offset, int _Origin); 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _fseeki64_nolock(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
long __cdecl _ftell_nolock(FILE * _Stream); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__int64 __cdecl _ftelli64_nolock(FILE * _Stream); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
size_t __cdecl _fwrite_nolock(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _getc_nolock(FILE * _Stream); 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _putc_nolock(int _Character, FILE * _Stream); 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _ungetc_nolock(int _Character, FILE * _Stream); 
#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int *__cdecl __p__commode(); 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 626 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 635 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_l(FILE *const 
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 639 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf(FILE *const 
#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_s_l(FILE *const 
#line 665 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 674 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 681 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf_s(FILE *const 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p_l(FILE *const 
#line 698 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 699 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p(FILE *const 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_l(const char *const 
#line 727 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf(const char *const 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 748 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 753 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_s_l(const char *const 
#line 754 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 756 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 762 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf_s(const char *const 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p_l(const char *const 
#line 785 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p(const char *const 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_l(FILE *const 
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 823 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf(FILE *const 
#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _set_printf_count_output(int _Value); 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl _get_printf_count_output(); 
#line 854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_s_l(FILE *const 
#line 855 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf_s(FILE *const 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p_l(FILE *const 
#line 896 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 907 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p(FILE *const 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 925 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_l(const char *const 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 944 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl printf(const char *const 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 960 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 962 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 967 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_s_l(const char *const 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl printf_s(const char *const 
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 994 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 995 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 997 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 999 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p_l(const char *const 
#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1008 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1013 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1015 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1016 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1017 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 1018 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1019 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p(const char *const 
#line 1025 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1031 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1032 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1033 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1034 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 1035 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1036 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _Arglist); 
#line 1055 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_l(FILE *const 
#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1057 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1065 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf(FILE *const 
#line 1073 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_s_l(FILE *const 
#line 1087 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1088 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1090 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 1099 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf_s(FILE *const 
#line 1107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_l(const char *const 
#line 1123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf(const char *const 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_s_l(const char *const 
#line 1150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf_s(const char *const 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1173 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_l(FILE *const 
#line 1181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf(FILE *const 
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_s_l(FILE *const 
#line 1218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf_s(FILE *const 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_l(const char *const 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl scanf(const char *const 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1288 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1293 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_s_l(const char *const 
#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1302 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl scanf_s(const char *const 
#line 1314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_l(char *const 
#line 1382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1383 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf(char *const 
#line 1403 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(char *const 
#line 1430 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1444 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_l(char *const 
#line 1450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf(char *const 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1474 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_s_l(char *const 
#line 1481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1483 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1485 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1490 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1491 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf_s(char *const 
#line 1504 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1512 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1513 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1514 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsprintf_s ( char ( & _Buffer ) [ _Size ], char const * _Format, va_list _ArgList ) throw ( ) { return vsprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(char *const 
#line 1530 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1534 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1540 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p(char *const 
#line 1551 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1552 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1560 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1561 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s_l(char *const 
#line 1567 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1578 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsnprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1582 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s(char *const 
#line 1589 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1590 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1599 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1600 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _vsnprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, va_list _ArgList ) throw ( ) { return _vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf_s(char *const 
#line 1617 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1628 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsnprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, va_list _ArgList ) throw ( ) { return vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(const char *const 
#line 1644 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1645 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1652 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1656 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1661 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf(const char *const 
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1663 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1669 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vscprintf_l(_Format, 0, _ArgList); 
#line 1670 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1674 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p_l(const char *const 
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1676 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1682 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1683 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1688 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1692 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p(const char *const 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1694 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1699 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vscprintf_p_l(_Format, 0, _ArgList); 
#line 1701 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c_l(char *const 
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1707 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1716 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c(char *const 
#line 1727 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1729 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 1735 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1736 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1737 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_l(char *const 
#line 1743 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1744 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1745 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1751 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1755 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1759 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1764 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char *const 
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1772 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1773 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1783 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char * _Buffer, const char * _Format, ...); __inline int __cdecl vsprintf(char * _Buffer, const char * _Format, va_list _Args); 
#line 1792 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_s_l(char *const 
#line 1793 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1794 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1796 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1801 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1808 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf_s(char *const 
#line 1816 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1818 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1823 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1824 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1825 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1829 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1830 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl sprintf_s ( char ( & _Buffer ) [ _Size ], char const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return vsprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1844 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p_l(char *const 
#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1847 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1848 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1855 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1857 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1859 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p(char *const 
#line 1866 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1874 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1876 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1877 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1878 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1885 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_l(char *const 
#line 1886 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1887 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1888 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1889 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1894 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1895 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1896 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1899 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1902 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1903 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(char *const 
#line 1920 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1921 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1922 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1930 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1931 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1932 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1933 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1934 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1939 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char *const 
#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1941 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1942 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1949 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1950 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1951 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1952 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1953 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1957 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char * _Buffer, size_t _BufferCount, const char * _Format, ...); __inline int __cdecl _vsnprintf(char * _Buffer, size_t _BufferCount, const char * _Format, va_list _Args); 
#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(char *const 
#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1971 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1972 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1977 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1981 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c(char *const 
#line 1990 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1992 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 1999 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2001 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2002 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2004 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s_l(char *const 
#line 2010 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2013 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2021 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2022 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2023 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 2024 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s(char *const 
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2035 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2041 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2043 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2050 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _snprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return _vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(const char *const 
#line 2060 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2061 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2067 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2069 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2070 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, _Locale, _ArgList); 
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2077 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf(const char *const 
#line 2078 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2084 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2086 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, 0, _ArgList); 
#line 2088 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2090 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p_l(const char *const 
#line 2095 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vscprintf_p_l(_Format, _Locale, _ArgList); 
#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p(const char *const 
#line 2113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vscprintf_p(_Format, _ArgList); 
#line 2123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 2143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_l(const char *const 
#line 2144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf(const char *const 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_s_l(const char *const 
#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 6530)
#line 2196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf_s(const char *const 
#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_ArgList) 
#line 2204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsscanf_s ( char const ( & _Buffer ) [ _Size ], char const * _Format, va_list _ArgList ) throw ( ) { return vsscanf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 2216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_l(const char *const 
#line 2222 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf(const char *const 
#line 2241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_s_l(const char *const 
#line 2259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2271 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf_s(const char *const 
#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2287 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2288 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = vsscanf_s(_Buffer, _Format, _ArgList); 
#line 2293 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 6530)
#line 2304 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_l(const char *const 
#line 2305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2318 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2324 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf(const char *const 
#line 2329 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s_l(const char *const 
#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2364 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2372 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s(const char *const 
#line 2377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2379 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
{ 
#line 2385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int _Result; 
#line 2386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2394 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
return _Result; 
#line 2395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
} 
#line 2398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2421 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); 
#line 2430 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fcloseall(); 
#line 2431 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
FILE *__cdecl fdopen(int _FileHandle, const char * _Format); 
#line 2432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fgetchar(); 
#line 2433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fileno(FILE * _Stream); 
#line 2434 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl flushall(); 
#line 2435 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl fputchar(int _Ch); 
#line 2436 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl getw(FILE * _Stream); 
#line 2437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl putw(int _Ch, FILE * _Stream); 
#line 2438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
int __cdecl rmtmp(); 
#line 2445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
}__pragma(pack ( pop )) 
#line 2447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::_Mbstatet;
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fpos_t;
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::FILE;
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::clearerr;
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fclose;
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::feof;
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::ferror;
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fflush;
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fgetc;
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fgetpos;
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fgets;
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fopen;
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fprintf;
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fputc;
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fputs;
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fread;
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::freopen;
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fscanf;
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fseek;
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fsetpos;
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::ftell;
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::fwrite;
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::getc;
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::getchar;
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::perror;
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::putc;
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::putchar;
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::printf;
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::puts;
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::remove;
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::rename;
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::rewind;
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::scanf;
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::setbuf;
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::setvbuf;
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::sprintf;
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::sscanf;
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::tmpfile;
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::tmpnam;
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::ungetc;
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::vfprintf;
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::vprintf;
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::vsprintf;
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::snprintf;
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::vsnprintf;
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::vfscanf;
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::vscanf;
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
using ::vsscanf;
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
#pragma warning(pop)
}
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstdio"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::memchr;
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::memcmp;
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::memcpy;
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::memmove;
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::memset;
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strcat;
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strchr;
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strcmp;
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strcoll;
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strcpy;
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strcspn;
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strerror;
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strlen;
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strncat;
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strncmp;
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strncpy;
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strpbrk;
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strrchr;
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strspn;
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strstr;
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strtok;
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
using ::strxfrm;
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
#pragma warning(pop)
}
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cstring"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
errno_t __cdecl _cgetws_s(__wchar_t * _Buffer, size_t _BufferCount, size_t * _SizeRead); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _cgetws_s ( wchar_t ( & _Buffer ) [ _Size ], size_t * _SizeRead ) throw ( ) { return _cgetws_s ( _Buffer, _Size, _SizeRead ); }}
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int __cdecl _cputws(const __wchar_t * _Buffer); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _getwch(); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _getwche(); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _putwch(__wchar_t _Character); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _ungetwch(wint_t _Character); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _getwch_nolock(); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _getwche_nolock(); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _putwch_nolock(__wchar_t _Character); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
wint_t __cdecl _ungetwch_nolock(wint_t _Character); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int __cdecl __conio_common_vcwprintf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int __cdecl __conio_common_vcwprintf_s(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int __cdecl __conio_common_vcwprintf_p(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_l(const __wchar_t *const 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf(const __wchar_t *const 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_l(_Format, 0, _ArgList); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s_l(const __wchar_t *const 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf_s(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s(const __wchar_t *const 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p_l(const __wchar_t *const 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwprintf_p(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p(const __wchar_t *const 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_l(const __wchar_t *const 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_l(_Format, _Locale, _ArgList); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf(const __wchar_t *const 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_l(_Format, 0, _ArgList); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s_l(const __wchar_t *const 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_s_l(_Format, _Locale, _ArgList); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s(const __wchar_t *const 
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p_l(const __wchar_t *const 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_p_l(_Format, _Locale, _ArgList); 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p(const __wchar_t *const 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int __cdecl __conio_common_vcwscanf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_l(const __wchar_t *const 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 292 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwscanf(*__local_stdio_scanf_options(), _Format, _Locale, _ArgList); 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf(const __wchar_t *const 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _vcwscanf_l(_Format, 0, _ArgList); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s_l(const __wchar_t *const 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, va_list 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return __conio_common_vcwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Format, _Locale, _ArgList); 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s(const __wchar_t *const 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, va_list 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_ArgList) 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_l(const __wchar_t *const 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_l(_Format, _Locale, _ArgList); 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf(const __wchar_t *const 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_l(_Format, 0, _ArgList); 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s_l(const __wchar_t *const 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, const _locale_t 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Locale, ...) 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_s_l(_Format, _Locale, _ArgList); 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s(const __wchar_t *const 
#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Format, ...) 
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
{ 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
int _Result; 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
va_list _ArgList; 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
_Result = _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
(void)(_ArgList = ((va_list)0)); 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
return _Result; 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
} 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
}__pragma(pack ( pop )) 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wconio.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
__declspec(allocator) __wchar_t *__cdecl _wgetcwd(__wchar_t * _DstBuf, int _SizeInWords); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
__declspec(allocator) __wchar_t *__cdecl _wgetdcwd(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
int __cdecl _wchdir(const __wchar_t * _Path); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
int __cdecl _wmkdir(const __wchar_t * _Path); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
int __cdecl _wrmdir(const __wchar_t * _Path); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
}__pragma(pack ( pop )) 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wdirect.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_share.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_share.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
struct _wfinddata32_t { 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time32_t time_create; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time32_t time_access; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time32_t time_write; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_fsize_t size; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
}; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
struct _wfinddata32i64_t { 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time32_t time_create; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time32_t time_access; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time32_t time_write; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__int64 size; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
}; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
struct _wfinddata64i32_t { 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time64_t time_create; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time64_t time_access; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time64_t time_write; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_fsize_t size; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
}; 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
struct _wfinddata64_t { 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
unsigned attrib; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time64_t time_create; 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time64_t time_access; 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__time64_t time_write; 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__int64 size; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__wchar_t name[260]; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
}; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _waccess(const __wchar_t * _FileName, int _AccessMode); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
errno_t __cdecl _waccess_s(const __wchar_t * _FileName, int _AccessMode); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _wchmod(const __wchar_t * _FileName, int _Mode); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _wcreat(const __wchar_t * _FileName, int _PermissionMode); 
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
intptr_t __cdecl _wfindfirst32(const __wchar_t * _FileName, _wfinddata32_t * _FindData); 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t * _FindData); 
#line 132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _wunlink(const __wchar_t * _FileName); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _wrename(const __wchar_t * _OldFileName, const __wchar_t * _NewFileName); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
errno_t __cdecl _wmktemp_s(__wchar_t * _TemplateName, size_t _SizeInWords); 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wmktemp_s ( wchar_t ( & _TemplateName ) [ _Size ] ) throw ( ) { return _wmktemp_s ( _TemplateName, _Size ); }}
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
__wchar_t *__cdecl _wmktemp(__wchar_t * _TemplateName); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
intptr_t __cdecl _wfindfirst32i64(const __wchar_t * _FileName, _wfinddata32i64_t * _FindData); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
intptr_t __cdecl _wfindfirst64i32(const __wchar_t * _FileName, _wfinddata64i32_t * _FindData); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
intptr_t __cdecl _wfindfirst64(const __wchar_t * _FileName, _wfinddata64_t * _FindData); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t * _FindData); 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t * _FindData); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t * _FindData); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
errno_t __cdecl _wsopen_s(int * _FileHandle, const __wchar_t * _FileName, int _OpenFlag, int _ShareFlag, int _PermissionFlag); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
errno_t __cdecl _wsopen_dispatch(const __wchar_t * _FileName, int _OFlag, int _ShFlag, int _PMode, int * _PFileHandle, int _BSecure); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
extern "C++" inline int __cdecl _wopen(const __wchar_t *
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_FileName, int 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_OFlag, int 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_PMode = 0) 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
{ 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int _FileHandle; 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, 64, _PMode, &_FileHandle, 0); 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
return (_Result) ? -1 : _FileHandle; 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
} 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
extern "C++" inline int __cdecl _wsopen(const __wchar_t *
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_FileName, int 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_OFlag, int 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_ShFlag, int 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
_PMode = 0) 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
{ 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
int _FileHandle; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
return (_Result) ? -1 : _FileHandle; 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
} 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
}__pragma(pack ( pop )) 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wio.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecl(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecle(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexeclp(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexeclpe(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecv(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecve(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecvp(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wexecvpe(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnl(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnle(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnlp(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnlpe(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnv(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnve(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnvp(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
intptr_t __cdecl _wspawnvpe(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
int __cdecl _wsystem(const __wchar_t * _Command); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
}__pragma(pack ( pop )) 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_wprocess.h"
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/types.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/types.h"
typedef unsigned short _ino_t; 
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/types.h"
typedef _ino_t ino_t; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/types.h"
typedef unsigned _dev_t; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/types.h"
typedef _dev_t dev_t; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/types.h"
typedef long _off_t; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/types.h"
typedef _off_t off_t; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/types.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
struct _stat32 { 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time32_t st_atime; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time32_t st_mtime; 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time32_t st_ctime; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
}; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
struct _stat32i64 { 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__int64 st_size; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time32_t st_atime; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time32_t st_mtime; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time32_t st_ctime; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
}; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
struct _stat64i32 { 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time64_t st_atime; 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time64_t st_mtime; 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time64_t st_ctime; 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
}; 
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
struct _stat64 { 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__int64 st_size; 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time64_t st_atime; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time64_t st_mtime; 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
__time64_t st_ctime; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
}; 
#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
struct stat { 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_dev; 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_ino_t st_ino; 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
unsigned short st_mode; 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_nlink; 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_uid; 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
short st_gid; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_dev_t st_rdev; 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
_off_t st_size; 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
time_t st_atime; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
time_t st_mtime; 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
time_t st_ctime; 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
}; 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _fstat32(int _FileHandle, struct _stat32 * _Stat); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _fstat32i64(int _FileHandle, struct _stat32i64 * _Stat); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _fstat64i32(int _FileHandle, struct _stat64i32 * _Stat); 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _fstat64(int _FileHandle, struct _stat64 * _Stat); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _stat32(const char * _FileName, struct _stat32 * _Stat); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _stat32i64(const char * _FileName, struct _stat32i64 * _Stat); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _stat64i32(const char * _FileName, struct _stat64i32 * _Stat); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _stat64(const char * _FileName, struct _stat64 * _Stat); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _wstat32(const __wchar_t * _FileName, struct _stat32 * _Stat); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _wstat32i64(const __wchar_t * _FileName, struct _stat32i64 * _Stat); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _wstat64i32(const __wchar_t * _FileName, struct _stat64i32 * _Stat); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
int __cdecl _wstat64(const __wchar_t * _FileName, struct _stat64 * _Stat); 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
static __inline int __cdecl fstat(const int _FileHandle, struct stat *const _Stat) 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
{ 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
static_assert((sizeof(struct stat) == sizeof(struct _stat64i32)), "sizeof(struct stat) == sizeof(struct _stat64i32)");
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
return _fstat64i32(_FileHandle, (struct _stat64i32 *)_Stat); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
} 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
static __inline int __cdecl stat(const char *const _FileName, struct stat *const _Stat) 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
{ 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
static_assert((sizeof(struct stat) == sizeof(struct _stat64i32)), "sizeof(struct stat) == sizeof(struct _stat64i32)");
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
return _stat64i32(_FileName, (struct _stat64i32 *)_Stat); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
} 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
}__pragma(pack ( pop )) 
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\sys/stat.h"
#pragma warning(pop)
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
typedef __wchar_t _Wint_t; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
wint_t __cdecl btowc(int _Ch); 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
size_t __cdecl mbrlen(const char * _Ch, size_t _SizeInBytes, mbstate_t * _State); 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
size_t __cdecl mbrtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SizeInBytes, mbstate_t * _State); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
errno_t __cdecl mbsrtowcs_s(size_t * _Retval, __wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl mbsrtowcs_s ( size_t * _Retval, wchar_t ( & _Dest ) [ _Size ], char const * * _PSource, size_t _Count, mbstate_t * _State ) throw ( ) { return mbsrtowcs_s ( _Retval, _Dest, _Size, _PSource, _Count, _State ); }}
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
size_t __cdecl mbsrtowcs(__wchar_t * _Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
errno_t __cdecl wcrtomb_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, __wchar_t _Ch, mbstate_t * _State); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcrtomb_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t _Source, mbstate_t * _State ) throw ( ) { return wcrtomb_s ( _Retval, _Dest, _Size, _Source, _State ); }}
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
size_t __cdecl wcrtomb(char * _Dest, __wchar_t _Source, mbstate_t * _State); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
errno_t __cdecl wcsrtombs_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, const __wchar_t ** _Src, size_t _Size, mbstate_t * _State); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsrtombs_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t const * * _PSrc, size_t _Count, mbstate_t * _State ) throw ( ) { return wcsrtombs_s ( _Retval, _Dest, _Size, _PSrc, _Count, _State ); }}
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
size_t __cdecl wcsrtombs(char * _Dest, const __wchar_t ** _PSource, size_t _Count, mbstate_t * _State); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
int __cdecl wctob(wint_t _WCh); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
errno_t __cdecl wmemcpy_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
errno_t __cdecl wmemmove_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__inline int __cdecl fwide(FILE *
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_F, int 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_M) 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
(void)_F; 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
return _M; 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
} 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__inline int __cdecl mbsinit(const mbstate_t *
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_P) 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
return (_P == (0)) || ((_P->_Wchar) == (0)); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
} 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__inline const __wchar_t *__cdecl wmemchr(const __wchar_t *
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_C, size_t 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_N) 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
for (; (0) < _N; (++_S), (--_N)) { 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
if ((*_S) == _C) { 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
return (const __wchar_t *)_S; }  }  
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
return 0; 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
} 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__inline int __cdecl wmemcmp(const __wchar_t *
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S2, size_t 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_N) 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
for (; (0) < _N; ((++_S1), (++_S2)), (--_N)) { 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
if ((*_S1) != (*_S2)) { 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
return ((*_S1) < (*_S2)) ? -1 : 1; }  }  
#line 223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
return 0; 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
} 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemcpy(__wchar_t *
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S2, size_t 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_N) 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#pragma warning(suppress: 6386)
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
} 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemmove(__wchar_t *
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S1, const __wchar_t *
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S2, size_t 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_N) 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#pragma warning(suppress: 6386)
return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
} 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__inline __wchar_t *__cdecl wmemset(__wchar_t *
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_C, size_t 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_N) 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
__wchar_t *_Su = _S; 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
for (; (0) < _N; (++_Su), (--_N)) 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
(*_Su) = _C; 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
}  
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
return _S; 
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
} 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
extern "C++" inline __wchar_t *__cdecl wmemchr(__wchar_t *
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_S, __wchar_t 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_C, size_t 
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
_N) 
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
{ 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
const __wchar_t *const _SC = _S; 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
return const_cast< __wchar_t *>(wmemchr(_SC, _C, _N)); 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
} 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
}__pragma(pack ( pop )) 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\wchar.h"
#pragma warning(pop)
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
extern "C" { using _Mbstatet = mbstate_t; }
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::mbstate_t;
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::tm;
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wint_t;
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::btowc;
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::fgetwc;
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::fgetws;
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::fputwc;
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::fputws;
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::fwide;
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::fwprintf;
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::fwscanf;
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::getwc;
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::getwchar;
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::mbrlen;
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::mbrtowc;
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::mbsrtowcs;
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::mbsinit;
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::putwc;
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::putwchar;
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::swprintf;
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::swscanf;
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::ungetwc;
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::vfwprintf;
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::vswprintf;
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::vwprintf;
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcrtomb;
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wprintf;
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wscanf;
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsrtombs;
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcstol;
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcscat;
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcschr;
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcscmp;
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcscoll;
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcscpy;
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcscspn;
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcslen;
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsncat;
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsncmp;
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsncpy;
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcspbrk;
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsrchr;
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsspn;
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcstod;
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcstoul;
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsstr;
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcstok;
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsxfrm;
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wctob;
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wmemchr;
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wmemcmp;
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wmemcpy;
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wmemmove;
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wmemset;
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcsftime;
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::vfwscanf;
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::vswscanf;
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::vwscanf;
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcstof;
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcstold;
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcstoll;
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
using ::wcstoull;
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
#pragma warning(pop)
}
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cwchar"
#pragma warning(pop)
#pragma pack ( pop )
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
namespace std { 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using streamoff = __int64; 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using streamsize = __int64; 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Statetype >
class fpos {
public :
     fpos ( streamoff _Off = 0 ) : _Myoff ( _Off ), _Fpos ( 0 ), _Mystate ( ) { }

    fpos ( _Statetype _State, fpos_t _Fileposition ) : _Myoff ( _Fileposition ), _Fpos ( 0 ), _Mystate ( _State ) { }

    [ [ nodiscard ] ] _Statetype state ( ) const {
        return _Mystate;
    }

    void state ( _Statetype _State ) {
        _Mystate = _State;
    }

    operator streamoff ( ) const noexcept {


        return _Myoff + _Fpos;
    }


    [ [ deprecated ( "warning STL4019: The member std::fpos::seekpos() is non-Standard, and is preserved only for compatibility with workarounds for o" "ld versions of Visual C++. It will be removed in a future release, and in this release always returns 0. Please use standards-co" "nforming mechanisms to manipulate fpos, such as conversions to and from streamoff, or an integral type, instead. If you are rece" "iving this message while compiling Boost.IOStreams, a fix has been submitted upstream to make Boost use standards-conforming mec" "hanisms, as it does for other compilers. You can define _SILENCE_FPOS_SEEKPOS_DEPRECATION_WARNING to suppress this warning, or d" "efine _REMOVE_FPOS_SEEKPOS to remove std::fpos::seekpos entirely." ) ] ] fpos_t seekpos ( ) const noexcept {
        return { };
    }


    [ [ nodiscard ] ] streamoff operator - ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) - static_cast < streamoff > ( _Right );
    }

    fpos & operator += ( streamoff _Off ) noexcept {
        _Myoff += _Off;
        return * this;
    }

    fpos & operator -= ( streamoff _Off ) noexcept {
        _Myoff -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] fpos operator + ( streamoff _Off ) const {
        fpos _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] fpos operator - ( streamoff _Off ) const {
        fpos _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] bool operator == ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) == static_cast < streamoff > ( _Right );
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator == ( const fpos & _Left, const _Int _Right ) noexcept {
        return static_cast < streamoff > ( _Left ) == _Right;
    }


    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator == ( const _Int _Left, const fpos & _Right ) noexcept {
        return _Left == static_cast < streamoff > ( _Right );
    }

    [ [ nodiscard ] ] bool operator != ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) != static_cast < streamoff > ( _Right );
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator != ( const fpos & _Left, const _Int _Right ) noexcept {
        return static_cast < streamoff > ( _Left ) != _Right;
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator != ( const _Int _Left, const fpos & _Right ) noexcept {
        return _Left != static_cast < streamoff > ( _Right );
    }


private :
    streamoff _Myoff;
    fpos_t _Fpos;
    _Statetype _Mystate;
};
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using streampos = fpos< _Mbstatet> ; 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wstreampos = streampos; 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using u16streampos = streampos; 
#line 144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using u32streampos = streampos; 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
class locale; 
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Facet >
const _Facet & __cdecl use_facet ( const locale & );
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template< class _Elem> struct char_traits; 
#line 153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template<> struct char_traits< char> ; 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template<> struct char_traits< char16_t> ; 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template<> struct char_traits< char32_t> ; 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template<> struct char_traits< __wchar_t> ; 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Ty >
class allocator;
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
class ios_base; 
#line 172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_ios;
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class istreambuf_iterator;
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class ostreambuf_iterator;
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_streambuf;
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
#pragma vtordisp(push, 2)
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_istream;
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_ostream;
#pragma vtordisp(pop)
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_iostream;
#line 190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_stringbuf; 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_istringstream; 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_ostringstream; 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_stringstream; 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_filebuf;
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_ifstream;
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_ofstream;
#line 214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_fstream;
#line 234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using ios = basic_ios< char, char_traits< char> > ; 
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using streambuf = basic_streambuf< char, char_traits< char> > ; 
#line 236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using istream = basic_istream< char, char_traits< char> > ; 
#line 237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using ostream = basic_ostream< char, char_traits< char> > ; 
#line 238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using iostream = basic_iostream< char, char_traits< char> > ; 
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using stringbuf = basic_stringbuf< char, char_traits< char> , allocator< char> > ; 
#line 240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using istringstream = basic_istringstream< char, char_traits< char> , allocator< char> > ; 
#line 241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using ostringstream = basic_ostringstream< char, char_traits< char> , allocator< char> > ; 
#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using stringstream = basic_stringstream< char, char_traits< char> , allocator< char> > ; 
#line 243 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using filebuf = basic_filebuf< char, char_traits< char> > ; 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using ifstream = basic_ifstream< char, char_traits< char> > ; 
#line 245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using ofstream = basic_ofstream< char, char_traits< char> > ; 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using fstream = basic_fstream< char, char_traits< char> > ; 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wios = basic_ios< __wchar_t, char_traits< __wchar_t> > ; 
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wstreambuf = basic_streambuf< __wchar_t, char_traits< __wchar_t> > ; 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wistream = basic_istream< __wchar_t, char_traits< __wchar_t> > ; 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wostream = basic_ostream< __wchar_t, char_traits< __wchar_t> > ; 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wiostream = basic_iostream< __wchar_t, char_traits< __wchar_t> > ; 
#line 263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wstringbuf = basic_stringbuf< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wistringstream = basic_istringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wostringstream = basic_ostringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wstringstream = basic_stringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wfilebuf = basic_filebuf< __wchar_t, char_traits< __wchar_t> > ; 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wifstream = basic_ifstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wofstream = basic_ofstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
using wfstream = basic_fstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
}
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iosfwd"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
namespace std { 
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Ty, class _Alloc, class  = void> 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct _Has_allocator_type : public false_type { }; 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Ty, class _Alloc> 
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct _Has_allocator_type< _Ty, _Alloc, void_t< typename _Ty::allocator_type> >  : public is_convertible< _Alloc, typename _Ty::allocator_type> ::type { 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
}; 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct allocator_arg_t { 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
explicit allocator_arg_t() = default;
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
}; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
constexpr allocator_arg_t allocator_arg{}; 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Ty, class _Alloc> 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct uses_allocator : public _Has_allocator_type< _Ty, _Alloc> ::type { }; 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Ty, class _Alloc> constexpr bool 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
uses_allocator_v = (uses_allocator< _Ty, _Alloc> ::value); 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct input_iterator_tag { }; 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct output_iterator_tag { }; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct forward_iterator_tag : public input_iterator_tag { }; 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
#line 486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class , class  = void> 
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct _Iterator_traits_base { }; 
#line 489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Iter> 
#line 490 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct _Iterator_traits_base< _Iter, void_t< typename _Iter::iterator_category, typename _Iter::value_type, typename _Iter::difference_type, typename _Iter::pointer, typename _Iter::reference> >  { 
#line 494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using iterator_category = typename _Iter::iterator_category; 
#line 495 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using value_type = typename _Iter::value_type; 
#line 496 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using difference_type = typename _Iter::difference_type; 
#line 497 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using pointer = typename _Iter::pointer; 
#line 498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using reference = typename _Iter::reference; 
#line 499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
}; 
#line 501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Ty, bool  = is_object_v< _Ty> > 
#line 502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct _Iterator_traits_pointer_base { 
#line 503 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using iterator_category = random_access_iterator_tag; 
#line 504 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using value_type = remove_cv_t< _Ty> ; 
#line 505 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using difference_type = ptrdiff_t; 
#line 506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using pointer = _Ty *; 
#line 507 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
using reference = _Ty &; 
#line 508 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
}; 
#line 510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Ty> 
#line 511 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct _Iterator_traits_pointer_base< _Ty, false>  { }; 
#line 513 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Iter> 
#line 514 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct iterator_traits : public _Iterator_traits_base< _Iter>  { }; 
#line 516 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
template< class _Ty> 
#line 517 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
struct iterator_traits< _Ty *>  : public _Iterator_traits_pointer_base< _Ty>  { }; 
#line 519 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
}
#line 523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_iter_core.hpp"
#pragma warning(pop)
#pragma pack ( pop )
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
extern "C" {
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void * _First, void * _Last) noexcept; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void * _First, void * _Last) noexcept; 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void * _First, void * _Last) noexcept; 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void * _First, void * _Last) noexcept; 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) void __cdecl __std_swap_ranges_trivially_swappable_noalias(void * _First1, void * _Last1, void * _First2) noexcept; 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) size_t __stdcall 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__std_count_trivial_1(const void * _First, const void * _Last, uint8_t _Val) noexcept; 
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) size_t __stdcall 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__std_count_trivial_2(const void * _First, const void * _Last, uint16_t _Val) noexcept; 
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) size_t __stdcall 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__std_count_trivial_4(const void * _First, const void * _Last, uint32_t _Val) noexcept; 
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__declspec(noalias) size_t __stdcall 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
__std_count_trivial_8(const void * _First, const void * _Last, uint64_t _Val) noexcept; 
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_find_trivial_1(const void * _First, const void * _Last, uint8_t _Val) noexcept; 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_find_trivial_2(const void * _First, const void * _Last, uint16_t _Val) noexcept; 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_find_trivial_4(const void * _First, const void * _Last, uint32_t _Val) noexcept; 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_find_trivial_8(const void * _First, const void * _Last, uint64_t _Val) noexcept; 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_find_trivial_unsized_1(const void * _First, uint8_t _Val) noexcept; 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_find_trivial_unsized_2(const void * _First, uint16_t _Val) noexcept; 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_find_trivial_unsized_4(const void * _First, uint32_t _Val) noexcept; 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_find_trivial_unsized_8(const void * _First, uint64_t _Val) noexcept; 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_min_element_1(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_min_element_2(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_min_element_4(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_min_element_8(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_max_element_1(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_max_element_2(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_max_element_4(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
const void *__stdcall __std_max_element_8(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, class _TVal >
__declspec ( noalias ) size_t __std_count_trivial ( _Ty * _First, _Ty * _Last, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_count_trivial ( _First, _Last, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return __std_count_trivial_1 ( _First, _Last, static_cast < uint8_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return __std_count_trivial_2 ( _First, _Last, static_cast < uint16_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return __std_count_trivial_4 ( _First, _Last, static_cast < uint32_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return __std_count_trivial_8 ( _First, _Last, static_cast < uint64_t > ( _Val ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, class _TVal >
_Ty * __std_find_trivial ( _Ty * _First, _Ty * _Last, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_find_trivial ( _First, _Last, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_1 ( _First, _Last, static_cast < uint8_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_2 ( _First, _Last, static_cast < uint16_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_4 ( _First, _Last, static_cast < uint32_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_8 ( _First, _Last, static_cast < uint64_t > ( _Val ) ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, class _TVal >
_Ty * __std_find_trivial_unsized ( _Ty * _First, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_find_trivial_unsized ( _First, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_1 ( _First, static_cast < uint8_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_2 ( _First, static_cast < uint16_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_4 ( _First, static_cast < uint32_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_8 ( _First, static_cast < uint64_t > ( _Val ) ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty >
_Ty * __std_min_element ( _Ty * _First, _Ty * _Last ) noexcept {
    constexpr bool _Signed = :: std :: is_signed_v < _Ty >;

    if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_1 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_2 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_4 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_8 ( _First, _Last, _Signed ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty >
_Ty * __std_max_element ( _Ty * _First, _Ty * _Last ) noexcept {
    constexpr bool _Signed = :: std :: is_signed_v < _Ty >;

    if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_1 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_2 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_4 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_8 ( _First, _Last, _Signed ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
namespace std { 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> struct _Get_first_parameter; 
#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< template< class , class ...>  class _Ty, class _First, class ..._Rest> 
#line 198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Get_first_parameter< _Ty< _First, _Rest...> >  { 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using type = _First; 
#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Newfirst, class _Ty> struct _Replace_first_parameter; 
#line 205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Newfirst, template< class , class ...>  class _Ty, class _First, class ..._Rest> 
#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Replace_first_parameter< _Newfirst, _Ty< _First, _Rest...> >  { 
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using type = _Ty< _Newfirst, _Rest...> ; 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty, class  = void> 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Get_ptr_difference_type { 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using type = ptrdiff_t; 
#line 213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> 
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Get_ptr_difference_type< _Ty, void_t< typename _Ty::difference_type> >  { 
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using type = typename _Ty::difference_type; 
#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty, class _Other, class  = void> 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Get_rebind_alias { 
#line 222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using type = typename _Replace_first_parameter< _Other, _Ty> ::type; 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty, class _Other> 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Get_rebind_alias< _Ty, _Other, void_t< typename _Ty::template rebind< _Other> > >  { 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using type = typename _Ty::template rebind< _Other> ; 
#line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, class ... _Types >
inline void _Construct_in_place ( _Ty & _Obj, _Types && ... _Args ) noexcept (
    is_nothrow_constructible_v < _Ty, _Types ... > ) {





    {
        :: new ( static_cast < void * > ( :: std :: addressof ( _Obj ) ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
    }
}
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty >
void _Default_construct_in_place ( _Ty & _Obj ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) {
    :: new ( static_cast < void * > ( :: std :: addressof ( _Obj ) ) ) _Ty;
}
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, class _Elem >
struct _Ptr_traits_base {
    using pointer = _Ty;
    using element_type = _Elem;
    using difference_type = typename _Get_ptr_difference_type < _Ty > :: type;

    template < class _Other >
    using rebind = typename _Get_rebind_alias < _Ty, _Other > :: type;

    using _Reftype = conditional_t < is_void_v < _Elem >, char, _Elem > &;

    [ [ nodiscard ] ] static inline pointer pointer_to ( _Reftype _Val ) noexcept (
        noexcept ( _Ty :: pointer_to ( _Val ) ) ) {
        return _Ty :: pointer_to ( _Val );
    }
};
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class , class  = void, class  = void> 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Ptr_traits_sfinae_layer { }; 
#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty, class _Uty> 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Ptr_traits_sfinae_layer< _Ty, _Uty, void_t< typename _Get_first_parameter< _Ty> ::type> >  : public _Ptr_traits_base< _Ty, typename _Get_first_parameter< _Ty> ::type>  { 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Ptr_traits_sfinae_layer< _Ty, void_t< typename _Ty::element_type> , void>  : public _Ptr_traits_base< _Ty, typename _Ty::element_type>  { 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> 
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct pointer_traits : public _Ptr_traits_sfinae_layer< _Ty>  { }; 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty >
struct pointer_traits < _Ty * > {
    using pointer = _Ty *;
    using element_type = _Ty;
    using difference_type = ptrdiff_t;

    template < class _Other >
    using rebind = _Other *;

    using _Reftype = conditional_t < is_void_v < _Ty >, char, _Ty > &;

    [ [ nodiscard ] ] static inline pointer pointer_to ( _Reftype _Val ) noexcept {
        return :: std :: addressof ( _Val );
    }
};
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty = void >
struct plus {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left + _Right;
    }
};
#line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty = void >
struct minus {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left - _Right;
    }
};
#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty = void >
struct multiplies {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left * _Right;
    }
};
#line 385 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty = void >
struct equal_to {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left == _Right ) ) ) {
        return _Left == _Right;
    }
};
#line 397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty = void >
struct not_equal_to {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left != _Right ) ) ) {
        return _Left != _Right;
    }
};
#line 409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty = void >
struct greater {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left > _Right ) ) ) {
        return _Left > _Right;
    }
};
#line 421 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty = void >
struct greater_equal {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left >= _Right ) ) ) {
        return _Left >= _Right;
    }
};
#line 433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty = void >
struct less_equal {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left <= _Right ) ) ) {
        return _Left <= _Right;
    }
};
#line 446 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct plus< void>  { 
#line 447 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right );
    }
#line 454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using is_transparent = int; 
#line 455 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 458 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct minus< void>  { 
#line 459 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right );
    }
#line 466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using is_transparent = int; 
#line 467 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 470 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct multiplies< void>  { 
#line 471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right );
    }
#line 478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using is_transparent = int; 
#line 479 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 482 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct equal_to<>  { 
#line 483 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right );
    }
#line 490 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using is_transparent = int; 
#line 491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct not_equal_to< void>  { 
#line 495 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right );
    }
#line 502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using is_transparent = int; 
#line 503 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct greater<>  { 
#line 507 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right );
    }
#line 514 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using is_transparent = int; 
#line 515 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 518 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct greater_equal< void>  { 
#line 519 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right );
    }
#line 526 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using is_transparent = int; 
#line 527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 530 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct less_equal< void>  { 
#line 531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right );
    }
#line 538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using is_transparent = int; 
#line 539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 541 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Fx> 
#line 542 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Ref_fn { 
#line 545 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class ... _Args >
    constexpr decltype ( auto ) operator ( ) ( _Args && ... _Vals ) noexcept (
        _Select_invoke_traits < _Fx &, _Args ... > :: _Is_nothrow_invocable :: value ) {
        if constexpr ( is_member_pointer_v < _Fx > ) {
            return :: std :: invoke ( _Fn, :: std :: forward < _Args > ( _Vals ) ... );
        } else {
            return _Fn ( :: std :: forward < _Args > ( _Vals ) ... );
        }
    }
#line 555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Fx &_Fn; 
#line 556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 558 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Fn >
[ [ nodiscard ] ] constexpr auto _Pass_fn ( _Fn & _Func ) noexcept {
    constexpr bool _Pass_by_value = conjunction_v < bool_constant < sizeof ( _Fn ) <= sizeof ( void * ) >,
        is_trivially_copy_constructible < _Fn >, is_trivially_destructible < _Fn >>;
    if constexpr ( _Pass_by_value ) {
        return _Func;
    } else {
        return _Ref_fn < _Fn > { _Func };
    }
}
#line 582 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Unused_parameter { 
#line 583 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
constexpr _Unused_parameter() noexcept = default;
#line 584 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty >
    constexpr _Unused_parameter ( _Ty && ) noexcept { }
#line 586 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 588 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty, class  = void> constexpr bool 
#line 589 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Has_unchecked_begin_end = false; 
#line 591 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> constexpr bool 
#line 592 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Has_unchecked_begin_end< _Ty, void_t< decltype(std::declval< _Ty &> ()._Unchecked_begin()), decltype(std::declval< _Ty &> ()._Unchecked_end())> >  = true; 
#line 595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> using _Algorithm_int_t = conditional_t< is_integral_v< _Ty> , _Ty, __int64> ; 
#line 1059 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> using _Iter_ref_t = typename iterator_traits< _Iter> ::reference; 
#line 1062 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> using _Iter_value_t = typename iterator_traits< _Iter> ::value_type; 
#line 1065 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> using _Iter_diff_t = typename iterator_traits< _Iter> ::difference_type; 
#line 1068 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> using _Make_unsigned_like_t = make_unsigned_t< _Ty> ; 
#line 1072 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class ..._Iters> using _Common_diff_t = common_type_t< _Iter_diff_t< _Iters> ...> ; 
#line 1075 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> using _Iter_cat_t = typename iterator_traits< _Iter> ::iterator_category; 
#line 1078 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty, class  = void> constexpr bool 
#line 1079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_iterator_v = false; 
#line 1081 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> constexpr bool 
#line 1082 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_iterator_v< _Ty, void_t< _Iter_cat_t< _Ty> > >  = true; 
#line 1084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> 
#line 1085 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Is_iterator : public bool_constant< _Is_iterator_v< _Ty, void> >  { }; 
#line 1087 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1088 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_cpp17_input_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , input_iterator_tag> ; 
#line 1090 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1091 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_ranges_input_iter_v = _Is_cpp17_input_iter_v< _Iter> ; 
#line 1097 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1098 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_cpp17_fwd_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , forward_iterator_tag> ; 
#line 1100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_ranges_fwd_iter_v = _Is_cpp17_fwd_iter_v< _Iter> ; 
#line 1107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_cpp17_bidi_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , bidirectional_iterator_tag> ; 
#line 1110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_ranges_bidi_iter_v = _Is_cpp17_bidi_iter_v< _Iter> ; 
#line 1117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_cpp17_random_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , random_access_iterator_tag> ; 
#line 1120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_ranges_random_iter_v = _Is_cpp17_random_iter_v< _Iter> ; 
#line 1135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class , class  = void> 
#line 1136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Is_checked_helper { }; 
#line 1146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class  = void> constexpr bool 
#line 1147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Allow_inheriting_unwrap_v = true; 
#line 1149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Allow_inheriting_unwrap_v< _Iter, void_t< typename _Iter::_Prevent_inheriting_unwrap> >  = is_same_v< _Iter, typename _Iter::_Prevent_inheriting_unwrap> ; 
#line 1153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class _Sentinel = _Iter, class  = void> constexpr bool 
#line 1154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Range_verifiable_v = false; 
#line 1156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class _Sentinel> constexpr bool 
#line 1157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Range_verifiable_v< _Iter, _Sentinel, void_t< decltype(_Verify_range(std::declval< const _Iter &> (), std::declval< const _Sentinel &> ()))> >  = _Allow_inheriting_unwrap_v< _Iter, void> ; 
#line 1161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter, class _Sentinel >
constexpr void _Adl_verify_range ( const _Iter & _First, const _Sentinel & _Last ) {

    if constexpr ( _Range_verifiable_v < _Iter, _Sentinel > ) {
        _Verify_range ( _First, _Last );
    }
}
#line 1169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class  = void> constexpr bool 
#line 1170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Unwrappable_v = false; 
#line 1172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Unwrappable_v< _Iter, void_t< decltype(std::declval< _Remove_cvref_t< _Iter>  &> ()._Seek_to(std::declval< _Iter> ()._Unwrapped()))> >  = _Allow_inheriting_unwrap_v< _Remove_cvref_t< _Iter> , void> ; 
#line 1177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class  = void> constexpr bool 
#line 1178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Has_nothrow_unwrapped = false; 
#line 1179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Has_nothrow_unwrapped< _Iter, void_t< decltype(std::declval< _Iter> ()._Unwrapped())> >  = noexcept(std::declval< _Iter> ()._Unwrapped()); 
#line 1183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped ( _Iter && _It ) noexcept (
    ! _Unwrappable_v < _Iter > || _Has_nothrow_unwrapped < _Iter > ) {

    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_v < _Iter > ) {
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {
        return static_cast < _Iter && > ( _It );
    }
}
#line 1196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> using _Unwrapped_t = _Remove_cvref_t< decltype(_Get_unwrapped(std::declval< _Iter> ()))> ; 
#line 1199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class  = bool> constexpr bool 
#line 1200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Do_unwrap_when_unverified_v = false; 
#line 1202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Do_unwrap_when_unverified_v< _Iter, decltype(static_cast< bool>(_Iter::_Unwrap_when_unverified))>  = (static_cast< bool>(_Iter::_Unwrap_when_unverified)); 
#line 1207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Unwrappable_for_unverified_v = _Unwrappable_v< _Iter, void>  && _Do_unwrap_when_unverified_v< _Remove_cvref_t< _Iter> , bool> ; 
#line 1211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped_unverified ( _Iter && _It ) {

    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_for_unverified_v < _Iter > ) {
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {
        return static_cast < _Iter && > ( _It );
    }
}
#line 1223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> using _Unwrapped_unverified_t = _Remove_cvref_t< decltype(_Get_unwrapped_unverified(std::declval< _Iter> ()))> ; 
#line 1226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Distance_unknown { 
#line 1227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
constexpr _Distance_unknown operator-() const noexcept { 
#line 1228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
return {}; 
#line 1229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
} 
#line 1230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 1232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Diff> constexpr _Diff 
#line 1233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Max_possible_v{((static_cast< _Make_unsigned_like_t< _Diff> >(-1)) >> 1)}; 
#line 1235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Diff> constexpr _Diff 
#line 1236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Min_possible_v{((-_Max_possible_v< _Diff> ) - 1)}; 
#line 1238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class  = void> constexpr bool 
#line 1239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Offset_verifiable_v = false; 
#line 1241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1243 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Offset_verifiable_v< _Iter, void_t< decltype(std::declval< const _Iter &> ()._Verify_offset(_Iter_diff_t< _Iter> {}))> >  = true; 
#line 1246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 1247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Unwrappable_for_offset_v = _Unwrappable_v< _Iter, void>  && _Offset_verifiable_v< _Remove_cvref_t< _Iter> , void> ; 
#line 1250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter, class _Diff >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped_n ( _Iter && _It, const _Diff _Off ) {
    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_for_offset_v < _Iter > && is_integral_v < _Diff > ) {

        using _IDiff = _Iter_diff_t < _Remove_cvref_t < _Iter >>;
        using _CDiff = common_type_t < _Diff, _IDiff >;
        const auto _COff = static_cast < _CDiff > ( _Off );

        ;

        ( void ) _COff;

        _It . _Verify_offset ( static_cast < _IDiff > ( _Off ) );
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else if constexpr ( _Unwrappable_for_unverified_v < _Iter > ) {

        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {

        return static_cast < _Iter && > ( _It );
    }
}
#line 1276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class _UIter, class  = void> constexpr bool 
#line 1277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Wrapped_seekable_v = false; 
#line 1279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class _UIter> constexpr bool 
#line 1281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Wrapped_seekable_v< _Iter, _UIter, void_t< decltype(std::declval< _Iter &> ()._Seek_to(std::declval< _UIter> ()))> >  = true; 
#line 1284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter, class _UIter >
constexpr void _Seek_wrapped ( _Iter & _It, _UIter && _UIt ) {
    if constexpr ( _Wrapped_seekable_v < _Iter, _UIter > ) {
        _It . _Seek_to ( :: std :: forward < _UIter > ( _UIt ) );
    } else {
        _It = :: std :: forward < _UIter > ( _UIt );
    }
}
#line 1345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Checked, class _Iter >
[ [ nodiscard ] ] constexpr auto _Idl_distance ( const _Iter & _First, const _Iter & _Last ) {

    if constexpr ( _Is_ranges_random_iter_v < _Iter > ) {
        return static_cast < _Iter_diff_t < _Checked >> ( _Last - _First );
    } else {
        return _Distance_unknown { };
    }
}
#line 1355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem, bool _Is_enum = is_enum_v< _Elem> > 
#line 1356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Unwrap_enum { 
#line 1357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using type = underlying_type_t< _Elem> ; 
#line 1358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 1360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem> 
#line 1361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Unwrap_enum< _Elem, false>  { 
#line 1362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using type = _Elem; 
#line 1363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 1365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem> using _Unwrap_enum_t = typename _Unwrap_enum< _Elem> ::type; 
#line 1421 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Diff >
inline void advance ( _InIt & _Where, _Diff _Off ) {
    if constexpr ( _Is_ranges_random_iter_v < _InIt > ) {
        _Where += _Off;
    } else {
        if constexpr ( is_signed_v < _Diff > && ! _Is_ranges_bidi_iter_v < _InIt > ) {
            ;
        }

        decltype ( auto ) _UWhere = _Get_unwrapped_n ( :: std :: move ( _Where ), _Off );
        constexpr bool _Need_rewrap = ! is_reference_v < decltype ( _Get_unwrapped_n ( :: std :: move ( _Where ), _Off ) ) >;

        if constexpr ( is_signed_v < _Diff > && _Is_ranges_bidi_iter_v < _InIt > ) {
            for (; _Off < 0; ++ _Off ) {
                -- _UWhere;
            }
        }

        for (; 0 < _Off; -- _Off ) {
            ++ _UWhere;
        }

        if constexpr ( _Need_rewrap ) {
            _Seek_wrapped ( _Where, :: std :: move ( _UWhere ) );
        }
    }
}
#line 1449 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt >
[ [ nodiscard ] ] inline _Iter_diff_t < _InIt > distance ( _InIt _First, _InIt _Last ) {
    if constexpr ( _Is_ranges_random_iter_v < _InIt > ) {
        return _Last - _First;
    } else {
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        _Iter_diff_t < _InIt > _Off = 0;
        for (; _UFirst != _ULast; ++ _UFirst ) {
            ++ _Off;
        }

        return _Off;
    }
}
#line 1466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt >
constexpr _InIt _Next_iter ( _InIt _First ) {
    return ++ _First;
}
#line 1471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt >
[ [ nodiscard ] ] inline _InIt next ( _InIt _First, _Iter_diff_t < _InIt > _Off = 1 ) {
    static_assert ( _Is_ranges_input_iter_v < _InIt >, "next requires input iterator" );

    :: std :: advance ( _First, _Off );
    return _First;
}
#line 1479 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt >
constexpr _BidIt _Prev_iter ( _BidIt _First ) {
    return -- _First;
}
#line 1484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt >
[ [ nodiscard ] ] inline _BidIt prev ( _BidIt _First, _Iter_diff_t < _BidIt > _Off = 1 ) {
    static_assert ( _Is_ranges_bidi_iter_v < _BidIt >, "prev requires bidirectional iterator" );

    :: std :: advance ( _First, - _Off );
    return _First;
}
#line 1492 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class _Pointer, bool  = is_pointer_v< _Remove_cvref_t< _Iter> > > constexpr bool 
#line 1493 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Has_nothrow_operator_arrow = _Is_nothrow_convertible_v< _Iter, _Pointer, is_convertible_v< _Iter, _Pointer> , is_void_v< _Pointer> > ; 
#line 1495 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class _Pointer> constexpr bool 
#line 1496 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Has_nothrow_operator_arrow< _Iter, _Pointer, false>  = noexcept(_Fake_copy_init< _Pointer> (std::declval< _Iter> ().operator->())); 
#line 1499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt >
class reverse_iterator {
public :
    using iterator_type = _BidIt;







    using iterator_category = _Iter_cat_t < _BidIt >;

    using value_type = _Iter_value_t < _BidIt >;
    using difference_type = _Iter_diff_t < _BidIt >;
    using pointer = typename iterator_traits < _BidIt > :: pointer;
    using reference = _Iter_ref_t < _BidIt >;

    template < class >
    friend class reverse_iterator;

    inline reverse_iterator ( ) = default;

    inline explicit reverse_iterator ( _BidIt _Right ) noexcept (
        is_nothrow_move_constructible_v < _BidIt > )
        : current ( :: std :: move ( _Right ) ) { }


    template < class _Other >



    inline reverse_iterator ( const reverse_iterator < _Other > & _Right ) noexcept (
        is_nothrow_constructible_v < _BidIt, const _Other & > )
        : current ( _Right . current ) { }

    template < class _Other >




    inline reverse_iterator & operator = ( const reverse_iterator < _Other > & _Right ) noexcept (
        is_nothrow_assignable_v < _BidIt &, const _Other & > ) {
        current = _Right . current;
        return * this;
    }


    [ [ nodiscard ] ] inline _BidIt base ( ) const noexcept ( is_nothrow_copy_constructible_v < _BidIt > ) {
        return current;
    }

    [ [ nodiscard ] ] inline reference operator * ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _BidIt > && noexcept ( * -- ( :: std :: declval < _BidIt & > ( ) ) ) ) {
        _BidIt _Tmp = current;
        return * -- _Tmp;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _BidIt > && noexcept ( -- ( :: std :: declval < _BidIt & > ( ) ) )
                 && _Has_nothrow_operator_arrow < _BidIt &, pointer > )



    {
        _BidIt _Tmp = current;
        -- _Tmp;
        if constexpr ( is_pointer_v < _BidIt > ) {
            return _Tmp;
        } else {
            return _Tmp . operator -> ( );
        }
    }

    inline reverse_iterator & operator ++ ( ) noexcept ( noexcept ( -- current ) ) {
        -- current;
        return * this;
    }

    inline reverse_iterator operator ++ ( int ) noexcept (
        is_nothrow_copy_constructible_v < _BidIt > && noexcept ( -- current ) ) {
        reverse_iterator _Tmp = * this;
        -- current;
        return _Tmp;
    }

    inline reverse_iterator & operator -- ( ) noexcept ( noexcept ( ++ current ) ) {
        ++ current;
        return * this;
    }

    inline reverse_iterator operator -- ( int ) noexcept (
        is_nothrow_copy_constructible_v < _BidIt > && noexcept ( ++ current ) ) {
        reverse_iterator _Tmp = * this;
        ++ current;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline reverse_iterator operator + ( const difference_type _Off ) const
        noexcept ( noexcept ( reverse_iterator ( current - _Off ) ) ) {
        return reverse_iterator ( current - _Off );
    }

    inline reverse_iterator & operator += ( const difference_type _Off ) noexcept (
        noexcept ( current -= _Off ) ) {
        current -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reverse_iterator operator - ( const difference_type _Off ) const
        noexcept ( noexcept ( reverse_iterator ( current + _Off ) ) ) {
        return reverse_iterator ( current + _Off );
    }

    inline reverse_iterator & operator -= ( const difference_type _Off ) noexcept (
        noexcept ( current += _Off ) ) {
        current += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const
        noexcept ( noexcept ( _Fake_copy_init < reference > ( current [ _Off ] ) ) ) {
        return current [ static_cast < difference_type > ( - _Off - 1 ) ];
    }





















    using _Prevent_inheriting_unwrap = reverse_iterator;

    template < class _BidIt2, enable_if_t < _Range_verifiable_v < _BidIt, _BidIt2 >, int > = 0 >
    friend constexpr void _Verify_range (
        const reverse_iterator & _First, const reverse_iterator < _BidIt2 > & _Last ) noexcept {
        _Verify_range ( _Last . _Get_current ( ), _First . current );
    }

    template < class _BidIt2 = _BidIt, enable_if_t < _Offset_verifiable_v < _BidIt2 >, int > = 0 >
    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        do { if ( _Off != _Min_possible_v < difference_type > ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        current . _Verify_offset ( - _Off );
    }

    template < class _BidIt2 = _BidIt, enable_if_t < _Unwrappable_v < const _BidIt2 & >, int > = 0 >
    [ [ nodiscard ] ] constexpr reverse_iterator < _Unwrapped_t < const _BidIt2 & >> _Unwrapped ( ) const & noexcept (
        noexcept ( static_cast < reverse_iterator < _Unwrapped_t < const _BidIt2 & >> > ( current . _Unwrapped ( ) ) ) ) {
        return static_cast < reverse_iterator < _Unwrapped_t < const _BidIt2 & >> > ( current . _Unwrapped ( ) );
    }
    template < class _BidIt2 = _BidIt, enable_if_t < _Unwrappable_v < _BidIt2 >, int > = 0 >
    [ [ nodiscard ] ] constexpr reverse_iterator < _Unwrapped_t < _BidIt2 >> _Unwrapped ( ) && noexcept (
        noexcept ( static_cast < reverse_iterator < _Unwrapped_t < _BidIt2 >> > ( :: std :: move ( current ) . _Unwrapped ( ) ) ) ) {
        return static_cast < reverse_iterator < _Unwrapped_t < _BidIt2 >> > ( :: std :: move ( current ) . _Unwrapped ( ) );
    }

    static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v < _BidIt >;

    template < class _Src, enable_if_t < _Wrapped_seekable_v < _BidIt, const _Src & >, int > = 0 >
    constexpr void _Seek_to ( const reverse_iterator < _Src > & _It ) noexcept ( noexcept ( current . _Seek_to ( _It . current ) ) ) {
        current . _Seek_to ( _It . current );
    }

    [ [ nodiscard ] ] constexpr const _BidIt & _Get_current ( ) const noexcept {
        return current;
    }

protected :
    _BidIt current { };
};
#line 1684 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator == ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) == _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) == _Right . _Get_current ( );
}
#line 1699 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator != ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) != _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) != _Right . _Get_current ( );
}
#line 1714 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator < ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) > _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) > _Right . _Get_current ( );
}
#line 1729 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator > ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) < _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) < _Right . _Get_current ( );
}
#line 1744 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator <= ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) >= _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) >= _Right . _Get_current ( );
}
#line 1759 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator >= ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) <= _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) <= _Right . _Get_current ( );
}
#line 1783 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline auto
    operator - ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Right . _Get_current ( ) - _Left . _Get_current ( ) ) )
    -> decltype ( _Right . _Get_current ( ) - _Left . _Get_current ( ) ) {
    return _Right . _Get_current ( ) - _Left . _Get_current ( );
}
#line 1791 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt >
[ [ nodiscard ] ] inline reverse_iterator < _BidIt > operator + ( typename reverse_iterator < _BidIt > :: difference_type _Off,
    const reverse_iterator < _BidIt > & _Right ) noexcept ( noexcept ( _Right + _Off ) ) {
    return _Right + _Off;
}
#line 1797 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt >
[ [ nodiscard ] ] inline reverse_iterator < _BidIt > make_reverse_iterator ( _BidIt _Iter ) noexcept (
    is_nothrow_move_constructible_v < _BidIt > ) {
    return reverse_iterator < _BidIt > ( :: std :: move ( _Iter ) );
}
#line 1809 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto begin ( _Container & _Cont ) noexcept ( noexcept ( _Cont . begin ( ) ) )
    -> decltype ( _Cont . begin ( ) ) {
    return _Cont . begin ( );
}
#line 1815 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto begin ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . begin ( ) ) )
    -> decltype ( _Cont . begin ( ) ) {
    return _Cont . begin ( );
}
#line 1821 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto end ( _Container & _Cont ) noexcept ( noexcept ( _Cont . end ( ) ) )
    -> decltype ( _Cont . end ( ) ) {
    return _Cont . end ( );
}
#line 1827 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto end ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . end ( ) ) )
    -> decltype ( _Cont . end ( ) ) {
    return _Cont . end ( );
}
#line 1833 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * begin ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array;
}
#line 1838 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * end ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array + _Size;
}
#line 1843 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] constexpr auto cbegin ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: begin ( _Cont ) ) )
    -> decltype ( :: std :: begin ( _Cont ) ) {
    return :: std :: begin ( _Cont );
}
#line 1849 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] constexpr auto cend ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: end ( _Cont ) ) )
    -> decltype ( :: std :: end ( _Cont ) ) {
    return :: std :: end ( _Cont );
}
#line 1855 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto rbegin ( _Container & _Cont ) noexcept ( noexcept ( _Cont . rbegin ( ) ) )
    -> decltype ( _Cont . rbegin ( ) ) {
    return _Cont . rbegin ( );
}
#line 1861 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto rbegin ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . rbegin ( ) ) )
    -> decltype ( _Cont . rbegin ( ) ) {
    return _Cont . rbegin ( );
}
#line 1867 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto rend ( _Container & _Cont ) noexcept ( noexcept ( _Cont . rend ( ) ) )
    -> decltype ( _Cont . rend ( ) ) {
    return _Cont . rend ( );
}
#line 1873 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto rend ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . rend ( ) ) )
    -> decltype ( _Cont . rend ( ) ) {
    return _Cont . rend ( );
}
#line 1879 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] inline reverse_iterator < _Ty * > rbegin ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return reverse_iterator < _Ty * > ( _Array + _Size );
}
#line 1884 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] inline reverse_iterator < _Ty * > rend ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return reverse_iterator < _Ty * > ( _Array );
}
#line 1889 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Elem >
[ [ nodiscard ] ] inline reverse_iterator < const _Elem * > rbegin ( initializer_list < _Elem > _Ilist ) noexcept
 {
    return reverse_iterator < const _Elem * > ( _Ilist . end ( ) );
}
#line 1895 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Elem >
[ [ nodiscard ] ] inline reverse_iterator < const _Elem * > rend ( initializer_list < _Elem > _Ilist ) noexcept
 {
    return reverse_iterator < const _Elem * > ( _Ilist . begin ( ) );
}
#line 1901 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto crbegin ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: rbegin ( _Cont ) ) )
    -> decltype ( :: std :: rbegin ( _Cont ) ) {
    return :: std :: rbegin ( _Cont );
}
#line 1907 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] inline auto crend ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: rend ( _Cont ) ) )
    -> decltype ( :: std :: rend ( _Cont ) ) {
    return :: std :: rend ( _Cont );
}
#line 1913 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] constexpr auto size ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . size ( ) ) )
    -> decltype ( _Cont . size ( ) ) {
    return _Cont . size ( );
}
#line 1919 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr size_t size ( const _Ty ( & ) [ _Size ] ) noexcept {
    return _Size;
}
#line 1939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr auto empty ( const _Container & _Cont ) noexcept (
    noexcept ( _Cont . empty ( ) ) )
    -> decltype ( _Cont . empty ( ) ) {
    return _Cont . empty ( );
}
#line 1946 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, size_t _Size >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr bool empty ( const _Ty ( & ) [ _Size ] ) noexcept {
    return false;
}
#line 1951 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Elem >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr bool empty ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . size ( ) == 0;
}
#line 1956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] constexpr auto data ( _Container & _Cont ) noexcept ( noexcept ( _Cont . data ( ) ) )
    -> decltype ( _Cont . data ( ) ) {
    return _Cont . data ( );
}
#line 1962 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Container >
[ [ nodiscard ] ] constexpr auto data ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . data ( ) ) )
    -> decltype ( _Cont . data ( ) ) {
    return _Cont . data ( );
}
#line 1968 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * data ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array;
}
#line 1973 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * data ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . begin ( );
}
#line 3952 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Container_proxy; 
#line 3953 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Iterator_base12; 
#line 3955 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Default_sentinel { }; 
#line 3973 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> 
#line 3974 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Move_iterator_category { 
#line 3975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using iterator_category = _Iter_cat_t< _Iter> ; 
#line 3976 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 3979 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter >
class move_iterator : public _Move_iterator_category < _Iter > {
public :
    using iterator_type = _Iter;
    using value_type = _Iter_value_t < _Iter >;
    using difference_type = _Iter_diff_t < _Iter >;
    using pointer = _Iter;




















    using reference =
        conditional_t < is_reference_v < _Iter_ref_t < _Iter >>, remove_reference_t < _Iter_ref_t < _Iter >> &&, _Iter_ref_t < _Iter >>;


    inline move_iterator ( ) = default;

    inline explicit move_iterator ( _Iter _Right ) noexcept ( is_nothrow_move_constructible_v < _Iter > )
        : _Current ( :: std :: move ( _Right ) ) { }


    template < class _Other >



    inline move_iterator ( const move_iterator < _Other > & _Right ) noexcept (
        is_nothrow_constructible_v < _Iter, const _Other & > )
        : _Current ( _Right . base ( ) ) { }

    template < class _Other >




    inline move_iterator & operator = ( const move_iterator < _Other > & _Right ) noexcept (
        is_nothrow_assignable_v < _Iter &, const _Other & > ) {
        _Current = _Right . base ( );
        return * this;
    }










    [ [ nodiscard ] ] inline iterator_type base ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _Iter > ) {
        return _Current;
    }


    [ [ nodiscard ] ] inline reference operator * ( ) const





        noexcept ( noexcept ( static_cast < reference > ( * _Current ) ) ) {
        return static_cast < reference > ( * _Current );
    }


     [ [ nodiscard ] ] inline pointer operator -> ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _Iter > ) {
        return _Current;
    }

    inline move_iterator & operator ++ ( ) noexcept ( noexcept ( ++ _Current ) ) {
        ++ _Current;
        return * this;
    }

    inline auto operator ++ ( int ) noexcept (
        is_nothrow_copy_constructible_v < _Iter > && noexcept ( ++ _Current ) ) {



            move_iterator _Tmp = * this;
            ++ _Current;
            return _Tmp;





    }

    inline move_iterator & operator -- ( ) noexcept ( noexcept ( -- _Current ) ) {
        -- _Current;
        return * this;
    }

    inline move_iterator operator -- ( int ) noexcept (
        is_nothrow_copy_constructible_v < _Iter > && noexcept ( -- _Current ) ) {
        move_iterator _Tmp = * this;
        -- _Current;
        return _Tmp;
    }

    template < class _Iter2 = _Iter >
    [ [ nodiscard ] ] auto operator == ( _Default_sentinel _Sentinel ) const noexcept
        -> decltype ( :: std :: declval < const _Iter2 & > ( ) == _Sentinel ) {
        return _Current == _Sentinel;
    }

    template < class _Iter2 = _Iter >
    [ [ nodiscard ] ] auto operator != ( _Default_sentinel _Sentinel ) const noexcept
        -> decltype ( :: std :: declval < const _Iter2 & > ( ) != _Sentinel ) {
        return _Current != _Sentinel;
    }

    [ [ nodiscard ] ] inline move_iterator operator + ( const difference_type _Off ) const
        noexcept ( noexcept ( move_iterator ( _Current + _Off ) ) ) {
        return move_iterator ( _Current + _Off );
    }

    inline move_iterator & operator += ( const difference_type _Off ) noexcept (
        noexcept ( _Current += _Off ) ) {
        _Current += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline move_iterator operator - ( const difference_type _Off ) const
        noexcept ( noexcept ( move_iterator ( _Current - _Off ) ) ) {
        return move_iterator ( _Current - _Off );
    }

    inline move_iterator & operator -= ( const difference_type _Off ) noexcept (
        noexcept ( _Current -= _Off ) ) {
        _Current -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const




        noexcept ( noexcept ( :: std :: move ( _Current [ _Off ] ) ) ) {
        return :: std :: move ( _Current [ _Off ] );

    }

































    template < class _Iter2, enable_if_t < _Range_verifiable_v < _Iter, _Iter2 >, int > = 0 >
    friend constexpr void _Verify_range ( const move_iterator & _First, const move_iterator < _Iter2 > & _Last ) noexcept {
        _Verify_range ( _First . _Current, _Last . _Get_current ( ) );
    }







    using _Prevent_inheriting_unwrap = move_iterator;

    template < class _Iter2 = iterator_type, enable_if_t < _Offset_verifiable_v < _Iter2 >, int > = 0 >
    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        _Current . _Verify_offset ( _Off );
    }

    template < class _Iter2 = iterator_type, enable_if_t < _Unwrappable_v < const _Iter2 & >, int > = 0 >
    [ [ nodiscard ] ] constexpr move_iterator < _Unwrapped_t < const _Iter2 & >> _Unwrapped ( ) const & noexcept (
        noexcept ( static_cast < move_iterator < _Unwrapped_t < const _Iter2 & >> > ( _Current . _Unwrapped ( ) ) ) ) {
        return static_cast < move_iterator < _Unwrapped_t < const _Iter2 & >> > ( _Current . _Unwrapped ( ) );
    }
    template < class _Iter2 = iterator_type, enable_if_t < _Unwrappable_v < _Iter2 >, int > = 0 >
    [ [ nodiscard ] ] constexpr move_iterator < _Unwrapped_t < _Iter2 >> _Unwrapped ( ) && noexcept (
        noexcept ( static_cast < move_iterator < _Unwrapped_t < _Iter2 >> > ( :: std :: move ( _Current ) . _Unwrapped ( ) ) ) ) {
        return static_cast < move_iterator < _Unwrapped_t < _Iter2 >> > ( :: std :: move ( _Current ) . _Unwrapped ( ) );
    }

    static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v < iterator_type >;

    template < class _Src, enable_if_t < _Wrapped_seekable_v < iterator_type, const _Src & >, int > = 0 >
    constexpr void _Seek_to ( const move_iterator < _Src > & _It ) noexcept ( noexcept ( _Current . _Seek_to ( _It . _Get_current ( ) ) ) ) {
        _Current . _Seek_to ( _It . _Get_current ( ) );
    }
    template < class _Src, enable_if_t < _Wrapped_seekable_v < iterator_type, _Src >, int > = 0 >
    constexpr void _Seek_to ( move_iterator < _Src > && _It ) noexcept (
        noexcept ( _Current . _Seek_to ( :: std :: move ( _It ) . _Get_current ( ) ) ) ) {
        _Current . _Seek_to ( :: std :: move ( _It ) . _Get_current ( ) );
    }

    [ [ nodiscard ] ] constexpr const iterator_type & _Get_current ( ) const & noexcept {
        return _Current;
    }
    [ [ nodiscard ] ] constexpr iterator_type && _Get_current ( ) && noexcept {
        return :: std :: move ( _Current );
    }

private :
    iterator_type _Current { };
};
#line 4226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool
    operator == ( const move_iterator < _Iter1 > & _Left, const move_iterator < _Iter2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . base ( ) == _Right . base ( ) ) ) )







{
    return _Left . base ( ) == _Right . base ( );
}
#line 4242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator != ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left == _Right ) ) {
    return ! ( _Left == _Right );
}
#line 4249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool
    operator < ( const move_iterator < _Iter1 > & _Left, const move_iterator < _Iter2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . base ( ) < _Right . base ( ) ) ) )







{
    return _Left . base ( ) < _Right . base ( );
}
#line 4264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator > ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Right < _Left ) )



{
    return _Right < _Left;
}
#line 4274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator <= ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Right < _Left ) )



{
    return ! ( _Right < _Left );
}
#line 4284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator >= ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left < _Right ) )



{
    return ! ( _Left < _Right );
}
#line 4302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline auto operator - ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left . base ( ) - _Right . base ( ) ) )
    -> decltype ( _Left . base ( ) - _Right . base ( ) ) {
    return _Left . base ( ) - _Right . base ( );
}
#line 4309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter >
[ [ nodiscard ] ] inline move_iterator < _Iter >
    operator + ( typename move_iterator < _Iter > :: difference_type _Off, const move_iterator < _Iter > & _Right ) noexcept (
        noexcept ( move_iterator < _Iter > ( _Right . base ( ) + _Off ) ) )







{
    return move_iterator < _Iter > ( _Right . base ( ) + _Off );
}
#line 4324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter >
[ [ nodiscard ] ] inline move_iterator < _Iter > make_move_iterator ( _Iter _It ) noexcept (
    is_nothrow_move_constructible_v < _Iter > ) {
    return move_iterator < _Iter > ( :: std :: move ( _It ) );
}
#line 4364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 4365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Iterator_is_contiguous = is_pointer_v< _Iter> ; 
#line 4367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter >
[ [ nodiscard ] ] constexpr auto _To_address ( const _Iter & _Val ) noexcept {
    ;
    return _Val;
}
#line 4374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter >
[ [ nodiscard ] ] constexpr auto _To_address ( const move_iterator < _Iter > & _Val ) noexcept {
    return _To_address ( _Val . base ( ) );
}
#line 4381 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter1, class _Iter2> constexpr bool 
#line 4382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Iterators_are_contiguous = _Iterator_is_contiguous< _Iter1>  && _Iterator_is_contiguous< _Iter2> ; 
#line 4385 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter> constexpr bool 
#line 4386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Iterator_is_volatile = is_volatile_v< remove_reference_t< _Iter_ref_t< _Iter> > > ; 
#line 4388 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Source, class _Dest> constexpr bool 
#line 4389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_pointer_address_convertible = (is_void_v< _Source>  || is_void_v< _Dest> ) || is_same_v< remove_cv_t< _Source> , remove_cv_t< _Dest> > ; 
#line 4398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Source, class _Dest, class _SourceRef, class _DestRef> 
#line 4399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Trivial_cat { 
#line 4400 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using _USource = _Unwrap_enum_t< _Source> ; 
#line 4401 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using _UDest = _Unwrap_enum_t< _Dest> ; 
#line 4403 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
static constexpr bool _Same_size_and_compatible = (((sizeof(_Source) == sizeof(_Dest)) && (is_same_v< bool, _USource>  >= is_same_v< bool, _UDest> )) && ((is_same_v< _USource, _UDest>  || (is_integral_v< _USource>  && is_integral_v< _UDest> )) || (is_floating_point_v< _USource>  && is_floating_point_v< _UDest> ))); 
#line 4412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
static constexpr bool _Bitcopy_constructible = (_Same_size_and_compatible && is_trivially_constructible_v< _Dest, _SourceRef> ); 
#line 4415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
static constexpr bool _Bitcopy_assignable = (_Same_size_and_compatible && is_trivially_assignable_v< _DestRef, _SourceRef> ); 
#line 4417 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 4419 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Source, class _Dest, class _SourceRef, class _DestRef> 
#line 4420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Trivial_cat< _Source *, _Dest *, _SourceRef, _DestRef>  { 
#line 4421 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
static constexpr bool _Bitcopy_constructible = (_Is_pointer_address_convertible< _Source, _Dest>  && is_trivially_constructible_v< _Dest *, _SourceRef> ); 
#line 4424 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
static constexpr bool _Bitcopy_assignable = (_Is_pointer_address_convertible< _Source, _Dest>  && is_trivially_assignable_v< _DestRef, _SourceRef> ); 
#line 4426 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 4428 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _False_trivial_cat { 
#line 4429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
static constexpr bool _Bitcopy_constructible = false; 
#line 4430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
static constexpr bool _Bitcopy_assignable = false; 
#line 4431 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 4433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _SourceIt, class _DestIt, bool 
#line 4434 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Are_contiguous = (_Iterators_are_contiguous< _SourceIt, _DestIt>  && (!_Iterator_is_volatile< _SourceIt> )) && (!_Iterator_is_volatile< _DestIt> )> 
#line 4436 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Iter_move_cat : public _Trivial_cat< _Iter_value_t< _SourceIt> , _Iter_value_t< _DestIt> , remove_reference_t< _Iter_ref_t< _SourceIt> >  &&, _Iter_ref_t< _DestIt> >  { 
#line 4437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 4439 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _SourceIt, class _DestIt> 
#line 4440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Iter_move_cat< _SourceIt, _DestIt, false>  : public _False_trivial_cat { }; 
#line 4442 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _SourceIt, class _DestIt> 
#line 4443 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Iter_move_cat< move_iterator< _SourceIt> , _DestIt, false>  : public std::_Iter_move_cat< _SourceIt, _DestIt>  { }; 
#line 4445 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _SourceIt, class _DestIt, bool 
#line 4446 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Are_contiguous = (_Iterators_are_contiguous< _SourceIt, _DestIt>  && (!_Iterator_is_volatile< _SourceIt> )) && (!_Iterator_is_volatile< _DestIt> )> 
#line 4448 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Iter_copy_cat : public _Trivial_cat< _Iter_value_t< _SourceIt> , _Iter_value_t< _DestIt> , _Iter_ref_t< _SourceIt> , _Iter_ref_t< _DestIt> >  { 
#line 4449 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 4451 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _SourceIt, class _DestIt> 
#line 4452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Iter_copy_cat< _SourceIt, _DestIt, false>  : public _False_trivial_cat { }; 
#line 4454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _SourceIt, class _DestIt> 
#line 4455 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Iter_copy_cat< move_iterator< _SourceIt> , _DestIt, false>  : public _Iter_move_cat< _SourceIt, _DestIt>  { }; 
#line 4457 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Iter1, class _Sent1, class _Iter2 >
inline void _Verify_ranges_do_not_overlap ( const _Iter1 & _First1, const _Sent1 & _Last1, const _Iter2 & _First2 ) {
























    ( void ) _First1;
    ( void ) _Last1;
    ( void ) _First2;

}
#line 4489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _CtgIt, class _OutCtgIt >
_OutCtgIt _Copy_memmove ( _CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest ) {
    auto _FirstPtr = _To_address ( _First );
    auto _LastPtr = _To_address ( _Last );
    auto _DestPtr = _To_address ( _Dest );
    const char * const _First_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _FirstPtr ) );
    const char * const _Last_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _LastPtr ) );
    char * const _Dest_ch = const_cast < char * > ( reinterpret_cast < const volatile char * > ( _DestPtr ) );
    const auto _Count = static_cast < size_t > ( _Last_ch - _First_ch );
    :: memmove ( _Dest_ch, _First_ch, _Count );
    if constexpr ( is_pointer_v < _OutCtgIt > ) {
        return reinterpret_cast < _OutCtgIt > ( _Dest_ch + _Count );
    } else {
        return _Dest + ( _LastPtr - _FirstPtr );
    }
}
#line 4506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _CtgIt, class _OutCtgIt >
_OutCtgIt _Copy_memmove_n ( _CtgIt _First, const size_t _Count, _OutCtgIt _Dest ) {
    const auto _Result = _Copy_memmove ( _First, _First + _Count, _Dest );
    if constexpr ( is_pointer_v < _OutCtgIt > ) {
        return _Result;
    } else {
        return _Dest + static_cast < _Iter_diff_t < _OutCtgIt >> ( _Count );
    }
}
#line 4516 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _It, bool _RequiresMutable = false> constexpr bool 
#line 4517 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_vb_iterator = false; 
#line 4519 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _SizeTy, class _OutIt >
inline _OutIt _Copy_n_unchecked4 ( _InIt _First, _SizeTy _Count, _OutIt _Dest ) {






    if constexpr ( _Iter_copy_cat < _InIt, _OutIt > :: _Bitcopy_assignable ) {



        {
            return _Copy_memmove_n ( _First, static_cast < size_t > ( _Count ), _Dest );
        }
    }

    for (; _Count != 0; ++ _Dest, ( void ) ++ _First, -- _Count ) {
        * _Dest = * _First;
    }

    return _Dest;
}
#line 4543 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _InIt, class _Sent, class _OutIt> using _Sent_copy_cat = conditional_t< is_same_v< _Sent, _InIt> , _Iter_copy_cat< _InIt, _OutIt> , _False_trivial_cat> ; 
#line 4552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Sent, class _OutIt >
inline _OutIt _Copy_unchecked ( _InIt _First, _Sent _Last, _OutIt _Dest ) {


    if constexpr ( _Is_vb_iterator < _InIt > && _Is_vb_iterator < _OutIt, true > ) {
        return _Copy_vbool ( _First, _Last, _Dest );
    } else {
        if constexpr ( _Sent_copy_cat < _InIt, _Sent, _OutIt > :: _Bitcopy_assignable ) {



            {





                {
                    return _Copy_memmove ( _First, _Last, _Dest );
                }
            }
        }

        for (; _First != _Last; ++ _Dest, ( void ) ++ _First ) {
            * _Dest = * _First;
        }

        return _Dest;
    }
}
#line 4583 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _OutIt >
inline _OutIt copy ( _InIt _First, _InIt _Last, _OutIt _Dest ) {
    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, :: std :: _Copy_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4748 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Diff, class _OutIt >
inline _OutIt copy_n ( _InIt _First, _Diff _Count_raw, _OutIt _Dest ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( 0 < _Count ) {
        if constexpr ( _Is_vb_iterator < _InIt > && _Is_vb_iterator < _OutIt, true > ) {
            return _Copy_vbool ( _First, _First + _Count, _Dest );
        } else {
            auto _UFirst = _Get_unwrapped_n ( _First, _Count );
            auto _UDest = _Get_unwrapped_n ( _Dest, _Count );
            if constexpr ( _Iter_copy_cat < decltype ( _UFirst ), decltype ( _UDest ) > :: _Bitcopy_assignable ) {



                {
                    _UDest = _Copy_memmove_n ( _UFirst, static_cast < size_t > ( _Count ), _UDest );
                    _Seek_wrapped ( _Dest, _UDest );
                    return _Dest;
                }
            }

            for (;; ) {
                * _UDest = * _UFirst;
                ++ _UDest;
                -- _Count;

                if ( _Count == 0 ) {
                    break;
                }

                ++ _UFirst;
            }

            _Seek_wrapped ( _Dest, _UDest );
        }
    }

    return _Dest;
}
#line 4799 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _CtgIt1, class _CtgIt2 >
_CtgIt2 _Copy_backward_memmove ( _CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest ) {

    auto _FirstPtr = _To_address ( _First );
    auto _LastPtr = _To_address ( _Last );
    auto _DestPtr = _To_address ( _Dest );
    const char * const _First_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _FirstPtr ) );
    const char * const _Last_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _LastPtr ) );
    char * const _Dest_ch = const_cast < char * > ( reinterpret_cast < const volatile char * > ( _DestPtr ) );
    const auto _Count = static_cast < size_t > ( _Last_ch - _First_ch );
    auto _Result = :: memmove ( _Dest_ch - _Count, _First_ch, _Count );
    if constexpr ( is_pointer_v < _CtgIt2 > ) {
        return static_cast < _CtgIt2 > ( _Result );
    } else {
        return _Dest - ( _LastPtr - _FirstPtr );
    }
}
#line 4817 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
_BidIt2 _Copy_backward_memmove ( move_iterator < _BidIt1 > _First, move_iterator < _BidIt1 > _Last, _BidIt2 _Dest ) {
    return _Copy_backward_memmove ( _First . base ( ), _Last . base ( ), _Dest );
}
#line 4822 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline _BidIt2 _Copy_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    if constexpr ( _Iter_copy_cat < _BidIt1, _BidIt2 > :: _Bitcopy_assignable ) {



        {
            return _Copy_backward_memmove ( _First, _Last, _Dest );
        }
    }

    while ( _First != _Last ) {
        * -- _Dest = * -- _Last;
    }

    return _Dest;
}
#line 4841 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, - _Idl_distance < _BidIt1 > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Copy_backward_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _OutIt >
inline _OutIt _Move_unchecked ( _InIt _First, _InIt _Last, _OutIt _Dest ) {


    if constexpr ( _Is_vb_iterator < _InIt > && _Is_vb_iterator < _OutIt, true > ) {
        return _Copy_vbool ( _First, _Last, _Dest );
    } else {
        if constexpr ( _Iter_move_cat < _InIt, _OutIt > :: _Bitcopy_assignable ) {



            {
                return _Copy_memmove ( _First, _Last, _Dest );
            }
        }

        for (; _First != _Last; ++ _Dest, ( void ) ++ _First ) {
            * _Dest = :: std :: move ( * _First );
        }

        return _Dest;
    }
}
#line 4876 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _OutIt >
inline _OutIt move ( _InIt _First, _InIt _Last, _OutIt _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, :: std :: _Move_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4898 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 _Move_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {


    if constexpr ( _Iter_move_cat < _BidIt1, _BidIt2 > :: _Bitcopy_assignable ) {



        {
            return _Copy_backward_memmove ( _First, _Last, _Dest );
        }
    }

    while ( _First != _Last ) {
        * -- _Dest = :: std :: move ( * -- _Last );
    }

    return _Dest;
}
#line 4918 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, - _Idl_distance < _BidIt1 > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Move_backward_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4929 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> 
#line 4930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Is_character : public false_type { }; 
#line 4933 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct _Is_character< char>  : public true_type { }; 
#line 4936 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct _Is_character< signed char>  : public true_type { }; 
#line 4939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct _Is_character< unsigned char>  : public true_type { }; 
#line 4946 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> 
#line 4947 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Is_character_or_bool : public _Is_character< _Ty> ::type { }; 
#line 4950 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template<> struct _Is_character_or_bool< bool>  : public true_type { }; 
#line 4952 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty> 
#line 4953 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Is_character_or_byte_or_bool : public _Is_character_or_bool< _Ty> ::type { }; 
#line 4962 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _FwdIt, class _Ty, bool  = _Iterator_is_contiguous< _FwdIt> > constexpr bool 
#line 4963 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Fill_memset_is_safe = conjunction_v< is_scalar< _Ty> , _Is_character_or_byte_or_bool< _Unwrap_enum_t< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , is_assignable< _Iter_ref_t< _FwdIt> , const _Ty &> > ; 
#line 4967 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _FwdIt, class _Ty> constexpr bool 
#line 4968 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Fill_memset_is_safe< _FwdIt, _Ty, false>  = false; 
#line 4970 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _FwdIt, class _Ty, bool  = _Iterator_is_contiguous< _FwdIt> > constexpr bool 
#line 4971 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Fill_zero_memset_is_safe = conjunction_v< is_scalar< _Ty> , is_scalar< _Iter_value_t< _FwdIt> > , negation< is_member_pointer< _Iter_value_t< _FwdIt> > > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , is_assignable< _Iter_ref_t< _FwdIt> , const _Ty &> > ; 
#line 4975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _FwdIt, class _Ty> constexpr bool 
#line 4976 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Fill_zero_memset_is_safe< _FwdIt, _Ty, false>  = false; 
#line 4978 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _CtgIt, class _Ty >
void _Fill_memset ( _CtgIt _Dest, const _Ty _Val, const size_t _Count ) {

    _Iter_value_t < _CtgIt > _Dest_val = _Val;
    :: memset ( _To_address ( _Dest ), static_cast < unsigned char > ( _Dest_val ), _Count );
}
#line 4985 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _CtgIt >
void _Fill_zero_memset ( _CtgIt _Dest, const size_t _Count ) {
    :: memset ( _To_address ( _Dest ), 0, _Count * sizeof ( _Iter_value_t < _CtgIt > ) );
}
#line 4990 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty >
[ [ nodiscard ] ] bool _Is_all_bits_zero ( const _Ty & _Val ) {

    ;
    if constexpr ( is_same_v < _Ty, nullptr_t > ) {
        return true;
    } else {
        constexpr _Ty _Zero { };
        return :: memcmp ( & _Val, & _Zero, sizeof ( _Ty ) ) == 0;
    }
}
#line 5002 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Ty >
inline void fill ( const _FwdIt _First, const _FwdIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _FwdIt, true > ) {
        _Fill_vbool ( _First, _Last, _Val );
    } else {
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );



        {
            if constexpr ( _Fill_memset_is_safe < decltype ( _UFirst ), _Ty > ) {
                _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _ULast - _UFirst ) );
                return;
            } else if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UFirst ), _Ty > ) {
                if ( _Is_all_bits_zero ( _Val ) ) {
                    _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _ULast - _UFirst ) );
                    return;
                }
            }
        }

        for (; _UFirst != _ULast; ++ _UFirst ) {
            * _UFirst = _Val;
        }
    }
}
#line 5042 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _OutIt, class _Diff, class _Ty >
inline _OutIt fill_n ( _OutIt _Dest, const _Diff _Count_raw, const _Ty & _Val ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( 0 < _Count ) {
        if constexpr ( _Is_vb_iterator < _OutIt, true > ) {
            const auto _Last = _Dest + static_cast < typename _OutIt :: difference_type > ( _Count );
            _Fill_vbool ( _Dest, _Last, _Val );
            return _Last;
        } else {
            auto _UDest = _Get_unwrapped_n ( _Dest, _Count );



            {
                if constexpr ( _Fill_memset_is_safe < decltype ( _UDest ), _Ty > ) {
                    _Fill_memset ( _UDest, _Val, static_cast < size_t > ( _Count ) );
                    _Seek_wrapped ( _Dest, _UDest + _Count );
                    return _Dest;
                } else if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UDest ), _Ty > ) {
                    if ( _Is_all_bits_zero ( _Val ) ) {
                        _Fill_zero_memset ( _UDest, static_cast < size_t > ( _Count ) );
                        _Seek_wrapped ( _Dest, _UDest + _Count );
                        return _Dest;
                    }
                }
            }

            for (; 0 < _Count; -- _Count, ( void ) ++ _UDest ) {
                * _UDest = _Val;
            }

            _Seek_wrapped ( _Dest, _UDest );
        }
    }
    return _Dest;
}
#line 5127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty1, class _Ty2, class  = void> constexpr bool 
#line 5128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Can_compare_with_operator_equal = false; 
#line 5130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty1, class _Ty2> constexpr bool 
#line 5132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Can_compare_with_operator_equal< _Ty1, _Ty2, void_t< decltype(std::declval< _Ty1 &> () == std::declval< _Ty2 &> ())> >  = true; 
#line 5135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty1, class _Ty2> constexpr bool 
#line 5136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_pointer_address_comparable = _Can_compare_with_operator_equal< _Ty1 *, _Ty2 *, void>  && (_Is_pointer_address_convertible< _Ty1, _Ty2>  || _Is_pointer_address_convertible< _Ty2, _Ty1> ); 
#line 5147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
#pragma warning(push)
#pragma warning(disable : 4806)
template< class _Elem1, class _Elem2, bool 
#line 5150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
 = ((sizeof(_Elem1) == sizeof(_Elem2)) && is_integral_v< _Elem1> ) && is_integral_v< _Elem2> > constexpr bool 
#line 5151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Can_memcmp_elements = (is_same_v< _Elem1, bool>  || is_same_v< _Elem2, bool> ) || ((static_cast< _Elem1>(-1)) == (static_cast< _Elem2>(-1))); 
#line 5153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
#pragma warning(pop)
#line 5165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty1, class _Ty2> constexpr bool 
#line 5166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Can_memcmp_elements< _Ty1 *, _Ty2 *, false>  = _Is_pointer_address_comparable< _Ty1, _Ty2> ; 
#line 5168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2> constexpr bool 
#line 5169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Can_memcmp_elements< _Elem1, _Elem2, false>  = false; 
#line 5174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2, class _Pr> constexpr bool 
#line 5175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Can_memcmp_elements_with_pred = false; 
#line 5179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2, class _Elem3> constexpr bool 
#line 5180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Can_memcmp_elements_with_pred< _Elem1, _Elem2, equal_to< _Elem3> >  = (_Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible) && _Can_memcmp_elements< remove_cv_t< _Elem3> , remove_cv_t< _Elem3> , ((sizeof(remove_cv_t< _Elem3> ) == sizeof(remove_cv_t< _Elem3> )) && is_integral_v< remove_cv_t< _Elem3> > ) && is_integral_v< remove_cv_t< _Elem3> > > ; 
#line 5185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2> constexpr bool 
#line 5186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Can_memcmp_elements_with_pred< _Elem1, _Elem2, equal_to<> >  = _Can_memcmp_elements< _Elem1, _Elem2, ((sizeof(_Elem1) == sizeof(_Elem2)) && is_integral_v< _Elem1> ) && is_integral_v< _Elem2> > ; 
#line 5199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter1, class _Iter2, class _Pr> constexpr bool 
#line 5200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Equal_memcmp_is_safe_helper = ((_Iterators_are_contiguous< _Iter1, _Iter2>  && (!_Iterator_is_volatile< _Iter1> )) && (!_Iterator_is_volatile< _Iter2> )) && _Can_memcmp_elements_with_pred< _Iter_value_t< _Iter1> , _Iter_value_t< _Iter2> , _Pr> ; 
#line 5204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter1, class _Iter2, class _Pr> constexpr bool 
#line 5205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Equal_memcmp_is_safe = _Equal_memcmp_is_safe_helper< remove_const_t< _Iter1> , remove_const_t< _Iter2> , _Pr> ; 
#line 5208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _CtgIt1, class _CtgIt2 >
[ [ nodiscard ] ] int _Memcmp_ranges ( _CtgIt1 _First1, _CtgIt1 _Last1, _CtgIt2 _First2 ) {
    ;
    const auto _First1_ch = reinterpret_cast < const char * > ( _To_address ( _First1 ) );
    const auto _Last1_ch = reinterpret_cast < const char * > ( _To_address ( _Last1 ) );
    const auto _First2_ch = reinterpret_cast < const char * > ( _To_address ( _First2 ) );
    return :: memcmp ( _First1_ch, _First2_ch, static_cast < size_t > ( _Last1_ch - _First1_ch ) );
}
#line 5217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _CtgIt1, class _CtgIt2 >
[ [ nodiscard ] ] int _Memcmp_count ( _CtgIt1 _First1, _CtgIt2 _First2, const size_t _Count ) {
    ;
    const auto _First1_ch = reinterpret_cast < const char * > ( _To_address ( _First1 ) );
    const auto _First2_ch = reinterpret_cast < const char * > ( _To_address ( _First2 ) );
    return :: memcmp ( _First1_ch, _First2_ch, _Count * sizeof ( _Iter_value_t < _CtgIt1 > ) );
}
#line 5225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped_n ( _First2, _Idl_distance < _InIt1 > ( _UFirst1, _ULast1 ) );
    if constexpr ( _Equal_memcmp_is_safe < decltype ( _UFirst1 ), decltype ( _UFirst2 ), _Pr > ) {



        {
            return _Memcmp_ranges ( _UFirst1, _ULast1, _UFirst2 ) == 0;
        }
    }

    for (; _UFirst1 != _ULast1; ++ _UFirst1, ( void ) ++ _UFirst2 ) {
        if ( ! _Pred ( * _UFirst1, * _UFirst2 ) ) {
            return false;
        }
    }

    return true;
}
#line 5256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2 ) {

    return :: std :: equal ( _First1, _Last1, _First2, equal_to < > { } );
}
#line 5271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool equal (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    _Adl_verify_range ( _First2, _Last2 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped ( _First2 );
    const auto _ULast2 = _Get_unwrapped ( _Last2 );
    if constexpr ( _Is_ranges_random_iter_v < _InIt1 > && _Is_ranges_random_iter_v < _InIt2 > ) {
        if ( _ULast1 - _UFirst1 != _ULast2 - _UFirst2 ) {
            return false;
        }

        return :: std :: equal ( _UFirst1, _ULast1, _UFirst2, _Pass_fn ( _Pred ) );
    } else {
        for (;; ) {
            if ( _UFirst1 == _ULast1 ) {
                return _UFirst2 == _ULast2;
            }

            if ( _UFirst2 == _ULast2 ) {
                return false;
            }

            if ( ! _Pred ( * _UFirst1, * _UFirst2 ) ) {
                return false;
            }

            ++ _UFirst1;
            ++ _UFirst2;
        }
    }
}
#line 5313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool equal (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2 ) {

    return :: std :: equal ( _First1, _Last1, _First2, _Last2, equal_to < > { } );
}
#line 5464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2> constexpr bool 
#line 5465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Lex_compare_memcmp_classify_elements = conjunction_v< _Is_character_or_bool< _Elem1> , _Is_character_or_bool< _Elem2> , is_unsigned< _Elem1> , is_unsigned< _Elem2> > ; 
#line 5473 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2, class _Pr> 
#line 5474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Lex_compare_memcmp_classify_pred { 
#line 5475 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using _Pred = void; 
#line 5476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 5478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2, class _Elem3> 
#line 5479 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, less< _Elem3> >  { 
#line 5480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using _Pred = conditional_t< (_Lex_compare_memcmp_classify_elements< _Elem3, _Elem3>  && _Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible) && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible, less< int> , void> ; 
#line 5484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 5486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2> 
#line 5487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, less<> >  { 
#line 5488 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using _Pred = conditional_t< _Lex_compare_memcmp_classify_elements< _Elem1, _Elem2> , less< int> , void> ; 
#line 5489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 5491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2, class _Elem3> 
#line 5492 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, greater< _Elem3> >  { 
#line 5493 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using _Pred = conditional_t< (_Lex_compare_memcmp_classify_elements< _Elem3, _Elem3>  && _Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible) && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible, greater< int> , void> ; 
#line 5497 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 5499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Elem1, class _Elem2> 
#line 5500 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, greater<> >  { 
#line 5501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using _Pred = conditional_t< _Lex_compare_memcmp_classify_elements< _Elem1, _Elem2> , greater< int> , void> ; 
#line 5502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 5516 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _It1, class _It2, class _Pr> using _Lex_compare_memcmp_classify = conditional_t< (_Iterators_are_contiguous< _It1, _It2>  && (!_Iterator_is_volatile< _It1> )) && (!_Iterator_is_volatile< _It2> ), typename _Lex_compare_memcmp_classify_pred< _Iter_value_t< _It1> , _Iter_value_t< _It2> , _Pr> ::_Pred, void> ; 
#line 5521 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool lexicographical_compare (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    _Adl_verify_range ( _First2, _Last2 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped ( _First2 );
    const auto _ULast2 = _Get_unwrapped ( _Last2 );

    using _Memcmp_pred = _Lex_compare_memcmp_classify < decltype ( _UFirst1 ), decltype ( _UFirst2 ), _Pr >;
    if constexpr ( ! is_void_v < _Memcmp_pred > ) {



        {
            const auto _Num1 = static_cast < size_t > ( _ULast1 - _UFirst1 );
            const auto _Num2 = static_cast < size_t > ( _ULast2 - _UFirst2 );
            const int _Ans = _Memcmp_count ( _UFirst1, _UFirst2, ( :: std :: min ) ( _Num1, _Num2 ) );
            return _Memcmp_pred { } ( _Ans, 0 ) || ( _Ans == 0 && _Num1 < _Num2 );
        }
    }

    for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++ _UFirst1, ( void ) ++ _UFirst2 ) {
        if ( static_cast < bool > ( _Pred ( * _UFirst1, * _UFirst2 ) ) ) {
            return true;
        } else if ( _Pred ( * _UFirst2, * _UFirst1 ) ) {
            return false;
        }
    }

    return _UFirst1 == _ULast1 && _UFirst2 != _ULast2;
}
#line 5556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool lexicographical_compare (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2 ) {

    return :: std :: lexicographical_compare ( _First1, _Last1, _First2, _Last2, less < > { } );
}
#line 5674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty, class _Elem> 
#line 5675 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Vector_alg_in_find_is_safe_object_pointers : public false_type { }; 
#line 5676 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Ty1, class _Ty2> 
#line 5677 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct _Vector_alg_in_find_is_safe_object_pointers< _Ty1 *, _Ty2 *>  : public conjunction< disjunction< is_object< _Ty1> , is_void< _Ty1> > , disjunction< is_object< _Ty2> , is_void< _Ty2> > , disjunction< is_same< remove_cv_t< _Ty1> , remove_cv_t< _Ty2> > , is_void< _Ty1> , is_void< _Ty2> > >  { 
#line 5684 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 5687 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class _Ty, class _Elem = _Iter_value_t< _Iter> > constexpr bool 
#line 5688 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Vector_alg_in_find_is_safe = (_Iterator_is_contiguous< _Iter>  && (!_Iterator_is_volatile< _Iter> )) && disjunction_v< conjunction< is_integral< _Ty> , is_integral< _Elem> > , conjunction< is_pointer< _Ty> , is_same< _Ty, _Elem> > , conjunction< is_same< _Ty, std::nullptr_t> , is_pointer< _Elem> > , _Vector_alg_in_find_is_safe_object_pointers< _Ty, _Elem> > ; 
#line 5711 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Ty >
[ [ nodiscard ] ] constexpr bool _Could_compare_equal_to_value_type ( const _Ty & _Val ) {

    ;

    if constexpr ( disjunction_v <



                      is_same < _Ty, bool >, is_pointer < _Ty >, is_same < _Ty, nullptr_t >> ) {
        return true;
    } else {
        using _Elem = _Iter_value_t < _InIt >;
        ;

        if constexpr ( is_same_v < _Elem, bool > ) {
            return _Val == true || _Val == false;
        } else if constexpr ( is_signed_v < _Elem > ) {

            constexpr _Elem _Min = static_cast < _Elem > ( _Elem { 1 } << ( sizeof ( _Elem ) * 8 - 1 ) );
            constexpr _Elem _Max = static_cast < _Elem > ( ~ _Min );

            if constexpr ( is_signed_v < _Ty > ) {

                return _Min <= _Val && _Val <= _Max;
            } else {

                if constexpr ( _Elem { - 1 } == static_cast < _Ty > ( - 1 ) ) {

                    return _Val <= _Max || static_cast < _Ty > ( _Min ) <= _Val;
                } else {

                    return _Val <= _Max;
                }
            }
        } else {
            constexpr _Elem _Max = static_cast < _Elem > ( ~ _Elem { 0 } );

            if constexpr ( is_unsigned_v < _Ty > ) {

                return _Val <= _Max;
            } else {

                if constexpr ( _Ty { - 1 } == static_cast < _Elem > ( - 1 ) ) {

                    return _Val <= _Max;
                } else {

                    return 0 <= _Val && _Val <= _Max;
                }
            }
        }
    }
}
#line 5766 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _InIt _Find_unchecked ( _InIt _First, const _InIt _Last, const _Ty & _Val ) {


    if constexpr ( _Vector_alg_in_find_is_safe < _InIt, _Ty > ) {



        {
            if ( ! :: std :: _Could_compare_equal_to_value_type < _InIt > ( _Val ) ) {
                return _Last;
            }

            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_find_trivial ( _First_ptr, _To_address ( _Last ), _Val );
            if constexpr ( is_pointer_v < _InIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }













        }
    }

    for (; _First != _Last; ++ _First ) {
        if ( * _First == _Val ) {
            break;
        }
    }

    return _First;
}
#line 5811 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _InIt find ( _InIt _First, const _InIt _Last, const _Ty & _Val ) {
    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _InIt > && is_same_v < _Ty, bool > ) {
        return _Find_vbool ( _First, _Last, _Val );
    } else {
        _Seek_wrapped ( _First, :: std :: _Find_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Val ) );
        return _First;
    }
}
#line 5940 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _Iter_diff_t < _InIt > count ( const _InIt _First, const _InIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _InIt > && is_same_v < _Ty, bool > ) {
        return _Count_vbool ( _First, _Last, _Val );
    } else {
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );


        if constexpr ( _Vector_alg_in_find_is_safe < decltype ( _UFirst ), _Ty > ) {



            {
                if ( ! :: std :: _Could_compare_equal_to_value_type < decltype ( _UFirst ) > ( _Val ) ) {
                    return 0;
                }

                return static_cast < _Iter_diff_t < _InIt >> (
                    __std_count_trivial ( _To_address ( _UFirst ), _To_address ( _ULast ), _Val ) );
            }
        }


        _Iter_diff_t < _InIt > _Count = 0;

        for (; _UFirst != _ULast; ++ _UFirst ) {
            if ( * _UFirst == _Val ) {
                ++ _Count;
            }
        }

        return _Count;
    }
}
#line 5984 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _InIt _Find_pr ( _InIt _First, const _InIt _Last, const _Ty & _Val, _Pr _Pred ) {
    for (; _First != _Last; ++ _First ) {
        if ( _Pred ( * _First, _Val ) ) {
            break;
        }
    }

    return _First;
}
#line 5995 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Iter_diff_t < _InIt > _Count_pr ( _InIt _First, const _InIt _Last, const _Ty & _Val, _Pr _Pred ) {
    _Iter_diff_t < _InIt > _Count = 0;

    for (; _First != _Last; ++ _First ) {
        if ( _Pred ( * _First, _Val ) ) {
            ++ _Count;
        }
    }

    return _Count;
}
#line 6008 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
enum class _TrimResult: unsigned char { _KeepTrimming, _HaveWorkAfterTrimming, _ReturnFalse, _ReturnTrue}; 
#line 6010 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_equal (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {


    ;
    ;
    if ( _Pred ( * _First1, * _First2 ) ) {
        do {
            ++ _First1;
            ++ _First2;
            if ( _First1 == _Back1 ) {

                return _Pred ( * _First1, * _First2 ) ? _TrimResult :: _ReturnTrue : _TrimResult :: _ReturnFalse;
            }
        } while ( _Pred ( * _First1, * _First2 ) );
    } else {
        if ( ! _Pred ( * _Back1, * _Back2 ) ) {

            return _TrimResult :: _HaveWorkAfterTrimming;
        }
        -- _Back1;
        -- _Back2;
    }

    for (;; ) {
        if ( _First1 == _Back1 ) {

            return _TrimResult :: _ReturnFalse;
        }

        if ( ! _Pred ( * _Back1, * _Back2 ) ) {
            return _TrimResult :: _KeepTrimming;
        }
        -- _Back1;
        -- _Back2;
    }
}
#line 6049 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_reversed (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {


    ;
    ;
    if ( _Pred ( * _First1, * _Back2 ) ) {
        do {
            ++ _First1;
            -- _Back2;
            if ( _First1 == _Back1 ) {

                return _Pred ( * _First1, * _First2 ) ? _TrimResult :: _ReturnTrue : _TrimResult :: _ReturnFalse;
            }
        } while ( _Pred ( * _First1, * _Back2 ) );
    } else {
        if ( ! _Pred ( * _Back1, * _First2 ) ) {

            return _TrimResult :: _HaveWorkAfterTrimming;
        }
        -- _Back1;
        ++ _First2;
    }

    for (;; ) {
        if ( _First1 == _Back1 ) {

            return _TrimResult :: _ReturnFalse;
        }

        if ( ! _Pred ( * _Back1, * _First2 ) ) {
            return _TrimResult :: _KeepTrimming;
        }
        -- _Back1;
        ++ _First2;
    }
}
#line 6088 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_completely (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {

    _TrimResult _Res = _TrimResult :: _KeepTrimming;

    for ( bool _Check_reversed = true; _Res == _TrimResult :: _KeepTrimming; _Check_reversed = ! _Check_reversed ) {
        if ( _Check_reversed ) {
            _Res = _Trim_reversed ( _First1, _Back1, _First2, _Back2, _Pred );
        } else {
            _Res = _Trim_equal ( _First1, _Back1, _First2, _Back2, _Pred );
        }
    }

    return _Res;
}
#line 6105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt1, class _FwdIt2, class _Pr >
[ [ nodiscard ] ] inline bool _Check_match_counts (
    _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred ) {

    ;
    ;
    if constexpr ( _Is_ranges_bidi_iter_v < _FwdIt1 > && _Is_ranges_bidi_iter_v < _FwdIt2 > ) {
        do {
            -- _Last1;
            -- _Last2;
        } while ( _Pred ( * _Last1, * _Last2 ) );

        if ( _First1 == _Last1 ) {
            return false;
        }

        const _TrimResult _Res = _Trim_completely ( _First1, _Last1, _First2, _Last2, _Pred );

        if ( _Res != _TrimResult :: _HaveWorkAfterTrimming ) {
            return _Res == _TrimResult :: _ReturnTrue;
        }

        ++ _Last1;
        ++ _Last2;
    }

    for ( _FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++ _Next1 ) {
        if ( _Next1 == _Find_pr ( _First1, _Next1, * _Next1, _Pred ) ) {
            _Iter_diff_t < _FwdIt2 > _Count2 = _Count_pr ( _First2, _Last2, * _Next1, _Pred );
            if ( _Count2 == 0 ) {
                return false;
            }

            _FwdIt1 _Skip1 = _Next_iter ( _Next1 );
            _Iter_diff_t < _FwdIt1 > _Count1 = _Count_pr ( _Skip1, _Last1, * _Next1, _Pred ) + 1;
            if ( _Count2 != _Count1 ) {
                return false;
            }
        }
    }

    return true;
}
#line 6149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt >
inline void reverse ( const _BidIt _First, const _BidIt _Last ) {
    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    auto _ULast = _Get_unwrapped ( _Last );

    using _Elem = remove_reference_t < _Iter_ref_t < decltype ( _UFirst ) >>;
    constexpr bool _Allow_vectorization = conjunction_v < bool_constant < _Iterator_is_contiguous < decltype ( _UFirst ) >>,
        _Is_trivially_swappable < _Elem >, negation < is_volatile < _Elem >> >;
    constexpr size_t _Nx = sizeof ( _Elem );

    if constexpr ( _Allow_vectorization && _Nx <= 8 && ( _Nx & ( _Nx - 1 ) ) == 0 ) {



        {
            if constexpr ( _Nx == 1 ) {
                __std_reverse_trivially_swappable_1 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else if constexpr ( _Nx == 2 ) {
                __std_reverse_trivially_swappable_2 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else if constexpr ( _Nx == 4 ) {
                __std_reverse_trivially_swappable_4 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else {
                __std_reverse_trivially_swappable_8 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            }

            return;
        }
    }


    for (; _UFirst != _ULast && _UFirst != -- _ULast; ++ _UFirst ) {
        swap ( * _UFirst, * _ULast );
    }
}
#line 6195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _BidIt >
constexpr pair < _BidIt, _BidIt > _Reverse_until_sentinel_unchecked ( _BidIt _First, _BidIt _Sentinel, _BidIt _Last ) {

    while ( _First != _Sentinel && _Last != _Sentinel ) {
        swap ( * _First, * -- _Last );
        ++ _First;
    }

    return pair < _BidIt, _BidIt > ( _First, _Last );
}
#line 6206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt >
inline _FwdIt rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last ) {



    _Adl_verify_range ( _First, _Mid );
    _Adl_verify_range ( _Mid, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    auto _UMid = _Get_unwrapped ( _Mid );
    const auto _ULast = _Get_unwrapped ( _Last );
    if ( _UFirst == _UMid ) {
        return _Last;
    }

    if ( _UMid == _ULast ) {
        return _First;
    }

    if constexpr ( _Is_cpp17_random_iter_v < _FwdIt > ) {
        :: std :: reverse ( _UFirst, _UMid );
        :: std :: reverse ( _UMid, _ULast );
        :: std :: reverse ( _UFirst, _ULast );
        _Seek_wrapped ( _First, _UFirst + ( _ULast - _UMid ) );
    } else if constexpr ( _Is_cpp17_bidi_iter_v < _FwdIt > ) {
        :: std :: reverse ( _UFirst, _UMid );
        :: std :: reverse ( _UMid, _ULast );
        auto _Tmp = _Reverse_until_sentinel_unchecked ( _UFirst, _UMid, _ULast );
        :: std :: reverse ( _Tmp . first, _Tmp . second );
        _Seek_wrapped ( _First, _UMid != _Tmp . first ? _Tmp . first : _Tmp . second );
    } else {
        auto _UNext = _UMid;
        do {
            swap ( * _UFirst, * _UNext );
            ++ _UFirst;
            ++ _UNext;
            if ( _UFirst == _UMid ) {
                _UMid = _UNext;
            }
        } while ( _UNext != _ULast );
        _Seek_wrapped ( _First, _UFirst );
        while ( _UMid != _ULast ) {
            _UNext = _UMid;
            do {
                swap ( * _UFirst, * _UNext );
                ++ _UFirst;
                ++ _UNext;
                if ( _UFirst == _UMid ) {
                    _UMid = _UNext;
                }
            } while ( _UNext != _ULast );
        }
    }

    return _First;
}
#line 6272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _InIt, class _Pr >
[ [ nodiscard ] ] inline _InIt find_if ( _InIt _First, const _InIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    for (; _UFirst != _ULast; ++ _UFirst ) {
        if ( _Pred ( * _UFirst ) ) {
            break;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 6591 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Iter, class _Pr, class _Elem = _Iter_value_t< _Iter> > constexpr bool 
#line 6592 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Is_min_max_optimization_safe = (_Iterator_is_contiguous< _Iter>  && (!_Iterator_is_volatile< _Iter> )) && conjunction_v< disjunction< is_integral< _Elem> , is_pointer< _Elem> > , disjunction< is_same< _Pr, less<> > , is_same< _Pr, less< _Elem> > > > ; 
#line 6602 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Pr >
constexpr _FwdIt _Max_element_unchecked ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {

    if constexpr ( _Is_min_max_optimization_safe < _FwdIt, _Pr > ) {
        if ( ! _Is_constant_evaluated ( ) ) {
            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_max_element ( _First_ptr, _To_address ( _Last ) );
            if constexpr ( is_pointer_v < _FwdIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }
        }
    }


    _FwdIt _Found = _First;
    if ( _First != _Last ) {
        while ( ++ _First != _Last ) {
            if ( static_cast < bool > ( _Pred ( * _Found, * _First ) ) ) {
                _Found = _First;
            }
        }
    }

    return _Found;
}
#line 6630 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Pr >
[ [ nodiscard ] ] constexpr _FwdIt max_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    _Seek_wrapped ( _First, :: std :: _Max_element_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pass_fn ( _Pred ) ) );
    return _First;
}
#line 6637 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt >
[ [ nodiscard ] ] constexpr _FwdIt max_element ( _FwdIt _First, _FwdIt _Last ) {
    return :: std :: max_element ( _First, _Last, less < > { } );
}
#line 6722 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > _Ilist, _Pr _Pred ) {

    const _Ty * _Res = :: std :: _Max_element_unchecked ( _Ilist . begin ( ), _Ilist . end ( ), _Pass_fn ( _Pred ) );
    return * _Res;
}
#line 6729 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > _Ilist ) {

    return ( :: std :: max ) ( _Ilist, less < > { } );
}
#line 6794 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Pr >
constexpr _FwdIt _Min_element_unchecked ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {

    if constexpr ( _Is_min_max_optimization_safe < _FwdIt, _Pr > ) {
        if ( ! _Is_constant_evaluated ( ) ) {
            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_min_element ( _First_ptr, _To_address ( _Last ) );
            if constexpr ( is_pointer_v < _FwdIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }
        }
    }


    _FwdIt _Found = _First;
    if ( _First != _Last ) {
        while ( ++ _First != _Last ) {
            if ( static_cast < bool > ( _Pred ( * _First, * _Found ) ) ) {
                _Found = _First;
            }
        }
    }

    return _Found;
}
#line 6822 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Pr >
[ [ nodiscard ] ] constexpr _FwdIt min_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    _Seek_wrapped ( _First, :: std :: _Min_element_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pass_fn ( _Pred ) ) );
    return _First;
}
#line 6829 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt >
[ [ nodiscard ] ] constexpr _FwdIt min_element ( _FwdIt _First, _FwdIt _Last ) {
    return :: std :: min_element ( _First, _Last, less < > { } );
}
#line 6914 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > _Ilist, _Pr _Pred ) {

    const _Ty * _Res = :: std :: _Min_element_unchecked ( _Ilist . begin ( ), _Ilist . end ( ), _Pass_fn ( _Pred ) );
    return * _Res;
}
#line 6921 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > _Ilist ) {

    return ( :: std :: min ) ( _Ilist, less < > { } );
}
#line 6980 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Ty, class _Pr >
[ [ nodiscard ] ] inline _FwdIt lower_bound ( _FwdIt _First, const _FwdIt _Last, const _Ty & _Val, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    _Iter_diff_t < _FwdIt > _Count = :: std :: distance ( _UFirst, _Get_unwrapped ( _Last ) );

    while ( 0 < _Count ) {
        const _Iter_diff_t < _FwdIt > _Count2 = _Count / 2;
        const auto _UMid = :: std :: next ( _UFirst, _Count2 );
        if ( _Pred ( * _UMid, _Val ) ) {
            _UFirst = _Next_iter ( _UMid );
            _Count -= _Count2 + 1;
        } else {
            _Count = _Count2;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 7002 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Ty >
[ [ nodiscard ] ] inline _FwdIt lower_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val ) {

    return :: std :: lower_bound ( _First, _Last, _Val, less < > { } );
}
#line 7008 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Ty, class _Pr >
[ [ nodiscard ] ] inline _FwdIt upper_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    _Iter_diff_t < _FwdIt > _Count = :: std :: distance ( _UFirst, _Get_unwrapped ( _Last ) );

    while ( 0 < _Count ) {
        _Iter_diff_t < _FwdIt > _Count2 = _Count / 2;
        const auto _UMid = :: std :: next ( _UFirst, _Count2 );
        if ( _Pred ( _Val, * _UMid ) ) {
            _Count = _Count2;
        } else {
            _UFirst = _Next_iter ( _UMid );
            _Count -= _Count2 + 1;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 7030 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt, class _Ty >
[ [ nodiscard ] ] inline _FwdIt upper_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val ) {

    return :: std :: upper_bound ( _First, _Last, _Val, less < > { } );
}
#line 7036 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _FwdIt1, class _FwdIt2 >
inline _FwdIt2 _Swap_ranges_unchecked ( _FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2 ) {



    using _Elem1 = remove_reference_t < _Iter_ref_t < _FwdIt1 >>;
    using _Elem2 = remove_reference_t < _Iter_ref_t < _FwdIt2 >>;
    if constexpr ( is_same_v < _Elem1, _Elem2 > && _Is_trivially_swappable_v < _Elem1 >
                  && _Iterators_are_contiguous < _FwdIt1, _FwdIt2 > ) {



        {
            __std_swap_ranges_trivially_swappable_noalias (
                _To_address ( _First1 ), _To_address ( _Last1 ), _To_address ( _First2 ) );
            return _First2 + ( _Last1 - _First1 );
        }
    }


    for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 ) {
        swap ( * _First1, * _First2 );
    }

    return _First2;
}
#line 7063 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
[[noreturn]] void __cdecl _Xbad_alloc(); 
#line 7064 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
[[noreturn]] void __cdecl _Xinvalid_argument(const char *); 
#line 7065 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
[[noreturn]] void __cdecl _Xlength_error(const char *); 
#line 7066 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
[[noreturn]] void __cdecl _Xout_of_range(const char *); 
#line 7067 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
[[noreturn]] void __cdecl _Xoverflow_error(const char *); 
#line 7068 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
[[noreturn]] void __cdecl _Xruntime_error(const char *); 
#line 7069 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
[[noreturn]] void __cdecl _XGetLastError(); 
#line 7071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template< class _Category, class _Ty, class _Diff = ptrdiff_t, class _Pointer = _Ty *, class 
#line 7072 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
_Reference = _Ty &> 
#line 7073 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
struct iterator { 
#line 7074 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using iterator_category = _Category; 
#line 7075 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using value_type = _Ty; 
#line 7076 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using difference_type = _Diff; 
#line 7077 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using pointer = _Pointer; 
#line 7078 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
using reference = _Reference; 
#line 7079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}; 
#line 7081 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr auto _Float_abs_bits ( const _Ty & _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    using _Uint_type = typename _Traits :: _Uint_type;
    const auto _Bits = _Bit_cast < _Uint_type > ( _Xx );
    return _Bits & ~ _Traits :: _Shifted_sign_mask;
}
#line 7089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr _Ty _Float_abs ( const _Ty _Xx ) noexcept {
    return _Bit_cast < _Ty > ( _Float_abs_bits ( _Xx ) );
}
#line 7094 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr _Ty _Float_copysign ( const _Ty _Magnitude, const _Ty _Sign ) {
    using _Traits = _Floating_type_traits < _Ty >;
    using _Uint_type = typename _Traits :: _Uint_type;
    const auto _Signbit = _Bit_cast < _Uint_type > ( _Sign ) & _Traits :: _Shifted_sign_mask;
    return _Bit_cast < _Ty > ( _Float_abs_bits ( _Magnitude ) | _Signbit );
}
#line 7102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_nan ( const _Ty _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) > _Traits :: _Shifted_exponent_mask;
}
#line 7112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_signaling_nan ( const _Ty & _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    const auto _Abs_bits = _Float_abs_bits ( _Xx );
    return _Abs_bits > _Traits :: _Shifted_exponent_mask && ( ( _Abs_bits & _Traits :: _Special_nan_mantissa_mask ) == 0 );
}
#line 7119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_inf ( const _Ty _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) == _Traits :: _Shifted_exponent_mask;
}
#line 7125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_finite ( const _Ty _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) < _Traits :: _Shifted_exponent_mask;
}
#line 7207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
}
#line 7215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xutility"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
namespace std { 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Container >
class back_insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;


    inline explicit back_insert_iterator ( _Container & _Cont ) noexcept
        : container ( :: std :: addressof ( _Cont ) ) { }

    inline back_insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {
        container -> push_back ( _Val );
        return * this;
    }

    inline back_insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        container -> push_back ( :: std :: move ( _Val ) );
        return * this;
    }

    [ [ nodiscard ] ] inline back_insert_iterator & operator * ( ) noexcept {
        return * this;
    }

    inline back_insert_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    inline back_insert_iterator operator ++ ( int ) noexcept {
        return * this;
    }

protected :
    _Container * container;
};
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline back_insert_iterator < _Container > back_inserter ( _Container & _Cont ) noexcept {

    return back_insert_iterator < _Container > ( _Cont );
}
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Container >
class front_insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;


    inline explicit front_insert_iterator ( _Container & _Cont ) : container ( :: std :: addressof ( _Cont ) ) { }

    inline front_insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {

        container -> push_front ( _Val );
        return * this;
    }

    inline front_insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        container -> push_front ( :: std :: move ( _Val ) );
        return * this;
    }

    [ [ nodiscard ] ] inline front_insert_iterator & operator * ( ) {
        return * this;
    }

    inline front_insert_iterator & operator ++ ( ) {
        return * this;
    }

    inline front_insert_iterator operator ++ ( int ) {
        return * this;
    }

protected :
    _Container * container;
};
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline front_insert_iterator < _Container > front_inserter ( _Container & _Cont ) {
    return front_insert_iterator < _Container > ( _Cont );
}
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Container >
class insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;
    using _Wrapped_iter = typename _Container :: iterator;


    inline insert_iterator ( _Container & _Cont, _Wrapped_iter _Where )
        : container ( :: std :: addressof ( _Cont ) ), iter ( :: std :: move ( _Where ) ) { }

    inline insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {

        iter = container -> insert ( iter, _Val );
        ++ iter;
        return * this;
    }

    inline insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        iter = container -> insert ( iter, :: std :: move ( _Val ) );
        ++ iter;
        return * this;
    }

    [ [ nodiscard ] ] inline insert_iterator & operator * ( ) {
        return * this;
    }

    inline insert_iterator & operator ++ ( ) {
        return * this;
    }

    inline insert_iterator & operator ++ ( int ) {
        return * this;
    }

protected :
    _Container * container;
    _Wrapped_iter iter;
};
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline insert_iterator < _Container > inserter ( _Container & _Cont, typename _Container :: iterator _Where ) {
    return insert_iterator < _Container > ( _Cont, _Where );
}
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Ty, class _Elem = char, class _Traits = char_traits < _Elem >, class _Diff = ptrdiff_t >
class istream_iterator {
public :
    using iterator_category = input_iterator_tag;
    using value_type = _Ty;
    using difference_type = _Diff;
    using pointer = const _Ty *;
    using reference = const _Ty &;
    using char_type = _Elem;
    using traits_type = _Traits;
    using istream_type = basic_istream < _Elem, _Traits >;

    static_assert ( conjunction_v < is_default_constructible < _Ty >, is_copy_constructible < _Ty >, is_copy_assignable < _Ty >>,
        "istream_iterator<T> requires T to be default constructible, copy constructible, and copy assignable. (N4950 [istream.iterator]/2" ")"
                                      );

    constexpr istream_iterator ( ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) { }






    istream_iterator ( istream_type & _Istr ) : _Myistr ( :: std :: addressof ( _Istr ) ) {
        _Getval ( );
    }

    [ [ nodiscard ] ] const _Ty & operator * ( ) const noexcept {
        ;
        return _Myval;
    }

    [ [ nodiscard ] ] const _Ty * operator -> ( ) const noexcept {
        ;
        return :: std :: addressof ( _Myval );
    }

    istream_iterator & operator ++ ( ) {
        _Getval ( );
        return * this;
    }

    istream_iterator operator ++ ( int ) {
        istream_iterator _Tmp = * this;
        _Getval ( );
        return _Tmp;
    }

    [ [ nodiscard ] ] bool _Equal ( const istream_iterator & _Right ) const noexcept {
        return _Myistr == _Right . _Myistr;
    }







private :
    void _Getval ( ) {
        ;
        if ( ! ( * _Myistr >> _Myval ) ) {
            _Myistr = nullptr;
        }
    }

    istream_type * _Myistr { nullptr };
    _Ty _Myval { };
};
#line 305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Ty, class _Elem, class _Traits, class _Diff >
[ [ nodiscard ] ] bool operator == ( const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Left,
    const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Right ) noexcept {
    return _Left . _Equal ( _Right );
}
#line 312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Ty, class _Elem, class _Traits, class _Diff >
[ [ nodiscard ] ] bool operator != ( const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Left,
    const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Ty, class _Elem = char, class _Traits = char_traits < _Elem > >
class ostream_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;
    using char_type = _Elem;
    using traits_type = _Traits;
    using ostream_type = basic_ostream < _Elem, _Traits >;

    ostream_iterator ( ostream_type & _Ostr, const _Elem * const _Delim = nullptr ) noexcept
        : _Mydelim ( _Delim ), _Myostr ( :: std :: addressof ( _Ostr ) ) { }

    ostream_iterator & operator = ( const _Ty & _Val ) {
        * _Myostr << _Val;
        if ( _Mydelim ) {
            * _Myostr << _Mydelim;
        }

        return * this;
    }

    [ [ nodiscard ] ] ostream_iterator & operator * ( ) noexcept {
        return * this;
    }

    ostream_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    ostream_iterator & operator ++ ( int ) noexcept {
        return * this;
    }

private :
    const _Elem * _Mydelim;
    ostream_type * _Myostr;
};
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Elem, class _Traits >
class istreambuf_iterator {
public :
    using iterator_category = input_iterator_tag;
    using value_type = _Elem;
    using difference_type = typename _Traits :: off_type;
    using pointer = const _Elem *;
    using reference = _Elem;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename traits_type :: int_type;
    using streambuf_type = basic_streambuf < _Elem, _Traits >;
    using istream_type = basic_istream < _Elem, _Traits >;

    constexpr istreambuf_iterator ( ) noexcept : _Strbuf ( nullptr ), _Got ( true ), _Val ( ) { }




    istreambuf_iterator ( istream_type & _Istr ) noexcept : _Strbuf ( _Istr . rdbuf ( ) ), _Got ( ! _Strbuf ), _Val ( ) { }

    istreambuf_iterator ( streambuf_type * _Sb ) noexcept : _Strbuf ( _Sb ), _Got ( ! _Sb ), _Val ( ) { }

private :
    class _Istreambuf_proxy {
    public :
        [ [ nodiscard ] ] _Elem operator * ( ) const noexcept ( is_nothrow_copy_constructible_v < _Elem > ) {
            return _Keep;
        }

    private :
        friend istreambuf_iterator;
        _Istreambuf_proxy ( streambuf_type * _Strbuf_, _Elem _Keep_ ) noexcept (
            is_nothrow_copy_constructible_v < _Elem > )
            : _Strbuf ( _Strbuf_ ), _Keep ( _Keep_ ) { }

        streambuf_type * _Strbuf;
        _Elem _Keep;
    };

public :
    istreambuf_iterator ( const _Istreambuf_proxy & _Px ) noexcept : _Strbuf ( _Px . _Strbuf ), _Got ( ! _Strbuf ), _Val ( ) { }

    [ [ nodiscard ] ] _Elem operator * ( ) const {
        if ( ! _Got ) {
            _Peek ( );
        }





        return _Val;
    }

    istreambuf_iterator & operator ++ ( ) {




        _Inc ( );
        return * this;
    }

    _Istreambuf_proxy operator ++ ( int ) {
        if ( ! _Got ) {
            _Peek ( );
        }

        _Istreambuf_proxy _Tmp { _Strbuf, _Val };
        ++ * this;
        return _Tmp;
    }

    [ [ nodiscard ] ] bool equal ( const istreambuf_iterator & _Right ) const {
        if ( ! _Got ) {
            _Peek ( );
        }

        if ( ! _Right . _Got ) {
            _Right . _Peek ( );
        }

        return ( ! _Strbuf && ! _Right . _Strbuf ) || ( _Strbuf && _Right . _Strbuf );
    }











private :
    void _Inc ( ) {
        if ( ! _Strbuf || traits_type :: eq_int_type ( traits_type :: eof ( ), _Strbuf -> sbumpc ( ) ) ) {
            _Strbuf = nullptr;
            _Got = true;
        } else {
            _Got = false;
        }
    }

    _Elem _Peek ( ) const {
        int_type _Meta;
        if ( ! _Strbuf || traits_type :: eq_int_type ( traits_type :: eof ( ), _Meta = _Strbuf -> sgetc ( ) ) ) {
            _Strbuf = nullptr;
        } else {
            _Val = traits_type :: to_char_type ( _Meta );
        }

        _Got = true;
        return _Val;
    }

    mutable streambuf_type * _Strbuf;
    mutable bool _Got;
    mutable _Elem _Val;
};
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Elem, class _Traits >
[ [ nodiscard ] ] bool operator == (
    const istreambuf_iterator < _Elem, _Traits > & _Left, const istreambuf_iterator < _Elem, _Traits > & _Right ) {
    return _Left . equal ( _Right );
}
#line 494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Elem, class _Traits >
[ [ nodiscard ] ] bool operator != (
    const istreambuf_iterator < _Elem, _Traits > & _Left, const istreambuf_iterator < _Elem, _Traits > & _Right ) {
    return ! ( _Left == _Right );
}
#line 501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Elem, class _Traits >
class ostreambuf_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;
    using char_type = _Elem;
    using traits_type = _Traits;
    using streambuf_type = basic_streambuf < _Elem, _Traits >;
    using ostream_type = basic_ostream < _Elem, _Traits >;

    ostreambuf_iterator ( streambuf_type * _Sb ) noexcept : _Strbuf ( _Sb ) { }

    ostreambuf_iterator ( ostream_type & _Ostr ) noexcept : _Strbuf ( _Ostr . rdbuf ( ) ) { }

    ostreambuf_iterator & operator = ( _Elem _Right ) {
        if ( ! _Strbuf || traits_type :: eq_int_type ( _Traits :: eof ( ), _Strbuf -> sputc ( _Right ) ) ) {
            _Failed = true;
        }

        return * this;
    }

    [ [ nodiscard ] ] ostreambuf_iterator & operator * ( ) noexcept {
        return * this;
    }

    ostreambuf_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    ostreambuf_iterator & operator ++ ( int ) noexcept {
        return * this;
    }

    [ [ nodiscard ] ] bool failed ( ) const noexcept {
        return _Failed;
    }

private :
    bool _Failed = false;
    streambuf_type * _Strbuf;
};
#line 1466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
}
#line 1468 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
namespace stdext { 
#line 1469 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Ptr >
class checked_array_iterator {
private :
    using _Pointee_type = :: std :: remove_pointer_t < _Ptr >;
    static_assert ( :: std :: is_pointer_v < _Ptr > && :: std :: is_object_v < _Pointee_type >,
        "checked_array_iterator requires pointers to objects" );

public :
    using iterator_category = :: std :: random_access_iterator_tag;
    using value_type = :: std :: remove_cv_t < _Pointee_type >;
    using difference_type = :: std :: ptrdiff_t;
    using pointer = _Ptr;
    using reference = _Pointee_type &;




    constexpr checked_array_iterator ( ) = default;

    constexpr checked_array_iterator ( const _Ptr _Array, const size_t _Size, const size_t _Index = 0 ) noexcept
        : _Myarray ( _Array ), _Mysize ( _Size ), _Myindex ( _Index ) {
        do { if ( _Index <= _Size ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
    }

    __pragma(warning(push))                            __pragma(warning(disable : 4996))
    template < class _Ty = _Pointee_type, :: std :: enable_if_t < ! :: std :: is_const_v < _Ty >, int > = 0 >
    constexpr operator checked_array_iterator < const _Ty * > ( ) const noexcept {
        return checked_array_iterator < const _Ty * > { _Myarray, _Mysize, _Myindex };
    }
    __pragma(warning(pop))

    [ [ nodiscard ] ] constexpr _Ptr base ( ) const noexcept {
        return _Myarray + _Myindex;
    }

    [ [ nodiscard ] ] constexpr reference operator * ( ) const noexcept {
        return * operator -> ( );
    }

    [ [ nodiscard ] ] constexpr pointer operator -> ( ) const noexcept {
        do { if ( _Myarray ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        do { if ( _Myindex < _Mysize ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        return _Myarray + _Myindex;
    }

    constexpr checked_array_iterator & operator ++ ( ) noexcept {
        do { if ( _Myarray ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        do { if ( _Myindex < _Mysize ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        ++ _Myindex;
        return * this;
    }

    constexpr checked_array_iterator operator ++ ( int ) noexcept {
        checked_array_iterator _Tmp = * this;
        ++ * this;
        return _Tmp;
    }

    constexpr checked_array_iterator & operator -- ( ) noexcept {
        do { if ( _Myarray ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        do { if ( _Myindex != 0 ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        -- _Myindex;
        return * this;
    }

    constexpr checked_array_iterator operator -- ( int ) noexcept {
        checked_array_iterator _Tmp = * this;
        -- * this;
        return _Tmp;
    }

    constexpr checked_array_iterator & operator += ( const difference_type _Off ) noexcept {
        if ( _Off != 0 ) {
            do { if ( _Myarray ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        }

        if ( _Off < 0 ) {
            do { if ( _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        }

        if ( _Off > 0 ) {
            do { if ( _Mysize - _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        }

        _Myindex += _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr checked_array_iterator operator + ( const difference_type _Off ) const noexcept {
        checked_array_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend constexpr checked_array_iterator operator + (
        const difference_type _Off, const checked_array_iterator < _Ptr > & _Next ) noexcept {
        return _Next + _Off;
    }

    constexpr checked_array_iterator & operator -= ( const difference_type _Off ) noexcept {
        if ( _Off != 0 ) {
            do { if ( _Myarray ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        }

        if ( _Off > 0 ) {
            do { if ( _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        }

        if ( _Off < 0 ) {
            do { if ( _Mysize - _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        }

        _Myindex -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr checked_array_iterator operator - ( const difference_type _Off ) const noexcept {
        checked_array_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] constexpr difference_type operator - ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        return static_cast < difference_type > ( _Myindex - _Right . _Myindex );
    }

    [ [ nodiscard ] ] constexpr reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] constexpr bool operator == ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        return _Myindex == _Right . _Myindex;
    }








    [ [ nodiscard ] ] constexpr bool operator != ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] constexpr bool operator < ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        return _Myindex < _Right . _Myindex;
    }

    [ [ nodiscard ] ] constexpr bool operator > ( const checked_array_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] constexpr bool operator <= ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] constexpr bool operator >= ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }


    friend constexpr void _Verify_range (
        const checked_array_iterator & _First, const checked_array_iterator & _Last ) noexcept {
        do { if ( _First . _Myarray == _Last . _Myarray && _First . _Mysize == _Last . _Mysize ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        do { if ( _First . _Myindex <= _Last . _Myindex ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
    }

    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        if ( _Off < 0 ) {
            do { if ( _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        }

        if ( _Off > 0 ) {
            do { if ( _Mysize - _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );

        }
    }

    using _Prevent_inheriting_unwrap = checked_array_iterator;

    [ [ nodiscard ] ] constexpr _Ptr _Unwrapped ( ) const noexcept {
        return _Myarray + _Myindex;
    }

    constexpr void _Seek_to ( _Ptr _It ) noexcept {
        _Myindex = static_cast < size_t > ( _It - _Myarray );
    }

private :
    _Ptr _Myarray = nullptr;
    size_t _Mysize = 0;
    size_t _Myindex = 0;
};
#line 1675 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 1676 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Ptr >
 [ [ nodiscard ] ] constexpr checked_array_iterator < _Ptr > make_checked_array_iterator (
    const _Ptr _Array, const size_t _Size, const size_t _Index = 0 ) noexcept {
    return checked_array_iterator < _Ptr > ( _Array, _Size, _Index );
}
#line 1681 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
__pragma(warning(pop)) 
#line 1683 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Ptr >
class unchecked_array_iterator {
private :
    using _Pointee_type = :: std :: remove_pointer_t < _Ptr >;
    static_assert ( :: std :: is_pointer_v < _Ptr > && :: std :: is_object_v < _Pointee_type >,
        "unchecked_array_iterator requires pointers to objects" );

public :
    using iterator_category = :: std :: random_access_iterator_tag;
    using value_type = :: std :: remove_cv_t < _Pointee_type >;
    using difference_type = :: std :: ptrdiff_t;
    using pointer = _Ptr;
    using reference = _Pointee_type &;




    constexpr unchecked_array_iterator ( ) = default;

    constexpr explicit unchecked_array_iterator ( const _Ptr _Src ) noexcept : _Myptr ( _Src ) { }

    __pragma(warning(push))                            __pragma(warning(disable : 4996))
    template < class _Ty = _Pointee_type, :: std :: enable_if_t < ! :: std :: is_const_v < _Ty >, int > = 0 >
    constexpr operator unchecked_array_iterator < const _Ty * > ( ) const noexcept {
        return unchecked_array_iterator < const _Ty * > { _Myptr };
    }
    __pragma(warning(pop))

    [ [ nodiscard ] ] constexpr _Ptr base ( ) const noexcept {
        return _Myptr;
    }

    [ [ nodiscard ] ] constexpr reference operator * ( ) const noexcept {
        return * _Myptr;
    }

    [ [ nodiscard ] ] constexpr pointer operator -> ( ) const noexcept {
        return _Myptr;
    }

    constexpr unchecked_array_iterator & operator ++ ( ) noexcept {
        ++ _Myptr;
        return * this;
    }

    constexpr unchecked_array_iterator operator ++ ( int ) noexcept {
        unchecked_array_iterator _Tmp = * this;
        ++ _Myptr;
        return _Tmp;
    }

    constexpr unchecked_array_iterator & operator -- ( ) noexcept {
        -- _Myptr;
        return * this;
    }

    constexpr unchecked_array_iterator operator -- ( int ) noexcept {
        unchecked_array_iterator _Tmp = * this;
        -- _Myptr;
        return _Tmp;
    }

    constexpr unchecked_array_iterator & operator += ( const difference_type _Off ) noexcept {
        _Myptr += _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr unchecked_array_iterator operator + ( const difference_type _Off ) const noexcept {
        unchecked_array_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend constexpr unchecked_array_iterator operator + (
        const difference_type _Off, const unchecked_array_iterator & _Next ) noexcept {
        return _Next + _Off;
    }

    constexpr unchecked_array_iterator & operator -= ( const difference_type _Off ) noexcept {
        return * this += - _Off;
    }

    [ [ nodiscard ] ] constexpr unchecked_array_iterator operator - ( const difference_type _Off ) const noexcept {
        unchecked_array_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] constexpr difference_type operator - ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr - _Right . _Myptr;
    }

    [ [ nodiscard ] ] constexpr reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] constexpr bool operator == ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr == _Right . _Myptr;
    }






    [ [ nodiscard ] ] constexpr bool operator != ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] constexpr bool operator < ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr < _Right . _Myptr;
    }

    [ [ nodiscard ] ] constexpr bool operator > ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] constexpr bool operator <= ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] constexpr bool operator >= ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }









    using _Prevent_inheriting_unwrap = unchecked_array_iterator;

    static constexpr bool _Unwrap_when_unverified = true;

    [ [ nodiscard ] ] constexpr _Ptr _Unwrapped ( ) const noexcept {
        return _Myptr;
    }

    constexpr void _Seek_to ( _Ptr _It ) noexcept {
        _Myptr = _It;
    }

private :
    _Ptr _Myptr = nullptr;
};
#line 1832 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 1833 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
template < class _Ptr >
 [ [ nodiscard ] ] unchecked_array_iterator < _Ptr > make_unchecked_array_iterator (
    const _Ptr _It ) noexcept {
    return unchecked_array_iterator < _Ptr > ( _It );
}
#line 1838 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
__pragma(warning(pop)) 
#line 1839 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
}
#line 1860 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iterator"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_system_error_abi.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_system_error_abi.hpp"
extern "C" {
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_system_error_abi.hpp"
[[nodiscard]] size_t __stdcall __std_get_string_size_without_trailing_whitespace(const char * _Str, size_t _Size) noexcept; 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_system_error_abi.hpp"
[[nodiscard]] size_t __stdcall __std_system_error_allocate_message(unsigned long _Message_id, char ** _Ptr_str) noexcept; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_system_error_abi.hpp"
void __stdcall __std_system_error_deallocate_message(char * _Str) noexcept; 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_system_error_abi.hpp"
}
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_system_error_abi.hpp"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
namespace std { 
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[nodiscard]] bool __cdecl 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
uncaught_exception() noexcept; 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[nodiscard]] int __cdecl uncaught_exceptions() noexcept; 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
typedef 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
struct _heapinfo { 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
int *_pentry; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
size_t _size; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
int _useflag; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
} _HEAPINFO; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
void *__cdecl _alloca(size_t _Size); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
intptr_t __cdecl _get_heap_handle(); 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
int __cdecl _heapmin(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
int __cdecl _heapwalk(_HEAPINFO * _EntryInfo); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
int __cdecl _heapchk(); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
int __cdecl _resetstkoflw(); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
static_assert((sizeof(unsigned) <= (16)), "sizeof(unsigned int) <= _ALLOCA_S_MARKER_SIZE");
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6540)
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
__inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
{ 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
if (_Ptr) 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
{ 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
(*((unsigned *)_Ptr)) = _Marker; 
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
_Ptr = (((char *)_Ptr) + 16); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
}  
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
return _Ptr; 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
} 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
__inline size_t _MallocaComputeSize(size_t _Size) 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
{ 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
size_t _MarkedSize = _Size + (16); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
return (_MarkedSize > _Size) ? _MarkedSize : (0); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
} 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__inline void __cdecl _freea(void *_Memory) 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
{ 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
unsigned _Marker; 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
if (_Memory) 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
{ 
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
_Memory = (((char *)_Memory) - 16); 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
_Marker = (*((unsigned *)_Memory)); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
if (_Marker == (56797)) 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
{ 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
free(_Memory); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
} else { 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
if (_Marker != (52428)) 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
{ 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
(void)0; 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
}  }  
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
}  
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
} 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
}
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
__pragma(pack ( pop )) 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
typedef void (__cdecl *terminate_handler)(void); 
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
typedef void (__cdecl *terminate_function)(void); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
__declspec(noreturn) void __cdecl abort(); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
__declspec(noreturn) void __cdecl terminate() throw(); 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
terminate_handler __cdecl set_terminate(terminate_handler _NewTerminateHandler) throw(); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
terminate_handler __cdecl _get_terminate(); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
}__pragma(pack ( pop )) 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\corecrt_terminate.h"
#pragma warning(pop)
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
typedef void (__cdecl *unexpected_handler)(void); 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
typedef void (__cdecl *unexpected_function)(void); 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
__declspec(noreturn) void __cdecl unexpected() noexcept(false); 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
unexpected_handler __cdecl set_unexpected(unexpected_handler _NewUnexpectedHandler) noexcept; 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
unexpected_handler __cdecl _get_unexpected() noexcept; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
struct _EXCEPTION_POINTERS; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
_se_translator_function __cdecl _set_se_translator(_se_translator_function _NewSETranslator); 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
extern "C++" {
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
class type_info; 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
}
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
int __cdecl _is_exception_typeof(const type_info & _Type, _EXCEPTION_POINTERS * _ExceptionPtr); 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
bool __cdecl __uncaught_exception(); 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
int __cdecl __uncaught_exceptions(); 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
}__pragma(pack ( pop )) 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\eh.h"
#pragma warning(pop)
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
#pragma pack ( push, 8 )
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
struct __std_exception_data { 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
const char *_What; 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
bool _DoFree; 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
}; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
void __cdecl __std_exception_copy(const __std_exception_data * _From, __std_exception_data * _To); 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
void __cdecl __std_exception_destroy(__std_exception_data * _Data); 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
}__pragma(pack ( pop )) 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
namespace std { 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
#pragma warning(push)
#pragma warning(disable: 4577)
class exception { 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
public: exception() noexcept : _Data() 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
explicit exception(const char *const _Message) noexcept : _Data() 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
__std_exception_data _InitData = {_Message, true}; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
__std_exception_copy(&_InitData, &(_Data)); 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
exception(const char *const _Message, int) noexcept : _Data() 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
((_Data)._What) = _Message; 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
exception(const exception &_Other) noexcept : _Data() 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
exception &operator=(const exception &_Other) noexcept 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
if (this == (&_Other)) 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
return *this; 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
}  
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
__std_exception_destroy(&(_Data)); 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
return *this; 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
virtual ~exception() noexcept 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
__std_exception_destroy(&(_Data)); 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
[[nodiscard]] virtual const char *what() const 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
return ((_Data)._What) ? (_Data)._What : ("Unknown exception"); 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
private: __std_exception_data _Data; 
#line 101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
}; 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
class bad_exception : public exception { 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
public: bad_exception() noexcept : exception("bad exception", 1) 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
}; 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
class bad_alloc : public exception { 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
public: bad_alloc() noexcept : exception("bad allocation", 1) 
#line 121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
friend class bad_array_new_length; 
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
private: bad_alloc(const char *const _Message) noexcept : exception(_Message, 1) 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
}; 
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
class bad_array_new_length : public bad_alloc { 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
public: bad_array_new_length() noexcept : bad_alloc("bad array new length") 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
{ 
#line 142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
} 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
}; 
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
#pragma warning(pop)
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
}
#line 149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
#pragma pack ( pop )
#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_exception.h"
#pragma warning(pop)
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
namespace std { 
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
class exception; 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
class bad_exception; 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
using ::terminate;
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
using ::set_terminate;
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
using ::terminate_handler;
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[nodiscard]] inline terminate_handler __cdecl get_terminate() noexcept { 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return _get_terminate(); 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
using ::unexpected;
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
using ::set_unexpected;
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
using ::unexpected_handler;
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[nodiscard]] inline unexpected_handler __cdecl get_unexpected() noexcept { 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return _get_unexpected(); 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
void __cdecl __ExceptionPtrCreate(void *) noexcept; 
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
void __cdecl __ExceptionPtrDestroy(void *) noexcept; 
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
void __cdecl __ExceptionPtrCopy(void *, const void *) noexcept; 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
void __cdecl __ExceptionPtrAssign(void *, const void *) noexcept; 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
bool __cdecl __ExceptionPtrCompare(const void *, const void *) noexcept; 
#line 214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
bool __cdecl __ExceptionPtrToBool(const void *) noexcept; 
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
void __cdecl __ExceptionPtrSwap(void *, void *) noexcept; 
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
void __cdecl __ExceptionPtrCurrentException(void *) noexcept; 
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[noreturn]] void __cdecl __ExceptionPtrRethrow(const void *); 
#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *) noexcept; 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
namespace std { 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
class exception_ptr { 
#line 225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
public: exception_ptr() noexcept { 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrCreate(this); 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
exception_ptr(nullptr_t) noexcept { 
#line 230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrCreate(this); 
#line 231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
~exception_ptr() noexcept { 
#line 234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrDestroy(this); 
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
exception_ptr(const exception_ptr &_Rhs) noexcept { 
#line 238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrCopy(this, &_Rhs); 
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
exception_ptr &operator=(const exception_ptr &_Rhs) noexcept { 
#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrAssign(this, &_Rhs); 
#line 243 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return *this; 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
exception_ptr &operator=(nullptr_t) noexcept { 
#line 247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
exception_ptr _Ptr; 
#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrAssign(this, &_Ptr); 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return *this; 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
explicit operator bool() const noexcept { 
#line 253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return __ExceptionPtrToBool(this); 
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
static exception_ptr _Copy_exception(void *_Except, const void *_Ptr) { 
#line 257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
exception_ptr _Retval; 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
if (!_Ptr) { 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return _Retval; 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}  
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrCopyException(&_Retval, _Except, _Ptr); 
#line 263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return _Retval; 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
friend inline void swap(exception_ptr &_Lhs, exception_ptr &_Rhs) noexcept { 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrSwap(&_Lhs, &_Rhs); 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
friend inline bool operator==(const exception_ptr &_Lhs, const exception_ptr &_Rhs) noexcept { 
#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return __ExceptionPtrCompare(&_Lhs, &_Rhs); 
#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
friend inline bool operator==(const exception_ptr &_Lhs, std::nullptr_t) noexcept { 
#line 275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return !_Lhs; 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
friend inline bool operator==(std::nullptr_t, const exception_ptr &_Rhs) noexcept { 
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return !_Rhs; 
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
friend inline bool operator!=(const exception_ptr &_Lhs, const exception_ptr &_Rhs) noexcept { 
#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return !(_Lhs == _Rhs); 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
friend inline bool operator!=(const exception_ptr &_Lhs, std::nullptr_t _Rhs) noexcept { 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return !(_Lhs == _Rhs); 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
friend inline bool operator!=(std::nullptr_t _Lhs, const exception_ptr &_Rhs) noexcept { 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return !(_Lhs == _Rhs); 
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
private: void *_Data1{((void *)0i64)}; 
#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
void *_Data2{((void *)0i64)}; 
#line 306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}; 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[nodiscard]] inline exception_ptr current_exception() noexcept { 
#line 309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
exception_ptr _Retval; 
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrCurrentException(&_Retval); 
#line 311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return _Retval; 
#line 312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[noreturn]] inline void rethrow_exception(exception_ptr _Ptr) { 
#line 315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
__ExceptionPtrRethrow(&_Ptr); 
#line 316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 318 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
template< class _Ex> void *__GetExceptionInfo(_Ex); 
#line 321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
template < class _Ex >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] exception_ptr make_exception_ptr ( _Ex _Except ) noexcept {
    return exception_ptr :: _Copy_exception ( :: std :: addressof ( _Except ), __GetExceptionInfo ( _Except ) );
}
#line 326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
class nested_exception { 
#line 328 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
public: nested_exception() noexcept : _Exc(::std::current_exception()) { } 
#line 330 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
nested_exception(const nested_exception &) noexcept = default;
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
nested_exception &operator=(const nested_exception &) noexcept = default;
#line 332 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
virtual ~nested_exception() noexcept { } 
#line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[noreturn]] void rethrow_nested() const { 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
if ((_Exc)) { 
#line 336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
::std::rethrow_exception(_Exc); 
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} else { 
#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
::std::terminate(); 
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}  
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[nodiscard]] exception_ptr nested_ptr() const noexcept { 
#line 343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return _Exc; 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 347 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
private: exception_ptr _Exc; 
#line 348 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}; 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
template< class _Uty> 
#line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
struct _With_nested_v2 : public _Uty, public nested_exception { 
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
template < class _Ty >
    explicit _With_nested_v2 ( _Ty && _Arg )
        : _Uty ( :: std :: forward < _Ty > ( _Arg ) ), nested_exception ( ) { }
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}; 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
template < class _Ty >
[ [ noreturn ] ] void throw_with_nested ( _Ty && _Arg ) {

    using _Uty = decay_t < _Ty >;

    if constexpr ( is_class_v < _Uty > && ! is_base_of_v < nested_exception, _Uty > && ! is_final_v < _Uty > ) {

        throw _With_nested_v2 < _Uty > ( :: std :: forward < _Ty > ( _Arg ) );
    } else {

        throw :: std :: forward < _Ty > ( _Arg );
    }
}
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
template < class _Ty >
void rethrow_if_nested ( const _Ty & _Arg ) {

    constexpr bool _Can_use_dynamic_cast =
        is_polymorphic_v < _Ty > && ( ! is_base_of_v < nested_exception, _Ty > || is_convertible_v < _Ty *, nested_exception * > );

    if constexpr ( _Can_use_dynamic_cast ) {
        const auto _Nested = dynamic_cast < const nested_exception * > ( :: std :: addressof ( _Arg ) );

        if ( _Nested ) {
            _Nested -> rethrow_nested ( );
        }
    }
}
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
class bad_variant_access : public exception { 
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
public: bad_variant_access() noexcept = default;
#line 396 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[nodiscard]] virtual const char *what() const noexcept override { 
#line 397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
return "bad variant access"; 
#line 398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 406 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}; 
#line 408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
[[noreturn]] inline void _Throw_bad_variant_access() { 
#line 409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
throw bad_variant_access{}; 
#line 410 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
} 
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
}
#line 416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\exception"
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma detect_mismatch("annotate_string", "0")
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma detect_mismatch("annotate_vector", "0")
#line 120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_sanitizer_annotate_container.hpp"
extern "C" {
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_sanitizer_annotate_container.hpp"
}
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
unsigned __cdecl _clearfp(); 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
unsigned __cdecl _controlfp(unsigned _NewValue, unsigned _Mask); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
#pragma warning(pop)
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
void __cdecl _set_controlfp(unsigned _NewValue, unsigned _Mask); 
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
errno_t __cdecl _controlfp_s(unsigned * _CurrentState, unsigned _NewValue, unsigned _Mask); 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
unsigned __cdecl _statusfp(); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
void __cdecl _fpreset(); 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
unsigned __cdecl _control87(unsigned _NewValue, unsigned _Mask); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
int *__cdecl __fpecode(); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
int __cdecl __fpe_flt_rounds(); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
double __cdecl _copysign(double _Number, double _Sign); 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
double __cdecl _chgsign(double _X); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
double __cdecl _scalb(double _X, long _Y); 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
double __cdecl _logb(double _X); 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
double __cdecl _nextafter(double _X, double _Y); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
int __cdecl _finite(double _X); 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
int __cdecl _isnan(double _X); 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
int __cdecl _fpclass(double _X); 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
float __cdecl _scalbf(float _X, long _Y); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
void __cdecl fpreset(); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
}__pragma(pack ( pop )) 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\float.h"
#pragma warning(pop)
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
#pragma warning(disable: 28251)
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
extern "C" {
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask); 
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask); 
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char _bittest(const long *, long); 
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
long _InterlockedAnd(volatile long * _Value, long _Mask); 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short _InterlockedAnd16(volatile short * _Value, short _Mask); 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _InterlockedAnd64(volatile __int64 * _Value, __int64 _Mask); 
#line 144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _interlockedand64(volatile __int64 * _Value, __int64 _Mask); 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
char _InterlockedAnd8(volatile char * _Value, char _Mask); 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
long _InterlockedCompareExchange(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short _InterlockedCompareExchange16(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _InterlockedCompareExchange64(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
char _InterlockedCompareExchange8(volatile char * _Destination, char _Exchange, char _Comparand); 
#line 172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char _InterlockedCompareExchange128(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
long _InterlockedDecrement(volatile long * _Addend); 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short _InterlockedDecrement16(volatile short * _Addend); 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _InterlockedDecrement64(volatile __int64 * _Addend); 
#line 180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _interlockeddecrement64(volatile __int64 * _Addend); 
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
long _InterlockedExchange(volatile long * _Target, long _Value); 
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short _InterlockedExchange16(volatile short * _Target, short _Value); 
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _InterlockedExchange64(volatile __int64 * _Target, __int64 _Value); 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _interlockedexchange64(volatile __int64 * _Target, __int64 _Value); 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
char _InterlockedExchange8(volatile char * _Target, char _Value); 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
long _InterlockedExchangeAdd(volatile long * _Addend, long _Value); 
#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short _InterlockedExchangeAdd16(volatile short * _Addend, short _Value); 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _InterlockedExchangeAdd64(volatile __int64 * _Addend, __int64 _Value); 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _interlockedexchangeadd64(volatile __int64 * _Addend, __int64 _Value); 
#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
char _InterlockedExchangeAdd8(volatile char * _Addend, char _Value); 
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
long _InterlockedIncrement(volatile long * _Addend); 
#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short _InterlockedIncrement16(volatile short * _Addend); 
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _InterlockedIncrement64(volatile __int64 * _Addend); 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _interlockedincrement64(volatile __int64 * _Addend); 
#line 222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
long _InterlockedOr(volatile long * _Value, long _Mask); 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short _InterlockedOr16(volatile short * _Value, short _Mask); 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _InterlockedOr64(volatile __int64 * _Value, __int64 _Mask); 
#line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _interlockedor64(volatile __int64 * _Value, __int64 _Mask); 
#line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
char _InterlockedOr8(volatile char * _Value, char _Mask); 
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
long _InterlockedXor(volatile long * _Value, long _Mask); 
#line 240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short _InterlockedXor16(volatile short * _Value, short _Mask); 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _InterlockedXor64(volatile __int64 * _Value, __int64 _Mask); 
#line 245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 _interlockedxor64(volatile __int64 * _Value, __int64 _Mask); 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
char _InterlockedXor8(volatile char * _Value, char _Mask); 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
void _ReadWriteBarrier(); 
#line 257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
short __iso_volatile_load16(const volatile short *); 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
int __iso_volatile_load32(const volatile int *); 
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
__int64 __iso_volatile_load64(const volatile __int64 *); 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
char __iso_volatile_load8(const volatile char *); 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
void __iso_volatile_store16(volatile short *, short); 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
void __iso_volatile_store32(volatile int *, int); 
#line 263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
void __iso_volatile_store64(volatile __int64 *, __int64); 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
void __iso_volatile_store8(volatile char *, char); 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
void _mm_pause(); 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __lzcnt(unsigned); 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned short __lzcnt16(unsigned short); 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 __lzcnt64(unsigned __int64); 
#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __popcnt(unsigned); 
#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned short __popcnt16(unsigned short); 
#line 273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 __popcnt64(unsigned __int64); 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift); 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift); 
#line 278 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift); 
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift); 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned _tzcnt_u32(unsigned); 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct); 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __int64 __cdecl _udiv128(unsigned __int64 _HighDividend, unsigned __int64 _LowDividend, unsigned __int64 _Divisor, unsigned __int64 * _Remainder); 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
double __ceil(double); 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
float __ceilf(float); 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
double __floor(double); 
#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
float __floorf(float); 
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
double __round(double); 
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
float __roundf(float); 
#line 299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
double __trunc(double); 
#line 300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
float __truncf(float); 
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
double __copysign(double, double); 
#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
float __copysignf(float, float); 
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __signbitvalue(double); 
#line 304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
unsigned __signbitvaluef(float); 
#line 326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
void *__cdecl __builtin_assume_aligned(const void *, size_t, ...) noexcept; 
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
}
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\intrin0.inl.h"
#pragma warning(pop)
#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
namespace std { 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
enum float_denorm_style { 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
denorm_indeterminate = (-1), 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
denorm_absent = 0, 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
denorm_present
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
enum float_round_style { 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
round_indeterminate = (-1), 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
round_toward_zero = 0, 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
round_to_nearest, 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
round_toward_infinity, 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
round_toward_neg_infinity
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
struct _Num_base { 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr float_denorm_style has_denorm = denorm_absent; 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool has_denorm_loss = false; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
__pragma(warning(pop)) 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool has_infinity = false; 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool has_quiet_NaN = false; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool has_signaling_NaN = false; 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_bounded = false; 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_exact = false; 
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_iec559 = false; 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_integer = false; 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = false; 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_signed = false; 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_specialized = false; 
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool tinyness_before = false; 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool traps = false; 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr float_round_style round_style = round_toward_zero; 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 0; 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 0; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_digits10 = 0; 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_exponent = 0; 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_exponent10 = 0; 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int min_exponent = 0; 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int min_exponent10 = 0; 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int radix = 0; 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template < class _Ty >
class numeric_limits : public _Num_base {
public :
    [ [ nodiscard ] ] static constexpr _Ty ( min ) ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty ( max ) ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty lowest ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty epsilon ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty round_error ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty denorm_min ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty infinity ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty quiet_NaN ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty signaling_NaN ( ) noexcept {
        return _Ty ( );
    }
};
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template< class _Ty> 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
class numeric_limits< const _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template< class _Ty> 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
class numeric_limits< volatile _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template< class _Ty> 
#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
class numeric_limits< const volatile _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
struct _Num_int_base : public _Num_base { 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_bounded = true; 
#line 120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_exact = true; 
#line 121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_integer = true; 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_specialized = true; 
#line 123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int radix = 2; 
#line 124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
struct _Num_float_base : public _Num_base { 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr float_denorm_style has_denorm = denorm_present; 
#line 129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
__pragma(warning(pop)) 
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool has_infinity = true; 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool has_quiet_NaN = true; 
#line 133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool has_signaling_NaN = true; 
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_bounded = true; 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_iec559 = true; 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_signed = true; 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_specialized = true; 
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr float_round_style round_style = round_to_nearest; 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int radix = 2; 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< bool>  : public _Num_int_base { 
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr bool min() noexcept { 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return false; 
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr bool max() noexcept { 
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return true; 
#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr bool lowest() noexcept { 
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr bool epsilon() noexcept { 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr bool round_error() noexcept { 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr bool denorm_min() noexcept { 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr bool infinity() noexcept { 
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr bool quiet_NaN() noexcept { 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr bool signaling_NaN() noexcept { 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 1; 
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< char>  : public _Num_int_base { 
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr char min() noexcept { 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (-128); 
#line 189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char max() noexcept { 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 127; 
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char lowest() noexcept { 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char epsilon() noexcept { 
#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char round_error() noexcept { 
#line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char denorm_min() noexcept { 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char infinity() noexcept { 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char quiet_NaN() noexcept { 
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char signaling_NaN() noexcept { 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_signed = ((-128) != 0); 
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = ((-128) == 0); 
#line 225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = (8 - ((-128) != 0)); 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 2; 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< signed char>  : public _Num_int_base { 
#line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr signed char min() noexcept { 
#line 233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (-128); 
#line 234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr signed char max() noexcept { 
#line 237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 127; 
#line 238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr signed char lowest() noexcept { 
#line 241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr signed char epsilon() noexcept { 
#line 245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr signed char round_error() noexcept { 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr signed char denorm_min() noexcept { 
#line 253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr signed char infinity() noexcept { 
#line 257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr signed char quiet_NaN() noexcept { 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr signed char signaling_NaN() noexcept { 
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_signed = true; 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 7; 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 2; 
#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< unsigned char>  : public _Num_int_base { 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr unsigned char min() noexcept { 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 278 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned char max() noexcept { 
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 255; 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned char lowest() noexcept { 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned char epsilon() noexcept { 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned char round_error() noexcept { 
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned char denorm_min() noexcept { 
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned char infinity() noexcept { 
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned char quiet_NaN() noexcept { 
#line 305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned char signaling_NaN() noexcept { 
#line 309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = true; 
#line 313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 8; 
#line 314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 2; 
#line 315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< char16_t>  : public _Num_int_base { 
#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr char16_t min() noexcept { 
#line 367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 368 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char16_t max() noexcept { 
#line 371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 65535; 
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char16_t lowest() noexcept { 
#line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char16_t epsilon() noexcept { 
#line 379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 380 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char16_t round_error() noexcept { 
#line 383 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 384 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char16_t denorm_min() noexcept { 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 388 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 390 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char16_t infinity() noexcept { 
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 392 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char16_t quiet_NaN() noexcept { 
#line 395 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 396 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char16_t signaling_NaN() noexcept { 
#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 400 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 402 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = true; 
#line 403 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 16; 
#line 404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 4; 
#line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< char32_t>  : public _Num_int_base { 
#line 410 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr char32_t min() noexcept { 
#line 411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 414 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char32_t max() noexcept { 
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 4294967295U; 
#line 416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 418 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char32_t lowest() noexcept { 
#line 419 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 422 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char32_t epsilon() noexcept { 
#line 423 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 424 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 426 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char32_t round_error() noexcept { 
#line 427 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 428 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char32_t denorm_min() noexcept { 
#line 431 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 432 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 434 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char32_t infinity() noexcept { 
#line 435 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 436 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char32_t quiet_NaN() noexcept { 
#line 439 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 442 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr char32_t signaling_NaN() noexcept { 
#line 443 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 444 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 446 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = true; 
#line 447 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 32; 
#line 448 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 9; 
#line 449 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< __wchar_t>  : public _Num_int_base { 
#line 454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr __wchar_t min() noexcept { 
#line 455 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 456 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 458 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __wchar_t max() noexcept { 
#line 459 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 65535; 
#line 460 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __wchar_t lowest() noexcept { 
#line 463 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __wchar_t epsilon() noexcept { 
#line 467 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 468 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 470 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __wchar_t round_error() noexcept { 
#line 471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __wchar_t denorm_min() noexcept { 
#line 475 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __wchar_t infinity() noexcept { 
#line 479 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 482 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __wchar_t quiet_NaN() noexcept { 
#line 483 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __wchar_t signaling_NaN() noexcept { 
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 488 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 490 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = true; 
#line 491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 16; 
#line 492 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 4; 
#line 493 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 496 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< short>  : public _Num_int_base { 
#line 498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr short min() noexcept { 
#line 499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (-32768); 
#line 500 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr short max() noexcept { 
#line 503 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 32767; 
#line 504 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr short lowest() noexcept { 
#line 507 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 508 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr short epsilon() noexcept { 
#line 511 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 514 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr short round_error() noexcept { 
#line 515 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 516 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 518 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr short denorm_min() noexcept { 
#line 519 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 520 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 522 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr short infinity() noexcept { 
#line 523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 526 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr short quiet_NaN() noexcept { 
#line 527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 530 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr short signaling_NaN() noexcept { 
#line 531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 534 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_signed = true; 
#line 535 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 15; 
#line 536 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 4; 
#line 537 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 540 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< int>  : public _Num_int_base { 
#line 542 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr int min() noexcept { 
#line 543 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return ((-2147483647) - 1); 
#line 544 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 546 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr int max() noexcept { 
#line 547 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 2147483647; 
#line 548 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 550 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr int lowest() noexcept { 
#line 551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 554 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr int epsilon() noexcept { 
#line 555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 558 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr int round_error() noexcept { 
#line 559 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 560 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 562 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr int denorm_min() noexcept { 
#line 563 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr int infinity() noexcept { 
#line 567 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr int quiet_NaN() noexcept { 
#line 571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 572 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 574 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr int signaling_NaN() noexcept { 
#line 575 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 576 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 578 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_signed = true; 
#line 579 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 31; 
#line 580 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 9; 
#line 581 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 584 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< long>  : public _Num_int_base { 
#line 586 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr long min() noexcept { 
#line 587 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return ((-2147483647L) - (1)); 
#line 588 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 590 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long max() noexcept { 
#line 591 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 2147483647L; 
#line 592 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 594 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long lowest() noexcept { 
#line 595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 596 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 598 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long epsilon() noexcept { 
#line 599 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 600 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 602 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long round_error() noexcept { 
#line 603 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 604 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 606 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long denorm_min() noexcept { 
#line 607 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 608 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 610 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long infinity() noexcept { 
#line 611 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 612 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 614 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long quiet_NaN() noexcept { 
#line 615 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 616 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 618 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long signaling_NaN() noexcept { 
#line 619 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 620 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 622 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static_assert((sizeof(int) == sizeof(long)), "LLP64 assumption");
#line 623 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_signed = true; 
#line 624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 31; 
#line 625 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 9; 
#line 626 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 629 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< __int64>  : public _Num_int_base { 
#line 631 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr __int64 min() noexcept { 
#line 632 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return ((-9223372036854775807i64) - (1)); 
#line 633 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 635 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __int64 max() noexcept { 
#line 636 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 9223372036854775807i64; 
#line 637 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 639 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __int64 lowest() noexcept { 
#line 640 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 641 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 643 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __int64 epsilon() noexcept { 
#line 644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 645 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 647 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __int64 round_error() noexcept { 
#line 648 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 649 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 651 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __int64 denorm_min() noexcept { 
#line 652 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 653 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 655 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __int64 infinity() noexcept { 
#line 656 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 657 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 659 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __int64 quiet_NaN() noexcept { 
#line 660 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 661 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 663 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr __int64 signaling_NaN() noexcept { 
#line 664 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 665 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 667 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_signed = true; 
#line 668 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 63; 
#line 669 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 18; 
#line 670 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< unsigned short>  : public _Num_int_base { 
#line 676 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr unsigned short min() noexcept { 
#line 677 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 678 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 680 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned short max() noexcept { 
#line 681 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 65535; 
#line 682 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 684 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned short lowest() noexcept { 
#line 685 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 686 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 688 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned short epsilon() noexcept { 
#line 689 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 690 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 692 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned short round_error() noexcept { 
#line 693 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 694 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 696 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned short denorm_min() noexcept { 
#line 697 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 698 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 700 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned short infinity() noexcept { 
#line 701 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 702 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 704 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned short quiet_NaN() noexcept { 
#line 705 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 706 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 708 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned short signaling_NaN() noexcept { 
#line 709 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 710 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 712 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = true; 
#line 713 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 16; 
#line 714 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 4; 
#line 715 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 719 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< unsigned>  : public _Num_int_base { 
#line 721 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr unsigned min() noexcept { 
#line 722 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 723 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 725 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned max() noexcept { 
#line 726 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 4294967295U; 
#line 727 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 729 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned lowest() noexcept { 
#line 730 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 731 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 733 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned epsilon() noexcept { 
#line 734 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 735 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 737 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned round_error() noexcept { 
#line 738 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 739 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 741 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned denorm_min() noexcept { 
#line 742 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 743 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 745 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned infinity() noexcept { 
#line 746 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 747 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 749 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned quiet_NaN() noexcept { 
#line 750 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 751 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 753 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned signaling_NaN() noexcept { 
#line 754 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 755 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 757 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = true; 
#line 758 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 32; 
#line 759 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 9; 
#line 760 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 763 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< unsigned long>  : public _Num_int_base { 
#line 765 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr unsigned long min() noexcept { 
#line 766 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 767 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 769 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned long max() noexcept { 
#line 770 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 4294967295UL; 
#line 771 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 773 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned long lowest() noexcept { 
#line 774 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 777 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned long epsilon() noexcept { 
#line 778 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 779 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 781 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned long round_error() noexcept { 
#line 782 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 783 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 785 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned long denorm_min() noexcept { 
#line 786 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 787 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 789 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned long infinity() noexcept { 
#line 790 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 791 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 793 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned long quiet_NaN() noexcept { 
#line 794 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 795 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 797 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned long signaling_NaN() noexcept { 
#line 798 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 799 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 801 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static_assert((sizeof(unsigned) == sizeof(unsigned long)), "LLP64 assumption");
#line 802 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = true; 
#line 803 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 32; 
#line 804 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 9; 
#line 805 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 808 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< unsigned __int64>  : public _Num_int_base { 
#line 810 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr unsigned __int64 min() noexcept { 
#line 811 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 812 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 814 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned __int64 max() noexcept { 
#line 815 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 18446744073709551615Ui64; 
#line 816 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 818 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned __int64 lowest() noexcept { 
#line 819 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return min(); 
#line 820 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 822 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned __int64 epsilon() noexcept { 
#line 823 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 824 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 826 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned __int64 round_error() noexcept { 
#line 827 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 828 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 830 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned __int64 denorm_min() noexcept { 
#line 831 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 832 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 834 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned __int64 infinity() noexcept { 
#line 835 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 836 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 838 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned __int64 quiet_NaN() noexcept { 
#line 839 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 840 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 842 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr unsigned __int64 signaling_NaN() noexcept { 
#line 843 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return 0; 
#line 844 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 846 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr bool is_modulo = true; 
#line 847 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 64; 
#line 848 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 19; 
#line 849 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< float>  : public _Num_float_base { 
#line 854 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr float min() noexcept { 
#line 855 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (1.175494351e-38F); 
#line 856 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 858 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr float max() noexcept { 
#line 859 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (3.402823466e+38F); 
#line 860 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 862 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr float lowest() noexcept { 
#line 863 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return -max(); 
#line 864 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 866 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr float epsilon() noexcept { 
#line 867 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (1.192092896e-07F); 
#line 868 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 870 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr float round_error() noexcept { 
#line 871 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (0.5F); 
#line 872 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 874 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr float denorm_min() noexcept { 
#line 875 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (1.401298464e-45F); 
#line 876 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr float infinity() noexcept { 
#line 879 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_huge_valf(); 
#line 880 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 882 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr float quiet_NaN() noexcept { 
#line 883 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_nanf("0"); 
#line 884 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 886 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr float signaling_NaN() noexcept { 
#line 887 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_nansf("1"); 
#line 888 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 890 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 24; 
#line 891 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 6; 
#line 892 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_digits10 = 9; 
#line 893 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_exponent = 128; 
#line 894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_exponent10 = 38; 
#line 895 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int min_exponent = (-125); 
#line 896 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int min_exponent10 = (-37); 
#line 897 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 900 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< double>  : public _Num_float_base { 
#line 902 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr double min() noexcept { 
#line 903 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (2.225073858507201383e-308); 
#line 904 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 906 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr double max() noexcept { 
#line 907 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (1.797693134862315708e+308); 
#line 908 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 910 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr double lowest() noexcept { 
#line 911 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return -max(); 
#line 912 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 914 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr double epsilon() noexcept { 
#line 915 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (2.220446049250313081e-16); 
#line 916 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 918 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr double round_error() noexcept { 
#line 919 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (0.5); 
#line 920 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 922 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr double denorm_min() noexcept { 
#line 923 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (4.940656458412465442e-324); 
#line 924 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 926 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr double infinity() noexcept { 
#line 927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_huge_val(); 
#line 928 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr double quiet_NaN() noexcept { 
#line 931 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_nan("0"); 
#line 932 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr double signaling_NaN() noexcept { 
#line 935 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_nans("1"); 
#line 936 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 938 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 53; 
#line 939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 15; 
#line 940 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_digits10 = 17; 
#line 941 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_exponent = 1024; 
#line 942 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_exponent10 = 308; 
#line 943 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int min_exponent = (-1021); 
#line 944 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int min_exponent10 = (-307); 
#line 945 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 948 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
template<> class numeric_limits< long double>  : public _Num_float_base { 
#line 950 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
public: [[nodiscard]] static constexpr long double min() noexcept { 
#line 951 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (2.225073858507201383e-308); 
#line 952 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 954 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long double max() noexcept { 
#line 955 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (1.797693134862315708e+308); 
#line 956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 958 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long double lowest() noexcept { 
#line 959 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return -max(); 
#line 960 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 962 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long double epsilon() noexcept { 
#line 963 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (2.220446049250313081e-16); 
#line 964 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 966 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long double round_error() noexcept { 
#line 967 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (0.5L); 
#line 968 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 970 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long double denorm_min() noexcept { 
#line 971 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return (4.940656458412465442e-324); 
#line 972 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 974 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long double infinity() noexcept { 
#line 975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_huge_val(); 
#line 976 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 978 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long double quiet_NaN() noexcept { 
#line 979 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_nan("0"); 
#line 980 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 982 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
[[nodiscard]] static constexpr long double signaling_NaN() noexcept { 
#line 983 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
return __builtin_nans("1"); 
#line 984 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
} 
#line 986 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits = 53; 
#line 987 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int digits10 = 15; 
#line 988 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_digits10 = ((2) + (((53) * 301L) / (1000))); 
#line 989 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_exponent = 1024; 
#line 990 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int max_exponent10 = 308; 
#line 991 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int min_exponent = (-1021); 
#line 992 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
static constexpr int min_exponent10 = (-307); 
#line 993 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}; 
#line 995 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
}
#line 998 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\limits"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
namespace std { 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
class bad_alloc; 
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
class bad_array_new_length; 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
using new_handler = void (__cdecl *)(void); 
#line 111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
new_handler __cdecl set_new_handler(new_handler) noexcept; 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
[[nodiscard]] new_handler __cdecl get_new_handler() noexcept; 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
}
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\new"
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
namespace std { 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
enum memory_order { 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
memory_order_relaxed, 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
memory_order_consume, 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
memory_order_acquire, 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
memory_order_release, 
#line 98 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
memory_order_acq_rel, 
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
memory_order_seq_cst
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
}; 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
using _Atomic_counter_t = unsigned long; 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
template < class _Integral, class _Ty >
[ [ nodiscard ] ] volatile _Integral * _Atomic_address_as ( _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    return & reinterpret_cast < volatile _Integral & > ( _Source );
}
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
template < class _Integral, class _Ty >
[ [ nodiscard ] ] const volatile _Integral * _Atomic_address_as ( const _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    return & reinterpret_cast < const volatile _Integral & > ( _Source );
}
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
}
#line 123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xatomic.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
namespace std { 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ptrty >
[ [ nodiscard ] ] constexpr auto _Unfancy ( _Ptrty _Ptr ) noexcept {
    return :: std :: addressof ( * _Ptr );
}
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty * _Unfancy ( _Ty * _Ptr ) noexcept {
    return _Ptr;
}
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
struct [ [ nodiscard ] ] _Tidy_guard {
    _Ty * _Target;
    inline ~ _Tidy_guard ( ) {
        if ( _Target ) {
            _Target -> _Tidy ( );
        }
    }
};
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
struct [ [ nodiscard ] ] _Tidy_deallocate_guard {
    _Ty * _Target;
    inline ~ _Tidy_deallocate_guard ( ) {
        if ( _Target ) {
            _Target -> _Tidy_deallocate ( );
        }
    }
};
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Keycmp, class _Lhs, class _Rhs> constexpr bool 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Nothrow_compare = noexcept((static_cast< bool>(std::declval< const _Keycmp &> ()(std::declval< const _Lhs &> (), std::declval< const _Rhs &> ())))); 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
[[noreturn]] inline void _Throw_bad_array_new_length() { 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
throw bad_array_new_length{}; 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < size_t _Ty_size >
[ [ nodiscard ] ] constexpr size_t _Get_size_of_n ( const size_t _Count ) {
    constexpr bool _Overflow_is_possible = _Ty_size > 1;

    if constexpr ( _Overflow_is_possible ) {
        constexpr size_t _Max_possible = static_cast < size_t > ( - 1 ) / _Ty_size;
        if ( _Count > _Max_possible ) {
            _Throw_bad_array_new_length ( );
        }
    }

    return _Count * _Ty_size;
}
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> constexpr size_t 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_New_alignof = (::std::max)(__alignof(_Ty), 16Ui64); 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Default_allocate_traits { 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__declspec(allocator) static void *
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Allocate(const size_t _Bytes) { 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return ::operator new(_Bytes); 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr bool _Is_pow_2(const size_t _Value) noexcept { 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return (_Value != (0)) && ((_Value & (_Value - (1))) == (0)); 
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr size_t _Big_allocation_threshold = (4096); 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr size_t _Big_allocation_alignment = (32); 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr size_t _Non_user_size = ((sizeof(void *) + _Big_allocation_alignment) - (1)); 
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr size_t _Big_allocation_sentinel = 18085043209519168250Ui64; 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Traits >
__declspec ( allocator ) void * _Allocate_manually_vector_aligned ( const size_t _Bytes ) {

    const size_t _Block_size = _Non_user_size + _Bytes;
    if ( _Block_size <= _Bytes ) {
        _Throw_bad_array_new_length ( );
    }

    const uintptr_t _Ptr_container = reinterpret_cast < uintptr_t > ( _Traits :: _Allocate ( _Block_size ) );
    do { if ( _Ptr_container != 0 ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
    void * const _Ptr = reinterpret_cast < void * > ( ( _Ptr_container + _Non_user_size ) & ~ ( _Big_allocation_alignment - 1 ) );
    static_cast < uintptr_t * > ( _Ptr ) [ - 1 ] = _Ptr_container;




    return _Ptr;
}
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void _Adjust_manually_vector_aligned(void *&_Ptr, size_t &_Bytes) { 
#line 160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Bytes += _Non_user_size; 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
const uintptr_t *const _Ptr_user = static_cast< uintptr_t *>(_Ptr); 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
const uintptr_t _Ptr_container = _Ptr_user[-1]; 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
; 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr uintptr_t _Min_back_shift = sizeof(void *); 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
const uintptr_t _Back_shift = (reinterpret_cast< uintptr_t>(_Ptr)) - _Ptr_container; 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
do { if ((_Back_shift >= _Min_back_shift) && (_Back_shift <= _Non_user_size)) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); }  ; } while (false); 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Ptr = (reinterpret_cast< void *>(_Ptr_container)); 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < size_t _Align, class _Traits = _Default_allocate_traits,
    enable_if_t < ( ! 0 || _Align <= 16Ui64 ), int > = 0 >
__declspec ( allocator ) inline void * _Allocate ( const size_t _Bytes ) {





    {
        if ( _Bytes >= _Big_allocation_threshold ) {
            return _Allocate_manually_vector_aligned < _Traits > ( _Bytes );
        }
    }


    if ( _Bytes != 0 ) {
        return _Traits :: _Allocate ( _Bytes );
    }

    return nullptr;
}
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < size_t _Align, enable_if_t < ( ! 0 || _Align <= 16Ui64 ), int > = 0 >
inline void _Deallocate ( void * _Ptr, size_t _Bytes ) noexcept {






    {

        if ( _Bytes >= _Big_allocation_threshold ) {
            _Adjust_manually_vector_aligned ( _Ptr, _Bytes );
        }

        :: operator delete ( _Ptr, _Bytes );
    }
}
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty, class ... _Types >
_Ty * _Global_new ( _Types && ... _Args ) {
    struct [ [ nodiscard ] ] _Guard_type {
        void * _Result;
        ~ _Guard_type ( ) {
            if ( _Result ) {
                _Deallocate < _New_alignof < _Ty >> ( _Result, sizeof ( _Ty ) );
            }
        }
    };

    _Guard_type _Guard { _Allocate < _New_alignof < _Ty >> ( sizeof ( _Ty ) ) };
    :: new ( _Guard . _Result ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
    return static_cast < _Ty * > ( :: std :: exchange ( _Guard . _Result, nullptr ) );
}
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ptr, class _Ty> using _Rebind_pointer_t = typename pointer_traits< _Ptr> ::template rebind< _Ty> ; 
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Pointer, enable_if_t < ! is_pointer_v < _Pointer >, int > = 0 >
inline _Pointer _Refancy ( typename pointer_traits < _Pointer > :: element_type * _Ptr ) noexcept {
    return pointer_traits < _Pointer > :: pointer_to ( * _Ptr );
}
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Pointer, enable_if_t < is_pointer_v < _Pointer >, int > = 0 >
inline _Pointer _Refancy ( _Pointer _Ptr ) noexcept {
    return _Ptr;
}
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _NoThrowFwdIt, class _NoThrowSentinel >
inline void _Destroy_range ( _NoThrowFwdIt _First, _NoThrowSentinel _Last ) noexcept;
#line 306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
inline void _Destroy_in_place ( _Ty & _Obj ) noexcept {
    if constexpr ( is_array_v < _Ty > ) {
        _Destroy_range ( _Obj, _Obj + extent_v < _Ty > );
    } else {
        _Obj . ~ _Ty ( );
    }
}
#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ptrty >
auto _Const_cast ( _Ptrty _Ptr ) noexcept {
    using _Elem = typename pointer_traits < _Ptrty > :: element_type;
    using _Modifiable = remove_const_t < _Elem >;
    using _Dest = typename pointer_traits < _Ptrty > :: template rebind < _Modifiable >;

    return pointer_traits < _Dest > :: pointer_to ( const_cast < _Modifiable & > ( * _Ptr ) );
}
#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
auto _Const_cast ( _Ty * _Ptr ) noexcept {
    return const_cast < remove_const_t < _Ty > * > ( _Ptr );
}
#line 343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_pointer_type { 
#line 345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::value_type *; 
#line 346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 348 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_pointer_type< _Ty, void_t< typename _Ty::pointer> >  { 
#line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::pointer; 
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_const_pointer_type { 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using _Valty = typename _Ty::value_type; 
#line 359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename pointer_traits< _Ptrty> ::template rebind< const _Valty> ; 
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_const_pointer_type< _Ty, void_t< typename _Ty::const_pointer> >  { 
#line 365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::const_pointer; 
#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_void_pointer_type { 
#line 371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename pointer_traits< _Ptrty> ::template rebind< void> ; 
#line 373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_void_pointer_type< _Ty, void_t< typename _Ty::void_pointer> >  { 
#line 377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::void_pointer; 
#line 378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 380 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 381 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_const_void_pointer_type { 
#line 382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 383 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename pointer_traits< _Ptrty> ::template rebind< const void> ; 
#line 384 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_const_void_pointer_type< _Ty, void_t< typename _Ty::const_void_pointer> >  { 
#line 388 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::const_void_pointer; 
#line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 392 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_difference_type { 
#line 393 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename pointer_traits< _Ptrty> ::difference_type; 
#line 395 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_difference_type< _Ty, void_t< typename _Ty::difference_type> >  { 
#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::difference_type; 
#line 400 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 402 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 403 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_size_type { 
#line 404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = make_unsigned_t< typename _Get_difference_type< _Ty> ::type> ; 
#line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_size_type< _Ty, void_t< typename _Ty::size_type> >  { 
#line 409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::size_type; 
#line 410 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 413 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_propagate_on_container_copy { 
#line 414 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = false_type; 
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 417 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 418 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_propagate_on_container_copy< _Ty, void_t< typename _Ty::propagate_on_container_copy_assignment> >  { 
#line 419 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::propagate_on_container_copy_assignment; 
#line 420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 422 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 423 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_propagate_on_container_move { 
#line 424 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = false_type; 
#line 425 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 427 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 428 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_propagate_on_container_move< _Ty, void_t< typename _Ty::propagate_on_container_move_assignment> >  { 
#line 429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::propagate_on_container_move_assignment; 
#line 430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 432 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_propagate_on_container_swap { 
#line 434 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = false_type; 
#line 435 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_propagate_on_container_swap< _Ty, void_t< typename _Ty::propagate_on_container_swap> >  { 
#line 439 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::propagate_on_container_swap; 
#line 440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 442 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> 
#line 443 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_is_always_equal { 
#line 444 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = bool_constant< is_empty_v< _Ty> > ; 
#line 445 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 447 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 448 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 449 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_is_always_equal< _Ty, void_t< typename _Ty::is_always_equal> >  { 
#line 450 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::is_always_equal; 
#line 451 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class _Other, class  = void> 
#line 455 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_rebind_type { 
#line 456 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Replace_first_parameter< _Other, _Ty> ::type; 
#line 457 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 459 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 460 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class _Other> 
#line 461 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Get_rebind_type< _Ty, _Other, void_t< typename _Ty::template rebind< _Other> ::other> >  { 
#line 462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using type = typename _Ty::template rebind< _Other> ::other; 
#line 463 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> class allocator; 
#line 469 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class  = void> 
#line 470 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Is_default_allocator : public false_type { }; 
#line 472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 473 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Is_default_allocator< allocator< _Ty> , void_t< typename allocator< _Ty> ::_From_primary> >  : public is_same< typename allocator< _Ty> ::_From_primary, allocator< _Ty> > ::type { 
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 490 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Void, class ..._Types> 
#line 491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_no_allocator_construct : public true_type { }; 
#line 493 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Ptr, class ..._Args> 
#line 495 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_no_allocator_construct< void_t< decltype(std::declval< _Alloc &> ().construct(std::declval< _Ptr> (), std::declval< _Args> ()...))> , _Alloc, _Ptr, _Args...>  : public false_type { 
#line 497 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 500 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Ptr, class ..._Args> using _Uses_default_construct = disjunction< _Is_default_allocator< _Alloc> , _Has_no_allocator_construct< void, _Alloc, _Ptr, _Args...> > ; 
#line 504 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Ptr, class  = void> 
#line 505 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_no_alloc_destroy : public true_type { }; 
#line 507 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 508 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Ptr> 
#line 509 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_no_alloc_destroy< _Alloc, _Ptr, void_t< decltype(std::declval< _Alloc &> ().destroy(std::declval< _Ptr> ()))> >  : public false_type { 
#line 510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 511 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 513 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Ptr> using _Uses_default_destroy = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ; 
#line 516 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Size_type, class _Const_void_pointer, class  = void> 
#line 517 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_allocate_hint : public false_type { }; 
#line 519 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 520 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Size_type, class _Const_void_pointer> 
#line 521 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_allocate_hint< _Alloc, _Size_type, _Const_void_pointer, void_t< decltype(std::declval< _Alloc &> ().allocate(std::declval< const _Size_type &> (), std::declval< const _Const_void_pointer &> ()))> >  : public true_type { 
#line 523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 526 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class  = void> 
#line 527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_max_size : public false_type { }; 
#line 529 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 530 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> 
#line 531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_max_size< _Alloc, void_t< decltype(std::declval< const _Alloc &> ().max_size())> >  : public true_type { }; 
#line 532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 534 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class  = void> 
#line 535 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_select_on_container_copy_construction : public false_type { }; 
#line 537 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> 
#line 538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Has_select_on_container_copy_construction< _Alloc, void_t< decltype(std::declval< const _Alloc &> ().select_on_container_copy_construction())> >  : public true_type { 
#line 539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 549 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> struct allocator_traits; 
#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 553 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
struct _Normal_allocator_traits {
    using allocator_type = _Alloc;
    using value_type = typename _Alloc :: value_type;

    using pointer = typename _Get_pointer_type < _Alloc > :: type;
    using const_pointer = typename _Get_const_pointer_type < _Alloc > :: type;
    using void_pointer = typename _Get_void_pointer_type < _Alloc > :: type;
    using const_void_pointer = typename _Get_const_void_pointer_type < _Alloc > :: type;

    using size_type = typename _Get_size_type < _Alloc > :: type;
    using difference_type = typename _Get_difference_type < _Alloc > :: type;

    using propagate_on_container_copy_assignment = typename _Get_propagate_on_container_copy < _Alloc > :: type;
    using propagate_on_container_move_assignment = typename _Get_propagate_on_container_move < _Alloc > :: type;
    using propagate_on_container_swap = typename _Get_propagate_on_container_swap < _Alloc > :: type;
    using is_always_equal = typename _Get_is_always_equal < _Alloc > :: type;

    template < class _Other >
    using rebind_alloc = typename _Get_rebind_type < _Alloc, _Other > :: type;

    template < class _Other >
    using rebind_traits = allocator_traits < rebind_alloc < _Other >>;

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count ) {
        return _Al . allocate ( _Count );
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count, const const_void_pointer _Hint ) {
        if constexpr ( _Has_allocate_hint < _Alloc, size_type, const_void_pointer > :: value ) {
            return _Al . allocate ( _Count, _Hint );
        } else {
            return _Al . allocate ( _Count );
        }
    }












    static inline void deallocate ( _Alloc & _Al, pointer _Ptr, size_type _Count ) {
        _Al . deallocate ( _Ptr, _Count );
    }

    template < class _Ty, class ... _Types >
    static inline void construct ( _Alloc & _Al, _Ty * _Ptr, _Types && ... _Args ) {
        if constexpr ( _Uses_default_construct < _Alloc, _Ty *, _Types ... > :: value ) {



            :: new ( static_cast < void * > ( _Ptr ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );

        } else {
            _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    template < class _Ty >
    static inline void destroy ( _Alloc & _Al, _Ty * _Ptr ) {
        if constexpr ( _Uses_default_destroy < _Alloc, _Ty * > :: value ) {



            _Ptr -> ~ _Ty ( );

        } else {
            _Al . destroy ( _Ptr );
        }
    }

    [ [ nodiscard ] ] static inline size_type max_size ( const _Alloc & _Al ) noexcept {
        if constexpr ( _Has_max_size < _Alloc > :: value ) {
            return _Al . max_size ( );
        } else {
            return ( numeric_limits < size_type > :: max ) ( ) / sizeof ( value_type );
        }
    }

    [ [ nodiscard ] ] static inline _Alloc select_on_container_copy_construction ( const _Alloc & _Al ) {
        if constexpr ( _Has_select_on_container_copy_construction < _Alloc > :: value ) {
            return _Al . select_on_container_copy_construction ( );
        } else {
            return _Al;
        }
    }
};
#line 648 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
__pragma(warning(pop)) 
#line 650 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
struct _Default_allocator_traits {
    using allocator_type = _Alloc;
    using value_type = typename _Alloc :: value_type;

    using pointer = value_type *;
    using const_pointer = const value_type *;
    using void_pointer = void *;
    using const_void_pointer = const void *;

    using size_type = size_t;
    using difference_type = ptrdiff_t;

    using propagate_on_container_copy_assignment = false_type;
    using propagate_on_container_move_assignment = true_type;
    using propagate_on_container_swap = false_type;
    using is_always_equal = true_type;

    template < class _Other >
    using rebind_alloc = allocator < _Other >;

    template < class _Other >
    using rebind_traits = allocator_traits < allocator < _Other >>;

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count ) {





        {
            ( void ) _Al;
            return static_cast < pointer > (
                _Allocate < _New_alignof < value_type >> ( _Get_size_of_n < sizeof ( value_type ) > ( _Count ) ) );
        }
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count, const_void_pointer ) {





        {
            ( void ) _Al;
            return static_cast < pointer > (
                _Allocate < _New_alignof < value_type >> ( _Get_size_of_n < sizeof ( value_type ) > ( _Count ) ) );
        }
    }








    static inline void deallocate ( _Alloc & _Al, const pointer _Ptr, const size_type _Count ) {






        {
            ( void ) _Al;
            _Deallocate < _New_alignof < value_type >> ( _Ptr, sizeof ( value_type ) * _Count );
        }
    }

    template < class _Objty, class ... _Types >
    static inline void construct ( _Alloc &, _Objty * const _Ptr, _Types && ... _Args ) {



        :: new ( const_cast < void * > ( static_cast < const volatile void * > ( _Ptr ) ) ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );

    }

    template < class _Uty >
    static inline void destroy ( _Alloc &, _Uty * const _Ptr ) {



        _Ptr -> ~ _Uty ( );

    }

    [ [ nodiscard ] ] static inline size_type max_size ( const _Alloc & ) noexcept {
        return static_cast < size_t > ( - 1 ) / sizeof ( value_type );
    }

    [ [ nodiscard ] ] static inline _Alloc select_on_container_copy_construction ( const _Alloc & _Al ) {
        return _Al;
    }
};
#line 749 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> 
#line 750 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct allocator_traits : public conditional_t< _Is_default_allocator< _Alloc> ::value, _Default_allocator_traits< _Alloc> , _Normal_allocator_traits< _Alloc> >  { 
#line 751 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 755 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> constexpr bool 
#line 756 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Choose_pocca_v = (allocator_traits< _Alloc> ::propagate_on_container_copy_assignment::value && (!allocator_traits< _Alloc> ::is_always_equal::value)); 
#line 759 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
enum class _Pocma_values { 
#line 760 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Equal_allocators, 
#line 761 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Propagate_allocators, 
#line 762 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_No_propagate_allocators
#line 763 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 765 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> constexpr _Pocma_values 
#line 766 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Choose_pocma_v = ((allocator_traits< _Alloc> ::is_always_equal::value) ? _Pocma_values::_Equal_allocators : ((allocator_traits< _Alloc> ::propagate_on_container_move_assignment::value) ? _Pocma_values::_Propagate_allocators : _Pocma_values::_No_propagate_allocators)); 
#line 773 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Value_type> using _Rebind_alloc_t = typename allocator_traits< _Alloc> ::template rebind_alloc< _Value_type> ; 
#line 778 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc, class _Value_type> using _Maybe_rebind_alloc_t = typename _Select< is_same_v< typename _Alloc::value_type, _Value_type> > ::template _Apply< _Alloc &, _Rebind_alloc_t< _Alloc, _Value_type> > ; 
#line 783 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> constexpr bool 
#line 784 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Is_simple_alloc_v = ((is_same_v< typename allocator_traits< _Alloc> ::size_type, unsigned __int64>  && is_same_v< typename allocator_traits< _Alloc> ::difference_type, __int64> ) && is_same_v< typename allocator_traits< _Alloc> ::pointer, typename _Alloc::value_type *> ) && is_same_v< typename allocator_traits< _Alloc> ::const_pointer, const typename _Alloc::value_type *> ; 
#line 790 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Value_type> 
#line 791 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Simple_types { 
#line 793 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using value_type = _Value_type; 
#line 794 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using size_type = size_t; 
#line 795 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using difference_type = ptrdiff_t; 
#line 796 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using pointer = value_type *; 
#line 797 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using const_pointer = const value_type *; 
#line 798 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 801 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr size_t _Asan_granularity = (8); 
#line 802 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr size_t _Asan_granularity_mask = (_Asan_granularity - (1)); 
#line 804 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Asan_aligned_pointers { 
#line 805 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
const void *_First; 
#line 806 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
const void *_End; 
#line 808 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
[[nodiscard]] constexpr const void *_Clamp_to_end(const void *_Mid) const noexcept { 
#line 809 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
; 
#line 810 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
if (_Mid > (_End)) { 
#line 811 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return _End; 
#line 812 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} else { 
#line 813 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return _Mid; 
#line 814 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}  
#line 815 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 816 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 898 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
[[nodiscard]] inline _Asan_aligned_pointers _Get_asan_aligned_first_end(const void *const 
#line 899 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_First, const void *const _End) noexcept { 
#line 900 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return {reinterpret_cast< const void *>((reinterpret_cast< uintptr_t>(_First)) & (~_Asan_granularity_mask)), reinterpret_cast< const void *>((reinterpret_cast< uintptr_t>(_End)) & (~_Asan_granularity_mask))}; 
#line 904 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 909 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
[[nodiscard]] inline const void *_Get_asan_aligned_after(const void *const _End) noexcept { 
#line 910 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return reinterpret_cast< const void *>(((reinterpret_cast< uintptr_t>(_End)) + _Asan_granularity_mask) & (~_Asan_granularity_mask)); 
#line 912 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 914 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Container, class  = void> constexpr size_t 
#line 915 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_allocation_minimum_asan_alignment = __alignof(typename _Container::value_type); 
#line 917 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Container> constexpr size_t 
#line 918 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_allocation_minimum_asan_alignment< _Container, void_t< decltype(_Container::allocator_type::_Minimum_asan_allocation_alignment)> >  = (std::max)(__alignof(typename _Container::value_type), _Container::allocator_type::_Minimum_asan_allocation_alignment); 
#line 923 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
class allocator {
public :
    static_assert ( ! is_const_v < _Ty >, "The C++ Standard forbids containers of const elements because allocator<const T> is ill-formed."
                                                                               );
    static_assert ( ! is_function_v < _Ty >, "The C++ Standard forbids allocators for function elements because of [allocator.requirements]."
                                                                             );
    static_assert ( ! is_reference_v < _Ty >, "The C++ Standard forbids allocators for reference elements because of [allocator.requirements]."
                                                                              );

    using _From_primary = allocator;

    using value_type = _Ty;


    using pointer = _Ty *;
    using const_pointer = const _Ty *;

    using reference = _Ty &;
    using const_reference = const _Ty &;


    using size_type = size_t;
    using difference_type = ptrdiff_t;

    using propagate_on_container_move_assignment = true_type;
    using is_always_equal = true_type;


    template < class _Other >
    struct rebind {
        using other = allocator < _Other >;
    };

     [ [ nodiscard ] ] _Ty * address ( _Ty & _Val ) const noexcept {
        return :: std :: addressof ( _Val );
    }

     [ [ nodiscard ] ] const _Ty * address ( const _Ty & _Val ) const noexcept {
        return :: std :: addressof ( _Val );
    }


    constexpr allocator ( ) noexcept { }

    constexpr allocator ( const allocator & ) noexcept = default;
    template < class _Other >
    constexpr allocator ( const allocator < _Other > & ) noexcept { }
    inline ~ allocator ( ) = default;
    inline allocator & operator = ( const allocator & ) = default;

    inline void deallocate ( _Ty * const _Ptr, const size_t _Count ) {
        ;

        _Deallocate < _New_alignof < _Ty >> ( _Ptr, sizeof ( _Ty ) * _Count );
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] inline __declspec ( allocator ) _Ty * allocate ( const size_t _Count ) {
        static_assert ( sizeof ( value_type ) > 0, "value_type must be complete before calling allocate." );
        return static_cast < _Ty * > ( _Allocate < _New_alignof < _Ty >> ( _Get_size_of_n < sizeof ( _Ty ) > ( _Count ) ) );
    }









     [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] __declspec ( allocator ) _Ty * allocate (
         const size_t _Count, const void * ) {
        return allocate ( _Count );
    }

    template < class _Objty, class ... _Types >
     void construct ( _Objty * const _Ptr, _Types && ... _Args ) {
        :: new ( const_cast < void * > ( static_cast < const volatile void * > ( _Ptr ) ) ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );
    }

    template < class _Uty >
     void destroy ( _Uty * const _Ptr ) {
        _Ptr -> ~ _Uty ( );
    }

     [ [ nodiscard ] ] size_t max_size ( ) const noexcept {
        return static_cast < size_t > ( - 1 ) / sizeof ( _Ty );
    }


    static constexpr size_t _Minimum_asan_allocation_alignment = _Asan_granularity;
};
#line 1018 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
#pragma pack(8)
template<> 
#line 1018 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
class allocator< void>  { 
#line 1020 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
public: using value_type = void; 
#line 1022 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using pointer = void *; 
#line 1023 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using const_pointer = const void *; 
#line 1025 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Other> 
#line 1026 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct rebind { 
#line 1027 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using other = std::allocator< _Other> ; 
#line 1028 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1038 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#pragma pack()
#line 1041 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty, class _Other >
[ [ nodiscard ] ] inline bool operator == ( const allocator < _Ty > &, const allocator < _Other > & ) noexcept {
    return true;
}
#line 1047 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty, class _Other >
[ [ nodiscard ] ] bool operator != ( const allocator < _Ty > &, const allocator < _Other > & ) noexcept {
    return false;
}
#line 1060 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> using _Alloc_ptr_t = typename allocator_traits< _Alloc> ::pointer; 
#line 1063 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> using _Alloc_size_t = typename allocator_traits< _Alloc> ::size_type; 
#line 1066 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
inline void _Pocca ( _Alloc & _Left, const _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_copy_assignment :: value ) {
        _Left = _Right;
    }
}
#line 1073 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
inline void _Pocma ( _Alloc & _Left, _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_move_assignment :: value ) {
        _Left = :: std :: move ( _Right );
    }
}
#line 1080 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
inline void _Pocs ( _Alloc & _Left, _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_swap :: value ) {
        swap ( _Left, _Right );
    } else {
        ;
    }
}
#line 1089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
inline void _Destroy_range ( _Alloc_ptr_t < _Alloc > _First, const _Alloc_ptr_t < _Alloc > _Last, _Alloc & _Al ) noexcept {

    using _Ty = typename _Alloc :: value_type;
    if constexpr ( ! conjunction_v < is_trivially_destructible < _Ty >, _Uses_default_destroy < _Alloc, _Ty * >> ) {
        for (; _First != _Last; ++ _First ) {
            allocator_traits < _Alloc > :: destroy ( _Al, _Unfancy ( _First ) );
        }
    }
}
#line 1100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _NoThrowFwdIt, class _NoThrowSentinel >
inline void _Destroy_range ( _NoThrowFwdIt _First, const _NoThrowSentinel _Last ) noexcept {

    if constexpr ( ! is_trivially_destructible_v < _Iter_value_t < _NoThrowFwdIt >> ) {
        for (; _First != _Last; ++ _First ) {
            _Destroy_in_place ( * _First );
        }
    }
}
#line 1110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Size_type, class _Unsigned_type >
[ [ nodiscard ] ] constexpr _Size_type _Convert_size ( const _Unsigned_type _Len ) noexcept (
    sizeof ( _Unsigned_type ) <= sizeof ( _Size_type ) ) {

    ;
    ;

    if constexpr ( sizeof ( _Unsigned_type ) > sizeof ( _Size_type ) ) {
        if ( _Len > ( numeric_limits < _Size_type > :: max ) ( ) ) {
            _Xlength_error ( "size is too long for _Size_type" );
        }
    }

    return static_cast < _Size_type > ( _Len );
}
#line 1126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
inline void _Deallocate_plain ( _Alloc & _Al, typename _Alloc :: value_type * const _Ptr ) noexcept {

    using _Alloc_traits = allocator_traits < _Alloc >;
    if constexpr ( is_same_v < _Alloc_ptr_t < _Alloc >, typename _Alloc :: value_type * > ) {
        _Alloc_traits :: deallocate ( _Al, _Ptr, 1 );
    } else {
        using _Ptr_traits = pointer_traits < _Alloc_ptr_t < _Alloc >>;
        _Alloc_traits :: deallocate ( _Al, _Ptr_traits :: pointer_to ( * _Ptr ), 1 );
    }
}
#line 1138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
inline void _Delete_plain_internal ( _Alloc & _Al, typename _Alloc :: value_type * const _Ptr ) noexcept {

    using _Ty = typename _Alloc :: value_type;
    _Ptr -> ~ _Ty ( );
    _Deallocate_plain ( _Al, _Ptr );
}
#line 1146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
struct _Alloc_construct_ptr {
    using pointer = _Alloc_ptr_t < _Alloc >;
    _Alloc & _Al;
    pointer _Ptr;

    inline explicit _Alloc_construct_ptr ( _Alloc & _Al_ ) : _Al ( _Al_ ), _Ptr ( nullptr ) { }

    [ [ nodiscard ] ] inline pointer _Release ( ) noexcept {
        return :: std :: exchange ( _Ptr, nullptr );
    }

    inline void _Allocate ( ) {
        _Ptr = nullptr;
        _Ptr = _Al . allocate ( 1 );
    }

    inline ~ _Alloc_construct_ptr ( ) {
        if ( _Ptr ) {
            _Al . deallocate ( _Ptr, 1 );
        }
    }

    _Alloc_construct_ptr ( const _Alloc_construct_ptr & ) = delete;
    _Alloc_construct_ptr & operator = ( const _Alloc_construct_ptr & ) = delete;
};
#line 1173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Fake_allocator { }; 
#line 1175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Container_base0 { 
#line 1176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Orphan_all() noexcept { } 
#line 1177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Swap_proxy_and_iterators(_Container_base0 &) noexcept { } 
#line 1178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Alloc_proxy(const _Fake_allocator &) noexcept { } 
#line 1179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Reload_proxy(const _Fake_allocator &, const _Fake_allocator &) noexcept { } 
#line 1180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Iterator_base0 { 
#line 1183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Adopt(const void *) noexcept { } 
#line 1184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
const _Container_base0 *_Getcont() const noexcept { 
#line 1185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return nullptr; 
#line 1186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
static constexpr bool _Unwrap_when_unverified = true; 
#line 1189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Container_base12; 
#line 1192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Container_proxy { 
#line 1193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_proxy() noexcept = default;
#line 1194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_proxy(_Container_base12 *_Mycont_) noexcept : _Mycont(_Mycont_) { } 
#line 1196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
const _Container_base12 *_Mycont = (nullptr); 
#line 1197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
mutable _Iterator_base12 *_Myfirstiter = (nullptr); 
#line 1198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Container_base12 { 
#line 1202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_base12() noexcept = default;
#line 1204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_base12(const _Container_base12 &) = delete;
#line 1205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_base12 &operator=(const _Container_base12 &) = delete;
#line 1207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void _Orphan_all() noexcept; 
#line 1208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void _Swap_proxy_and_iterators(_Container_base12 &) noexcept; 
#line 1210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
    inline void _Alloc_proxy ( _Alloc && _Al ) {
        _Container_proxy * const _New_proxy = _Unfancy ( _Al . allocate ( 1 ) );
        _Construct_in_place ( * _New_proxy, this );
        _Myproxy = _New_proxy;
        _New_proxy -> _Mycont = this;
    }
#line 1218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
    inline void _Reload_proxy ( _Alloc && _Old_alloc, _Alloc && _New_alloc ) {

        _Container_proxy * const _New_proxy = _Unfancy ( _New_alloc . allocate ( 1 ) );
        _Construct_in_place ( * _New_proxy, this );
        _New_proxy -> _Mycont = this;
        _Delete_plain_internal ( _Old_alloc, :: std :: exchange ( _Myproxy, _New_proxy ) );
    }
#line 1227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_proxy *_Myproxy = (nullptr); 
#line 1230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
private: inline void _Orphan_all_unlocked_v3() noexcept; 
#line 1231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void _Swap_proxy_and_iterators_unlocked(_Container_base12 &) noexcept; 
#line 1233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Orphan_all_locked_v3() noexcept { 
#line 1234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Lockit _Lock(3); 
#line 1235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
this->_Orphan_all_unlocked_v3(); 
#line 1236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Swap_proxy_and_iterators_locked(_Container_base12 &_Right) noexcept { 
#line 1239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Lockit _Lock(3); 
#line 1240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
this->_Swap_proxy_and_iterators_unlocked(_Right); 
#line 1241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Iterator_base12 { 
#line 1246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Iterator_base12() noexcept = default;
#line 1248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Iterator_base12(const _Iterator_base12 &_Right) noexcept { 
#line 1249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
((*this) = _Right); 
#line 1250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Iterator_base12 &operator=(const _Iterator_base12 &_Right) noexcept { 
#line 1263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
(_Myproxy) = (_Right._Myproxy); 
#line 1265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return *this; 
#line 1266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Adopt(const _Container_base12 *_Parent) noexcept { 
#line 1292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
if (_Parent) { 
#line 1293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
(_Myproxy) = (_Parent->_Myproxy); 
#line 1294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} else { 
#line 1295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
(_Myproxy) = (nullptr); 
#line 1296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}  
#line 1297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
const _Container_base12 *_Getcont() const noexcept { 
#line 1301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return (_Myproxy) ? (_Myproxy)->_Mycont : (nullptr); 
#line 1302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
static constexpr bool _Unwrap_when_unverified = (0 == 0); 
#line 1306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
mutable _Container_proxy *_Myproxy = (nullptr); 
#line 1307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
mutable _Iterator_base12 *_Mynextiter = (nullptr); 
#line 1371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void _Container_base12::_Orphan_all_unlocked_v3() noexcept { 
#line 1374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
if (!(_Myproxy)) { 
#line 1375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return; 
#line 1376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}  
#line 1379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
for (auto _Pnext = ::std::exchange((_Myproxy)->_Myfirstiter, nullptr); _Pnext; _Pnext = (_Pnext->_Mynextiter)) { 
#line 1380 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
(_Pnext->_Myproxy) = (nullptr); 
#line 1381 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}  
#line 1382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1384 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void _Container_base12::_Orphan_all() noexcept { 
#line 1395 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void _Container_base12::_Swap_proxy_and_iterators_unlocked(_Container_base12 &_Right) noexcept { 
#line 1398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_proxy *_Temp = _Myproxy; 
#line 1399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
(_Myproxy) = (_Right._Myproxy); 
#line 1400 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
(_Right._Myproxy) = _Temp; 
#line 1402 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
if (_Myproxy) { 
#line 1403 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
((_Myproxy)->_Mycont) = this; 
#line 1404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}  
#line 1406 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
if (_Right._Myproxy) { 
#line 1407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
((_Right._Myproxy)->_Mycont) = (&_Right); 
#line 1408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}  
#line 1409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12 &_Right) noexcept { 
#line 1422 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
this->_Swap_proxy_and_iterators_unlocked(_Right); 
#line 1424 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1427 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using _Container_base = _Container_base0; 
#line 1428 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
using _Iterator_base = _Iterator_base0; 
#line 1434 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Leave_proxy_unbound { 
#line 1435 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
explicit _Leave_proxy_unbound() = default;
#line 1436 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Fake_proxy_ptr_impl { 
#line 1439 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Fake_proxy_ptr_impl(const _Fake_proxy_ptr_impl &) = delete;
#line 1440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Fake_proxy_ptr_impl &operator=(const _Fake_proxy_ptr_impl &) = delete;
#line 1441 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Fake_proxy_ptr_impl(const _Fake_allocator &, _Leave_proxy_unbound) noexcept { } 
#line 1442 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Fake_proxy_ptr_impl(const _Fake_allocator &, const _Container_base0 &) noexcept { } 
#line 1444 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Bind(const _Fake_allocator &, _Container_base0 *) noexcept { } 
#line 1445 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
void _Release() noexcept { } 
#line 1446 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1448 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Basic_container_proxy_ptr12 { 
#line 1450 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Container_proxy *_Ptr = (nullptr); 
#line 1452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr void _Release() noexcept { 
#line 1453 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
(_Ptr) = (nullptr); 
#line 1454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 1457 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
protected: _Basic_container_proxy_ptr12() = default;
#line 1458 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Basic_container_proxy_ptr12(const _Basic_container_proxy_ptr12 &) = delete;
#line 1459 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Basic_container_proxy_ptr12(_Basic_container_proxy_ptr12 &&) = delete;
#line 1460 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
struct _Container_proxy_ptr12 : _Basic_container_proxy_ptr12 {

    _Alloc & _Al;

    inline _Container_proxy_ptr12 ( _Alloc & _Al_, _Leave_proxy_unbound ) : _Al ( _Al_ ) {

        _Ptr = _Unfancy ( _Al_ . allocate ( 1 ) );
        _Construct_in_place ( * _Ptr );
    }

    inline _Container_proxy_ptr12 ( _Alloc & _Al_, _Container_base12 & _Mycont ) : _Al ( _Al_ ) {

        _Ptr = _Unfancy ( _Al_ . allocate ( 1 ) );
        _Construct_in_place ( * _Ptr, :: std :: addressof ( _Mycont ) );
        _Mycont . _Myproxy = _Ptr;
    }

    inline void _Bind ( _Alloc & _Old_alloc, _Container_base12 * _Mycont ) noexcept {


        _Ptr -> _Mycont = _Mycont;
        _Delete_plain_internal ( _Old_alloc, :: std :: exchange ( _Mycont -> _Myproxy, :: std :: exchange ( _Ptr, nullptr ) ) );
    }

    inline ~ _Container_proxy_ptr12 ( ) {
        if ( _Ptr ) {
            _Delete_plain_internal ( _Al, _Ptr );
        }
    }
};
#line 1495 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
constexpr _Fake_allocator _Fake_alloc{}; 
#line 1497 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Alloc> using _Container_proxy_ptr = _Fake_proxy_ptr_impl; 
#line 1505 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Zero_then_variadic_args_t { 
#line 1506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
explicit _Zero_then_variadic_args_t() = default;
#line 1507 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1509 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _One_then_variadic_args_t { 
#line 1510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
explicit _One_then_variadic_args_t() = default;
#line 1511 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1513 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty1, class _Ty2, bool = is_empty_v < _Ty1 > && ! is_final_v < _Ty1 > >
class _Compressed_pair final : private _Ty1 {
public :
    _Ty2 _Myval2;

    using _Mybase = _Ty1;

    template < class ... _Other2 >
    constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_default_constructible < _Ty1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Ty1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    template < class _Other1, class ... _Other2 >
    constexpr _Compressed_pair ( _One_then_variadic_args_t, _Other1 && _Val1, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_constructible < _Ty1, _Other1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Ty1 ( :: std :: forward < _Other1 > ( _Val1 ) ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    constexpr _Ty1 & _Get_first ( ) noexcept {
        return * this;
    }

    constexpr const _Ty1 & _Get_first ( ) const noexcept {
        return * this;
    }
};
#line 1539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty1, class _Ty2 >
class _Compressed_pair < _Ty1, _Ty2, false > final {
public :
    _Ty1 _Myval1;
    _Ty2 _Myval2;

    template < class ... _Other2 >
    constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_default_constructible < _Ty1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Myval1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    template < class _Other1, class ... _Other2 >
    constexpr _Compressed_pair ( _One_then_variadic_args_t, _Other1 && _Val1, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_constructible < _Ty1, _Other1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Myval1 ( :: std :: forward < _Other1 > ( _Val1 ) ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    constexpr _Ty1 & _Get_first ( ) noexcept {
        return _Myval1;
    }

    constexpr const _Ty1 & _Get_first ( ) const noexcept {
        return _Myval1;
    }
};
#line 1564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Move_allocator_tag { 
#line 1565 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
explicit _Move_allocator_tag() = default;
#line 1566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 1568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
pair < _Ty *, ptrdiff_t > _Get_temporary_buffer ( ptrdiff_t _Count ) noexcept {
    if ( static_cast < size_t > ( _Count ) <= static_cast < size_t > ( - 1 ) / sizeof ( _Ty ) ) {
        for (; 0 < _Count; _Count /= 2 ) {
            const auto _Size = static_cast < size_t > ( _Count ) * sizeof ( _Ty );
            void * _Pbuf;





            {
                _Pbuf = :: operator new ( _Size, nothrow );
            }

            if ( _Pbuf ) {
                return { static_cast < _Ty * > ( _Pbuf ), _Count };
            }
        }
    }

    return { nullptr, 0 };
}
#line 1592 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
void _Return_temporary_buffer ( _Ty * const _Pbuf ) noexcept {





    {
        :: operator delete ( _Pbuf );
    }
}
#line 1604 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _NoThrowFwdIt >
struct [ [ nodiscard ] ] _Uninitialized_backout {

    _NoThrowFwdIt _First;
    _NoThrowFwdIt _Last;

    constexpr explicit _Uninitialized_backout ( _NoThrowFwdIt _Dest ) : _First ( _Dest ), _Last ( _Dest ) { }

    constexpr _Uninitialized_backout ( _NoThrowFwdIt _First_, _NoThrowFwdIt _Last_ ) : _First ( _First_ ), _Last ( _Last_ ) { }

    _Uninitialized_backout ( const _Uninitialized_backout & ) = delete;
    _Uninitialized_backout & operator = ( const _Uninitialized_backout & ) = delete;

    inline ~ _Uninitialized_backout ( ) {
        _Destroy_range ( _First, _Last );
    }

    template < class ... _Types >
    inline void _Emplace_back ( _Types && ... _Vals ) {

        _Construct_in_place ( * _Last, :: std :: forward < _Types > ( _Vals ) ... );
        ++ _Last;
    }

    constexpr _NoThrowFwdIt _Release ( ) {
        _First = _Last;
        return _Last;
    }
};
#line 1634 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _InIt, class _NoThrowFwdIt >
inline _NoThrowFwdIt _Uninitialized_move_unchecked ( _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    if constexpr ( _Iter_move_cat < _InIt, _NoThrowFwdIt > :: _Bitcopy_constructible ) {



        {
            return _Copy_memmove ( _First, _Last, _Dest );
        }
    }
    _Uninitialized_backout < _NoThrowFwdIt > _Backout { _Dest };
    for (; _First != _Last; ++ _First ) {
        _Backout . _Emplace_back ( :: std :: move ( * _First ) );
    }

    return _Backout . _Release ( );
}
#line 1787 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
class [ [ nodiscard ] ] _Uninitialized_backout_al {

private :
    using pointer = _Alloc_ptr_t < _Alloc >;

public :
    inline _Uninitialized_backout_al ( pointer _Dest, _Alloc & _Al_ ) : _First ( _Dest ), _Last ( _Dest ), _Al ( _Al_ ) { }

    _Uninitialized_backout_al ( const _Uninitialized_backout_al & ) = delete;
    _Uninitialized_backout_al & operator = ( const _Uninitialized_backout_al & ) = delete;

    inline ~ _Uninitialized_backout_al ( ) {
        _Destroy_range ( _First, _Last, _Al );
    }

    template < class ... _Types >
    inline void _Emplace_back ( _Types && ... _Vals ) {
        allocator_traits < _Alloc > :: construct ( _Al, _Unfancy ( _Last ), :: std :: forward < _Types > ( _Vals ) ... );
        ++ _Last;
    }

    constexpr pointer _Release ( ) {
        _First = _Last;
        return _Last;
    }

private :
    pointer _First;
    pointer _Last;
    _Alloc & _Al;
};
#line 1820 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _InIt, class _Se, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_copy (
    _InIt _First, _Se _Last, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;







    auto _UFirst = _Get_unwrapped ( :: std :: move ( _First ) );
    auto _ULast = _Get_unwrapped ( :: std :: move ( _Last ) );


    constexpr bool _Can_memmove = _Sent_copy_cat < decltype ( _UFirst ), decltype ( _ULast ), _Ptrval > :: _Bitcopy_constructible
                               && _Uses_default_construct < _Alloc, _Ptrval, decltype ( * _UFirst ) > :: value;

    if constexpr ( _Can_memmove ) {



        {
            if constexpr ( is_same_v < decltype ( _UFirst ), decltype ( _ULast ) > ) {
                _Copy_memmove ( _To_address ( _UFirst ), _To_address ( _ULast ), _Unfancy ( _Dest ) );
                _Dest += _ULast - _UFirst;
            } else {
                const auto _Count = static_cast < size_t > ( _ULast - _UFirst );
                _Copy_memmove_n ( _To_address ( _UFirst ), _Count, _Unfancy ( _Dest ) );
                _Dest += _Count;
            }
            return _Dest;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _UFirst != _ULast; ++ _UFirst ) {
        _Backout . _Emplace_back ( * _UFirst );
    }

    return _Backout . _Release ( );
}
#line 1865 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _InIt, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_copy_n (
    _InIt _First, size_t _Count, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;

    auto _UFirst = _Get_unwrapped ( :: std :: move ( _First ) );

    constexpr bool _Can_memmove =
        conjunction_v < bool_constant < _Iter_copy_cat < decltype ( _UFirst ), _Ptrval > :: _Bitcopy_constructible >,
            _Uses_default_construct < _Alloc, _Ptrval, decltype ( * _UFirst ) >>;

    if constexpr ( _Can_memmove ) {



        {
            _Copy_memmove_n ( _UFirst, _Count, _Unfancy ( _Dest ) );
            _Dest += _Count;
            return _Dest;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _Count != 0; ++ _UFirst, ( void ) -- _Count ) {
        _Backout . _Emplace_back ( * _UFirst );
    }

    return _Backout . _Release ( );
}
#line 1897 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _InIt, class _NoThrowFwdIt >
inline _NoThrowFwdIt _Uninitialized_copy_unchecked ( _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    if constexpr ( _Iter_copy_cat < _InIt, _NoThrowFwdIt > :: _Bitcopy_constructible ) {



        {
            return _Copy_memmove ( _First, _Last, _Dest );
        }
    }

    _Uninitialized_backout < _NoThrowFwdIt > _Backout { _Dest };
    for (; _First != _Last; ++ _First ) {
        _Backout . _Emplace_back ( * _First );
    }

    return _Backout . _Release ( );
}
#line 1917 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _InIt, class _NoThrowFwdIt >
_NoThrowFwdIt uninitialized_copy ( const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Uninitialized_copy_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 1928 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _InIt, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_move (
    const _InIt _First, const _InIt _Last, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    if constexpr ( conjunction_v < bool_constant < _Iter_move_cat < decltype ( _UFirst ), _Ptrval > :: _Bitcopy_constructible >,
                      _Uses_default_construct < _Alloc, _Ptrval, decltype ( :: std :: move ( * _UFirst ) ) >> ) {



        {
            _Copy_memmove ( _UFirst, _ULast, _Unfancy ( _Dest ) );
            return _Dest + ( _ULast - _UFirst );
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _UFirst != _ULast; ++ _UFirst ) {
        _Backout . _Emplace_back ( :: std :: move ( * _UFirst ) );
    }

    return _Backout . _Release ( );
}
#line 1955 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_fill_n (
    _Alloc_ptr_t < _Alloc > _First, _Alloc_size_t < _Alloc > _Count, const typename _Alloc :: value_type & _Val, _Alloc & _Al ) {

    using _Ty = typename _Alloc :: value_type;
    if constexpr ( _Fill_memset_is_safe < _Ty *, _Ty > && _Uses_default_construct < _Alloc, _Ty *, _Ty > :: value ) {



        {
            _Fill_memset ( _Unfancy ( _First ), _Val, static_cast < size_t > ( _Count ) );
            return _First + _Count;
        }
    } else if constexpr ( _Fill_zero_memset_is_safe < _Ty *, _Ty > && _Uses_default_construct < _Alloc, _Ty *, _Ty > :: value ) {



        {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _Unfancy ( _First ), static_cast < size_t > ( _Count ) );
                return _First + _Count;
            }
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _First, _Al };
    for (; 0 < _Count; -- _Count ) {
        _Backout . _Emplace_back ( _Val );
    }

    return _Backout . _Release ( );
}
#line 1988 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _NoThrowFwdIt, class _Tval >
void uninitialized_fill ( const _NoThrowFwdIt _First, const _NoThrowFwdIt _Last, const _Tval & _Val ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    if constexpr ( _Fill_memset_is_safe < _Unwrapped_t < const _NoThrowFwdIt & >, _Tval > ) {
        _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _ULast - _UFirst ) );
    } else {
        if constexpr ( _Fill_zero_memset_is_safe < _Unwrapped_t < const _NoThrowFwdIt & >, _Tval > ) {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _ULast - _UFirst ) );
                return;
            }
        }

        _Uninitialized_backout < _Unwrapped_t < const _NoThrowFwdIt & >> _Backout { _UFirst };
        while ( _Backout . _Last != _ULast ) {
            _Backout . _Emplace_back ( _Val );
        }

        _Backout . _Release ( );
    }
}
#line 2013 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _NoThrowFwdIt> constexpr bool 
#line 2014 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Use_memset_value_construct_v = conjunction_v< bool_constant< _Iterator_is_contiguous< _NoThrowFwdIt> > , is_scalar< _Iter_value_t< _NoThrowFwdIt> > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _NoThrowFwdIt> > > > , negation< is_member_pointer< _Iter_value_t< _NoThrowFwdIt> > > > ; 
#line 2019 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ptr >
_Ptr _Zero_range ( const _Ptr _First, const _Ptr _Last ) {
    char * const _First_ch = reinterpret_cast < char * > ( _To_address ( _First ) );
    char * const _Last_ch = reinterpret_cast < char * > ( _To_address ( _Last ) );
    :: memset ( _First_ch, 0, static_cast < size_t > ( _Last_ch - _First_ch ) );
    return _Last;
}
#line 2027 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_value_construct_n (
    _Alloc_ptr_t < _Alloc > _First, _Alloc_size_t < _Alloc > _Count, _Alloc & _Al ) {

    using _Ptrty = typename _Alloc :: value_type *;
    if constexpr ( _Use_memset_value_construct_v < _Ptrty > && _Uses_default_construct < _Alloc, _Ptrty > :: value ) {



        {
            auto _PFirst = _Unfancy ( _First );
            _Zero_range ( _PFirst, _PFirst + _Count );
            return _First + _Count;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _First, _Al };
    for (; 0 < _Count; -- _Count ) {
        _Backout . _Emplace_back ( );
    }

    return _Backout . _Release ( );
}
#line 2051 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _NoThrowFwdIt, class _Diff >
_NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1 ( _NoThrowFwdIt _UFirst, _Diff _Count ) {

    ;
    if constexpr ( _Use_memset_value_construct_v < _NoThrowFwdIt > ) {
        return _Zero_range ( _UFirst, _UFirst + _Count );
    } else {
        _Uninitialized_backout < _NoThrowFwdIt > _Backout { _UFirst };
        for (; 0 < _Count; -- _Count ) {
            _Backout . _Emplace_back ( );
        }

        return _Backout . _Release ( );
    }
}
#line 2068 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
 [ [ nodiscard ] ] pair < _Ty *, ptrdiff_t > get_temporary_buffer ( ptrdiff_t _Count ) noexcept {
    return _Get_temporary_buffer < _Ty > ( _Count );
}
#line 2073 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
 void return_temporary_buffer ( _Ty * _Pbuf ) {
    _Return_temporary_buffer ( _Pbuf );
}
#line 2080 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Key, class ..._Args> 
#line 2081 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _In_place_key_extract_set { 
#line 2083 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
static constexpr bool _Extractable = false; 
#line 2084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 2086 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Key >
struct _In_place_key_extract_set < _Key, _Key > {

    static constexpr bool _Extractable = true;
    static const _Key & _Extract ( const _Key & _Val ) noexcept {
        return _Val;
    }
};
#line 2096 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Key, class ..._Args> 
#line 2097 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _In_place_key_extract_map { 
#line 2099 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
static constexpr bool _Extractable = false; 
#line 2100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#line 2102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Key, class _Second >
struct _In_place_key_extract_map < _Key, _Key, _Second > {

    static constexpr bool _Extractable = true;
    static const _Key & _Extract ( const _Key & _Val, const _Second & ) noexcept {
        return _Val;
    }
};
#line 2111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Key, class _First, class _Second >
struct _In_place_key_extract_map < _Key, pair < _First, _Second > > {

    static constexpr bool _Extractable = is_same_v < _Key, _Remove_cvref_t < _First >>;
    static const _Key & _Extract ( const pair < _First, _Second > & _Val ) {
        return _Val . first;
    }
};
#line 2120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
#pragma warning(push)
#pragma warning(disable : 4624)
template< class _Ty> 
#line 2123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Wrap { 
#line 2124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Ty _Value; 
#line 2125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}; 
#pragma warning(pop)
#line 2128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
struct _Alloc_temporary2 {
    using value_type = typename _Alloc :: value_type;
    using _Traits = allocator_traits < _Alloc >;

    _Alloc & _Al;














    union {
        value_type _Value;
    };

    [ [ nodiscard ] ] inline value_type & _Get_value ( ) noexcept {
        return _Value;
    }

    [ [ nodiscard ] ] inline const value_type & _Get_value ( ) const noexcept {
        return _Value;
    }


    template < class ... _Args >
    inline explicit _Alloc_temporary2 ( _Alloc & _Al_, _Args && ... _Vals ) noexcept (
        noexcept ( _Traits :: construct ( _Al_, :: std :: addressof ( _Get_value ( ) ), :: std :: forward < _Args > ( _Vals ) ... ) ) )
        : _Al ( _Al_ ) {
        _Traits :: construct ( _Al, :: std :: addressof ( _Get_value ( ) ), :: std :: forward < _Args > ( _Vals ) ... );
    }

    _Alloc_temporary2 ( const _Alloc_temporary2 & ) = delete;
    _Alloc_temporary2 & operator = ( const _Alloc_temporary2 & ) = delete;

    inline ~ _Alloc_temporary2 ( ) {
        _Traits :: destroy ( _Al, :: std :: addressof ( _Get_value ( ) ) );
    }
};
#line 2176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
[ [ nodiscard ] ] constexpr bool _Allocators_equal ( const _Alloc & _Lhs, const _Alloc & _Rhs ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: is_always_equal :: value ) {
        return true;
    } else {
        return _Lhs == _Rhs;
    }
}
#line 2200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Alloc >
[ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] inline typename allocator_traits < _Alloc > :: pointer _Allocate_at_least_helper (
    _Alloc & _Al, typename allocator_traits < _Alloc > :: size_type & _Count ) {







    {
        return _Al . allocate ( _Count );
    }
}
#line 2215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _FwdIt, class _Ty >
[ [ nodiscard ( "The \'remove\' and \'remove_if\' algorithms return the iterator past the last element that should be kept. You need to call cont" "ainer.erase(result, container.end()) afterwards. In C++20, \'std::erase\' and \'std::erase_if\' are simpler replacements for the" "se two steps." ) ] ] inline _FwdIt remove ( _FwdIt _First, const _FwdIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    _UFirst = :: std :: _Find_unchecked ( _UFirst, _ULast, _Val );
    auto _UNext = _UFirst;
    if ( _UFirst != _ULast ) {
        while ( ++ _UFirst != _ULast ) {
            if ( ! ( * _UFirst == _Val ) ) {
                * _UNext = :: std :: move ( * _UFirst );
                ++ _UNext;
            }
        }
    }

    _Seek_wrapped ( _First, _UNext );
    return _First;
}
#line 2236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _FwdIt, class _Pr >
[ [ nodiscard ( "The \'remove\' and \'remove_if\' algorithms return the iterator past the last element that should be kept. You need to call cont" "ainer.erase(result, container.end()) afterwards. In C++20, \'std::erase\' and \'std::erase_if\' are simpler replacements for the" "se two steps." ) ] ] inline _FwdIt remove_if ( _FwdIt _First, const _FwdIt _Last, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    _UFirst = :: std :: find_if ( _UFirst, _ULast, _Pass_fn ( _Pred ) );
    auto _UNext = _UFirst;
    if ( _UFirst != _ULast ) {
        while ( ++ _UFirst != _ULast ) {
            if ( ! _Pred ( * _UFirst ) ) {
                * _UNext = :: std :: move ( * _UFirst );
                ++ _UNext;
            }
        }
    }

    _Seek_wrapped ( _First, _UNext );
    return _First;
}
#line 2257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Container, class _Uty >
inline typename _Container :: size_type _Erase_remove ( _Container & _Cont, const _Uty & _Val ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    _Seek_wrapped ( _First, :: std :: remove ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Val ) );
    _Cont . erase ( _First, _Last );
    return _Old_size - _Cont . size ( );
}
#line 2268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Container, class _Pr >
inline typename _Container :: size_type _Erase_remove_if ( _Container & _Cont, _Pr _Pred ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    _Seek_wrapped ( _First, :: std :: remove_if ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pred ) );
    _Cont . erase ( _First, _Last );
    return _Old_size - _Cont . size ( );
}
#line 2279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Container, class _Pr >
typename _Container :: size_type _Erase_nodes_if ( _Container & _Cont, _Pr _Pred ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    while ( _First != _Last ) {
        if ( _Pred ( * _First ) ) {
            _First = _Cont . erase ( _First );
        } else {
            ++ _First;
        }
    }
    return _Old_size - _Cont . size ( );
}
#line 2295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty1, class _Ty2> void _Deduce_as_pair(const pair< _Ty1, _Ty2>  &); 
#line 2298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> constexpr bool 
#line 2299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Is_deducible_as_pair = false; 
#line 2301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> constexpr bool 
#line 2302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Is_deducible_as_pair< _Ty, decltype(std::_Deduce_as_pair(std::declval< _Ty> ()))>  = true; 
#line 2304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> constexpr bool 
#line 2305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Is_cv_pair = _Is_specialization_v< remove_cv_t< _Ty> , pair> ; 
#line 2307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> const _Ty &_Normally_bind(_Identity_t< const _Ty &> ); 
#line 2310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> _Ty &&_Normally_bind(_Identity_t< _Ty &&> ); 
#line 2313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class _Uty> using _Normally_bound_ref = decltype(std::_Normally_bind< _Ty> (std::declval< _Uty> ())); 
#line 2316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class _Uty, class  = void> constexpr bool 
#line 2317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Is_normally_bindable = false; 
#line 2319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class _Uty> constexpr bool 
#line 2320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Is_normally_bindable< _Ty, _Uty, void_t< _Normally_bound_ref< _Ty, _Uty> > >  = true; 
#line 2548 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty,
    bool = is_empty_v < _Ty > && ! is_final_v < _Ty > >
class _Ebco_base : private _Ty {
private :
    using _Mybase = _Ty;

protected :
    template < class _Other, enable_if_t < ! is_same_v < _Remove_cvref_t < _Other >, _Ebco_base >, int > = 0 >
    constexpr explicit _Ebco_base ( _Other && _Val ) noexcept ( is_nothrow_constructible_v < _Ty, _Other > )
        : _Ty ( :: std :: forward < _Other > ( _Val ) ) { }

    constexpr _Ty & _Get_val ( ) noexcept {
        return * this;
    }

    constexpr const _Ty & _Get_val ( ) const noexcept {
        return * this;
    }
};
#line 2568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template < class _Ty >
class _Ebco_base < _Ty, false > {
private :
    _Ty _Myval;

protected :
    template < class _Other, enable_if_t < ! is_same_v < _Remove_cvref_t < _Other >, _Ebco_base >, int > = 0 >
    constexpr explicit _Ebco_base ( _Other && _Val ) noexcept ( is_nothrow_constructible_v < _Ty, _Other > )
        : _Myval ( :: std :: forward < _Other > ( _Val ) ) { }

    constexpr _Ty & _Get_val ( ) noexcept {
        return _Myval;
    }

    constexpr const _Ty & _Get_val ( ) const noexcept {
        return _Myval;
    }
};
#line 2587 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
inline void *align(size_t _Bound, size_t _Size, void *&_Ptr, size_t &_Space) noexcept { 
#line 2589 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
size_t _Off = static_cast< size_t>((reinterpret_cast< uintptr_t>(_Ptr)) & (_Bound - (1))); 
#line 2590 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
if (_Off != (0)) { 
#line 2591 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Off = (_Bound - _Off); 
#line 2592 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}  
#line 2594 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
if ((_Space < _Off) || ((_Space - _Off) < _Size)) { 
#line 2595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return nullptr; 
#line 2596 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}  
#line 2599 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Ptr = ((static_cast< char *>(_Ptr)) + _Off); 
#line 2600 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Space -= _Off; 
#line 2601 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
return _Ptr; 
#line 2602 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
} 
#line 2604 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty, class  = void> constexpr bool 
#line 2605 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Is_transparent_v = false; 
#line 2607 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> constexpr bool 
#line 2608 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
_Is_transparent_v< _Ty, void_t< typename _Ty::is_transparent> >  = true; 
#line 2610 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
template< class _Ty> 
#line 2611 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
struct _Is_transparent : public bool_constant< _Is_transparent_v< _Ty, void> >  { }; 
#line 2617 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
}
#line 2621 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xmemory"
#pragma warning(pop)
#pragma pack ( pop )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
namespace std { 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Int_type >
struct _Char_traits {
    using char_type = _Elem;
    using int_type = _Int_type;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = _Mbstatet;






    static inline _Elem * copy ( _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {















        :: memcpy ( _First1, _First2, _Count * sizeof ( _Elem ) );


        return _First1;
    }

      static inline _Elem * _Copy_s (
                                                                                 _Elem * const _First1,
        const size_t _Dest_size, const _Elem * const _First2, const size_t _Count ) noexcept {

        do { if ( _Count <= _Dest_size ) { } else { do {; :: _invalid_parameter_noinfo_noreturn ( ); } while ( false ); }; } while ( false );
        return copy ( _First1, _First2, _Count );
    }

    static inline _Elem * move ( _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {





































        :: memmove ( _First1, _First2, _Count * sizeof ( _Elem ) );


        return _First1;
    }




    [ [ nodiscard ] ] static inline int compare ( const _Elem * _First1,
          const _Elem * _First2, size_t _Count ) noexcept {

        for (; 0 < _Count; -- _Count, ++ _First1, ++ _First2 ) {
            if ( * _First1 != * _First2 ) {
                return * _First1 < * _First2 ? - 1 : + 1;
            }
        }

        return 0;
    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * _First ) noexcept {

        size_t _Count = 0;
        while ( * _First != _Elem ( ) ) {
            ++ _Count;
            ++ _First;
        }

        return _Count;
    }

    [ [ nodiscard ] ] static inline const _Elem * find (
          const _Elem * _First, size_t _Count, const _Elem & _Ch ) noexcept {

        for (; 0 < _Count; -- _Count, ++ _First ) {
            if ( * _First == _Ch ) {
                return _First;
            }
        }

        return nullptr;
    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {








        {
            for ( _Elem * _Next = _First; _Count > 0; -- _Count, ++ _Next ) {
                * _Next = _Ch;
            }
        }

        return _First;
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        {
            _Left = _Right;
        }
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left < _Right;
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type _Meta ) noexcept {
        return static_cast < _Elem > ( _Meta );
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem _Ch ) noexcept {
        return static_cast < int_type > ( _Ch );
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type _Left, const int_type _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : ! eof ( );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return static_cast < int_type > ( ( - 1 ) );
    }
};
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem >
struct _WChar_traits : private _Char_traits < _Elem, unsigned short > {

private :
    using _Primary_char_traits = _Char_traits < _Elem, unsigned short >;

public :
    using char_type = _Elem;
    using int_type = unsigned short;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = mbstate_t;




    using _Primary_char_traits :: _Copy_s;
    using _Primary_char_traits :: copy;
    using _Primary_char_traits :: move;

    [ [ nodiscard ] ] static inline int compare ( const _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {








        return :: wmemcmp (
            reinterpret_cast < const wchar_t * > ( _First1 ), reinterpret_cast < const wchar_t * > ( _First2 ), _Count );

    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * _First ) noexcept {








        return :: wcslen ( reinterpret_cast < const wchar_t * > ( _First ) );

    }

    [ [ nodiscard ] ] static inline const _Elem * find (
          const _Elem * _First, const size_t _Count, const _Elem & _Ch ) noexcept {








        return reinterpret_cast < const _Elem * > ( :: wmemchr ( reinterpret_cast < const wchar_t * > ( _First ), _Ch, _Count ) );

    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {







        return reinterpret_cast < _Elem * > ( :: wmemset ( reinterpret_cast < wchar_t * > ( _First ), _Ch, _Count ) );
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        _Left = _Right;
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left < _Right;
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type _Meta ) noexcept {
        return _Meta;
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem _Ch ) noexcept {
        return _Ch;
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type _Left, const int_type _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : static_cast < int_type > ( ! eof ( ) );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return ( ( wint_t ) ( 65535 ) );
    }
};
#line 332 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template< class _Elem> 
#line 333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
struct char_traits : public _Char_traits< _Elem, long>  { }; 
#line 336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template<> struct char_traits< char16_t>  : public _WChar_traits< char16_t>  { }; 
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template<> struct char_traits< char32_t>  : public _Char_traits< char32_t, unsigned>  { }; 
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template<> struct char_traits< __wchar_t>  : public _WChar_traits< __wchar_t>  { }; 
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Int_type >
struct _Narrow_char_traits : private _Char_traits < _Elem, _Int_type > {

private :
    using _Primary_char_traits = _Char_traits < _Elem, _Int_type >;

public :
    using char_type = _Elem;
    using int_type = _Int_type;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = mbstate_t;




    using _Primary_char_traits :: _Copy_s;
    using _Primary_char_traits :: copy;
    using _Primary_char_traits :: move;

    [ [ nodiscard ] ] static inline int compare ( const _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {




        return :: memcmp ( _First1, _First2, _Count );

    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * const _First ) noexcept {















        return :: strlen ( reinterpret_cast < const char * > ( _First ) );

    }

    [ [ nodiscard ] ] static inline const _Elem * find ( const _Elem * const _First, const size_t _Count,
        const _Elem & _Ch ) noexcept {















        return static_cast < const _Elem * > ( :: memchr ( _First, _Ch, _Count ) );

    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {







        return static_cast < _Elem * > ( :: memset ( _First, _Ch, _Count ) );
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        _Left = _Right;
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem _Left, const _Elem _Right ) noexcept {
        return static_cast < unsigned char > ( _Left ) < static_cast < unsigned char > ( _Right );
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type _Meta ) noexcept {
        return static_cast < _Elem > ( _Meta );
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem _Ch ) noexcept {
        return static_cast < unsigned char > ( _Ch );
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type _Left, const int_type _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : ! eof ( );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return static_cast < int_type > ( ( - 1 ) );
    }
};
#line 480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template<> struct char_traits< char>  : public _Narrow_char_traits< char, int>  { }; 
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _SizeT >
basic_ostream < _Elem, _Traits > & _Insert_string (
    basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * const _Data, const _SizeT _Size ) {

    using _Ostr_t = basic_ostream < _Elem, _Traits >;
    typename _Ostr_t :: iostate _State = _Ostr_t :: goodbit;

    _SizeT _Pad;
    if ( _Ostr . width ( ) <= 0 || static_cast < _SizeT > ( _Ostr . width ( ) ) <= _Size ) {
        _Pad = 0;
    } else {
        _Pad = static_cast < _SizeT > ( _Ostr . width ( ) ) - _Size;
    }

    const typename _Ostr_t :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= _Ostr_t :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & _Ostr_t :: adjustfield ) != _Ostr_t :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= _Ostr_t :: badbit;
                    break;
                }
            }
        }

        if ( _State == _Ostr_t :: goodbit
            && _Ostr . rdbuf ( ) -> sputn ( _Data, static_cast < streamsize > ( _Size ) ) != static_cast < streamsize > ( _Size ) ) {
            _State |= _Ostr_t :: badbit;
        } else {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= _Ostr_t :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( _Ostr_t :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 536 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template< class _Traits> using _Traits_ch_t = typename _Traits::char_type; 
#line 539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template< class _Traits> using _Traits_ptr_t = const typename _Traits::char_type *; 
#line 542 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits >
constexpr bool _Traits_equal ( const _Traits_ptr_t < _Traits > _Left, const size_t _Left_size,
      const _Traits_ptr_t < _Traits > _Right, const size_t _Right_size ) noexcept {

    return _Left_size == _Right_size && _Traits :: compare ( _Left, _Right, _Left_size ) == 0;
}
#line 549 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits >
constexpr int _Traits_compare ( const _Traits_ptr_t < _Traits > _Left, const size_t _Left_size,
      const _Traits_ptr_t < _Traits > _Right, const size_t _Right_size ) noexcept {

    const int _Ans = _Traits :: compare ( _Left, _Right, ( :: std :: min ) ( _Left_size, _Right_size ) );

    if ( _Ans != 0 ) {
        return _Ans;
    }

    if ( _Left_size < _Right_size ) {
        return - 1;
    }

    if ( _Left_size > _Right_size ) {
        return 1;
    }

    return 0;
}
#line 570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits >
constexpr size_t _Traits_find ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size ) {








        return static_cast < size_t > ( - 1 );
    }

    if ( _Needle_size == 0 ) {
        return _Start_at;
    }

    const auto _Possible_matches_end = _Haystack + ( _Hay_size - _Needle_size ) + 1;
    for ( auto _Match_try = _Haystack + _Start_at;; ++ _Match_try ) {
        _Match_try = _Traits :: find ( _Match_try, static_cast < size_t > ( _Possible_matches_end - _Match_try ), * _Needle );
        if ( ! _Match_try ) {
            return static_cast < size_t > ( - 1 );
        }

        if ( _Traits :: compare ( _Match_try, _Needle, _Needle_size ) == 0 ) {
            return static_cast < size_t > ( _Match_try - _Haystack );
        }
    }
}
#line 604 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits >
constexpr size_t _Traits_find_ch ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Start_at < _Hay_size ) {
        const auto _Found_at = _Traits :: find ( _Haystack + _Start_at, _Hay_size - _Start_at, _Ch );
        if ( _Found_at ) {
            return static_cast < size_t > ( _Found_at - _Haystack );
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 618 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits >
constexpr size_t _Traits_rfind ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size == 0 ) {
        return ( :: std :: min ) ( _Start_at, _Hay_size );
    }

    if ( _Needle_size <= _Hay_size ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - _Needle_size );; -- _Match_try ) {
            if ( _Traits :: eq ( * _Match_try, * _Needle ) && _Traits :: compare ( _Match_try, _Needle, _Needle_size ) == 0 ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 642 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits >
constexpr size_t _Traits_rfind_ch ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Hay_size != 0 ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
            if ( _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 661 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, bool = _Is_character < _Elem > :: value >
class _String_bitmap {
public :
    constexpr bool _Mark ( const _Elem * _First, const _Elem * const _Last ) noexcept {


        for (; _First != _Last; ++ _First ) {
            _Matches [ static_cast < unsigned char > ( * _First ) ] = true;
        }

        return true;
    }

    constexpr bool _Match ( const _Elem _Ch ) const noexcept {
        return _Matches [ static_cast < unsigned char > ( _Ch ) ];
    }

private :
    bool _Matches [ 256 ] = { };
};
#line 682 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem >
class _String_bitmap < _Elem, false > {
public :
    static_assert ( is_unsigned_v < _Elem >,
        "Standard char_traits is only provided for char, wchar_t, char16_t, and char32_t. See N4950 [char.traits]. Visual C++ accepts oth" "er unsigned integral types as an extension."
                                                                           );

    constexpr bool _Mark ( const _Elem * _First, const _Elem * const _Last ) noexcept {


        for (; _First != _Last; ++ _First ) {
            const auto _Ch = * _First;
            if ( _Ch >= 256U ) {
                return false;
            }

            _Matches [ static_cast < unsigned char > ( _Ch ) ] = true;
        }

        return true;
    }

    constexpr bool _Match ( const _Elem _Ch ) const noexcept {
        return _Ch < 256U && _Matches [ _Ch ];
    }

private :
    bool _Matches [ 256 ] = { };
};
#line 712 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_first_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size != 0 && _Start_at < _Hay_size ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_first_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        } else {
            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 744 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_last_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size != 0 && _Hay_size != 0 ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_last_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        } else {
            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 782 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_first_not_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Start_at < _Hay_size ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_first_not_of < _Traits, false > (
                    _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( ! _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        } else {
            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( ! _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 815 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits >
constexpr size_t _Traits_find_not_ch ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Start_at < _Hay_size ) {
        const auto _End = _Haystack + _Hay_size;
        for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
            if ( ! _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 831 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_last_not_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Hay_size != 0 ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_last_not_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( ! _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        } else {
            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( ! _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 869 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Traits >
constexpr size_t _Traits_rfind_not_ch ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Hay_size != 0 ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
            if ( ! _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 888 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template< class _Ty> constexpr bool 
#line 889 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
_Is_EcharT = _Is_any_of_v< _Ty, char, __wchar_t, char16_t, char32_t> ; 
#line 1837 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Mystr >
class _String_const_iterator : public _Iterator_base {
public :



    using iterator_category = random_access_iterator_tag;
    using value_type = typename _Mystr :: value_type;
    using difference_type = typename _Mystr :: difference_type;
    using pointer = typename _Mystr :: const_pointer;
    using reference = const value_type &;

    inline _String_const_iterator ( ) noexcept : _Ptr ( ) { }

    inline _String_const_iterator ( pointer _Parg, const _Container_base * _Pstring ) noexcept : _Ptr ( _Parg ) {
        this -> _Adopt ( _Pstring );
    }

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {











        ;
        return * _Ptr;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return pointer_traits < pointer > :: pointer_to ( * * this );
    }

    inline _String_const_iterator & operator ++ ( ) noexcept {








        ++ _Ptr;
        return * this;
    }

    inline _String_const_iterator operator ++ ( int ) noexcept {
        _String_const_iterator _Tmp = * this;
        ++ * this;
        return _Tmp;
    }

    inline _String_const_iterator & operator -- ( ) noexcept {








        -- _Ptr;
        return * this;
    }

    inline _String_const_iterator operator -- ( int ) noexcept {
        _String_const_iterator _Tmp = * this;
        -- * this;
        return _Tmp;
    }

    inline void _Verify_offset ( const difference_type _Off ) const noexcept {






















        ( void ) _Off;

    }

    inline _String_const_iterator & operator += ( const difference_type _Off ) noexcept {



        _Ptr += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline _String_const_iterator operator + ( const difference_type _Off ) const noexcept {
        _String_const_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _String_const_iterator operator + (
        const difference_type _Off, _String_const_iterator _Next ) noexcept {
        _Next += _Off;
        return _Next;
    }

    inline _String_const_iterator & operator -= ( const difference_type _Off ) noexcept {
        return * this += - _Off;
    }

    [ [ nodiscard ] ] inline _String_const_iterator operator - ( const difference_type _Off ) const noexcept {
        _String_const_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline difference_type operator - ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr - _Right . _Ptr;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] inline bool operator == ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr == _Right . _Ptr;
    }







    [ [ nodiscard ] ] bool operator != ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] bool operator < ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr < _Right . _Ptr;
    }

    [ [ nodiscard ] ] bool operator > ( const _String_const_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] bool operator <= ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] bool operator >= ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }


    inline void _Compat ( const _String_const_iterator & _Right ) const noexcept {





        ( void ) _Right;

    }









    using _Prevent_inheriting_unwrap = _String_const_iterator;

    [ [ nodiscard ] ] inline const value_type * _Unwrapped ( ) const noexcept {
        return _Unfancy ( _Ptr );
    }

    inline void _Seek_to ( const value_type * _It ) noexcept {
        _Ptr = _Refancy < pointer > ( const_cast < value_type * > ( _It ) );
    }

    pointer _Ptr;
};
#line 2074 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Mystr >
class _String_iterator : public _String_const_iterator < _Mystr > {
public :
    using _Mybase = _String_const_iterator < _Mystr >;




    using iterator_category = random_access_iterator_tag;
    using value_type = typename _Mystr :: value_type;
    using difference_type = typename _Mystr :: difference_type;
    using pointer = typename _Mystr :: pointer;
    using reference = value_type &;

    using _Mybase :: _Mybase;

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {
        return const_cast < reference > ( _Mybase :: operator * ( ) );
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return pointer_traits < pointer > :: pointer_to ( * * this );
    }

    inline _String_iterator & operator ++ ( ) noexcept {
        _Mybase :: operator ++ ( );
        return * this;
    }

    inline _String_iterator operator ++ ( int ) noexcept {
        _String_iterator _Tmp = * this;
        _Mybase :: operator ++ ( );
        return _Tmp;
    }

    inline _String_iterator & operator -- ( ) noexcept {
        _Mybase :: operator -- ( );
        return * this;
    }

    inline _String_iterator operator -- ( int ) noexcept {
        _String_iterator _Tmp = * this;
        _Mybase :: operator -- ( );
        return _Tmp;
    }

    inline _String_iterator & operator += ( const difference_type _Off ) noexcept {
        _Mybase :: operator += ( _Off );
        return * this;
    }

    [ [ nodiscard ] ] inline _String_iterator operator + ( const difference_type _Off ) const noexcept {
        _String_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _String_iterator operator + (
        const difference_type _Off, _String_iterator _Next ) noexcept {
        _Next += _Off;
        return _Next;
    }

    inline _String_iterator & operator -= ( const difference_type _Off ) noexcept {
        _Mybase :: operator -= ( _Off );
        return * this;
    }

    using _Mybase :: operator -;

    [ [ nodiscard ] ] inline _String_iterator operator - ( const difference_type _Off ) const noexcept {
        _String_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return const_cast < reference > ( _Mybase :: operator [ ] ( _Off ) );
    }

    using _Prevent_inheriting_unwrap = _String_iterator;

    [ [ nodiscard ] ] inline value_type * _Unwrapped ( ) const noexcept {
        return const_cast < value_type * > ( _Unfancy ( this -> _Ptr ) );
    }
};
#line 2192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template< class _Value_type, class _Size_type, class _Difference_type, class _Pointer, class _Const_pointer> 
#line 2193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
struct _String_iter_types { 
#line 2194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using value_type = _Value_type; 
#line 2195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using size_type = _Size_type; 
#line 2196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using difference_type = _Difference_type; 
#line 2197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using pointer = _Pointer; 
#line 2198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using const_pointer = _Const_pointer; 
#line 2199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
}; 
#line 2201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Val_types >
class _String_val : public _Container_base {
public :
    using value_type = typename _Val_types :: value_type;
    using size_type = typename _Val_types :: size_type;
    using difference_type = typename _Val_types :: difference_type;
    using pointer = typename _Val_types :: pointer;
    using const_pointer = typename _Val_types :: const_pointer;
    using reference = value_type &;
    using const_reference = const value_type &;

    inline _String_val ( ) noexcept : _Bx ( ) { }


    static constexpr size_type _BUF_SIZE = 16 / sizeof ( value_type ) < 1 ? 1 : 16 / sizeof ( value_type );

    static constexpr size_type _Alloc_mask = sizeof ( value_type ) <= 1 ? 15
                                           : sizeof ( value_type ) <= 2 ? 7
                                           : sizeof ( value_type ) <= 4 ? 3
                                           : sizeof ( value_type ) <= 8 ? 1
                                                                     : 0;

    static constexpr size_type _Small_string_capacity = _BUF_SIZE - 1;

    [ [ nodiscard ] ] inline value_type * _Myptr ( ) noexcept {
        value_type * _Result = _Bx . _Buf;
        if ( _Large_mode_engaged ( ) ) {
            _Result = _Unfancy ( _Bx . _Ptr );
        }

        return _Result;
    }

    [ [ nodiscard ] ] inline const value_type * _Myptr ( ) const noexcept {
        const value_type * _Result = _Bx . _Buf;
        if ( _Large_mode_engaged ( ) ) {
            _Result = _Unfancy ( _Bx . _Ptr );
        }

        return _Result;
    }

    [ [ nodiscard ] ] inline bool _Large_mode_engaged ( ) const noexcept {
        return _Myres > _Small_string_capacity;
    }

    inline void _Activate_SSO_buffer ( ) noexcept {








    }

    inline void _Check_offset ( const size_type _Off ) const {

        if ( _Mysize < _Off ) {
            _Xran ( );
        }
    }

    inline void _Check_offset_exclusive ( const size_type _Off ) const {

        if ( _Mysize <= _Off ) {
            _Xran ( );
        }
    }

    [ [ noreturn ] ] static void _Xran ( ) {
        _Xout_of_range ( "invalid string position" );
    }

    [ [ nodiscard ] ] inline size_type _Clamp_suffix_size ( const size_type _Off, const size_type _Size ) const noexcept {

        return ( :: std :: min ) ( _Size, _Mysize - _Off );
    }

    union _Bxty {


        inline _Bxty ( ) noexcept : _Buf ( ) { }
        inline ~ _Bxty ( ) noexcept { }

        value_type _Buf [ _BUF_SIZE ];
        pointer _Ptr;
        char _Alias [ _BUF_SIZE ];

        inline void _Switch_to_buf ( ) noexcept {
            :: std :: _Destroy_in_place ( _Ptr );









        }
    };
    _Bxty _Bx;



    size_type _Mysize = 0;
    size_type _Myres = 0;
};
#line 2313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template< class _Ty> constexpr size_t 
#line 2314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
_Size_after_ebco_v = (is_empty_v< _Ty> ) ? 0 : sizeof(_Ty); 
#line 2316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
struct _String_constructor_concat_tag { 
#line 2318 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
explicit _String_constructor_concat_tag() = default;
#line 2319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
}; 
#line 2321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
struct _String_constructor_rvalue_allocator_tag { 
#line 2323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
explicit _String_constructor_rvalue_allocator_tag() = default;
#line 2324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
}; 
#line 2326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
[[noreturn]] inline void _Xlen_string() { 
#line 2327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
_Xlength_error("string too long"); 
#line 2328 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
} 
#line 2336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits = char_traits < _Elem >, class _Alloc = allocator < _Elem > >
class basic_string {
private :
    friend _Tidy_deallocate_guard < basic_string >;
    friend basic_stringbuf < _Elem, _Traits, _Alloc >;

    using _Alty = _Rebind_alloc_t < _Alloc, _Elem >;
    using _Alty_traits = allocator_traits < _Alty >;

    using _Scary_val = _String_val < conditional_t < _Is_simple_alloc_v < _Alty >, _Simple_types < _Elem >,
        _String_iter_types < _Elem, typename _Alty_traits :: size_type, typename _Alty_traits :: difference_type,
            typename _Alty_traits :: pointer, typename _Alty_traits :: const_pointer >> >;

    static_assert ( ! 0 || is_same_v < _Elem, typename _Alloc :: value_type >,
        "basic_string<T, Traits, Allocator> requires that Allocator\'s value_type match T (See N4950 [container.alloc.reqmts]/5) Either f" "ix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this error." );

    static_assert ( is_same_v < _Elem, typename _Traits :: char_type >,
        "N4950 [string.require]/3 requires that the supplied char_traits character type match the string\'s character type."
                                                                       );

    static_assert ( ! is_array_v < _Elem > && is_trivial_v < _Elem > && is_standard_layout_v < _Elem >,
        "The character type of basic_string must be a non-array trivial standard-layout type. See N4950 [strings.general]/1."
                              );

public :
    using traits_type = _Traits;
    using allocator_type = _Alloc;

    using value_type = _Elem;
    using size_type = typename _Alty_traits :: size_type;
    using difference_type = typename _Alty_traits :: difference_type;
    using pointer = typename _Alty_traits :: pointer;
    using const_pointer = typename _Alty_traits :: const_pointer;
    using reference = value_type &;
    using const_reference = const value_type &;

    using iterator = _String_iterator < _Scary_val >;
    using const_iterator = _String_const_iterator < _Scary_val >;

    using reverse_iterator = :: std :: reverse_iterator < iterator >;
    using const_reverse_iterator = :: std :: reverse_iterator < const_iterator >;

private :
    static constexpr size_type _BUF_SIZE = _Scary_val :: _BUF_SIZE;
    static constexpr size_type _Alloc_mask = _Scary_val :: _Alloc_mask;
    static constexpr size_type _Small_string_capacity = _Scary_val :: _Small_string_capacity;


    static constexpr size_type _Least_allocation_size = _Small_string_capacity + 1 + 1;











    static constexpr bool _Can_memcpy_val = _Is_specialization_v < _Traits, char_traits > && is_trivial_v < pointer >;

    static constexpr size_t _Memcpy_val_offset = _Size_after_ebco_v < _Container_base >;
    static constexpr size_t _Memcpy_val_size = sizeof ( _Scary_val ) - _Memcpy_val_offset;

    template < class _Iter >


    using _Is_elem_cptr = bool_constant < _Is_any_of_v < _Iter, const _Elem * const, _Elem * const, const _Elem *, _Elem * >>;




























































































public :
    inline
    basic_string ( ) noexcept ( is_nothrow_default_constructible_v < _Alty > ) : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct_empty ( );
    }

    inline explicit basic_string ( const _Alloc & _Al ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct_empty ( );
    }

    inline basic_string ( const basic_string & _Right )
        : _Mypair ( _One_then_variadic_args_t { }, _Alty_traits :: select_on_container_copy_construction ( _Right . _Getal ( ) ) ) {
        _Construct < _Construct_strategy :: _From_string > ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string ( const basic_string & _Right, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_string > ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string ( const basic_string & _Right, const size_type _Roff, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Construct < _Construct_strategy :: _From_ptr > (
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, npos ) );
    }

    inline basic_string (
        const basic_string & _Right, const size_type _Roff, const size_type _Count, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Construct < _Construct_strategy :: _From_ptr > (
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count ) );
    }














    inline basic_string ( const _Elem * const _Ptr, const size_type _Count )
        : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Count );
    }

    inline basic_string (
          const _Elem * const _Ptr, const size_type _Count, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Count );
    }

    inline basic_string ( const _Elem * const _Ptr ) : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }




    inline basic_string ( const _Elem * const _Ptr, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }





    inline basic_string ( const size_type _Count, const _Elem _Ch )
        : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_char > ( _Ch, _Count );
    }




    inline basic_string ( const size_type _Count, const _Elem _Ch, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_char > ( _Ch, _Count );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        auto _ULast = _Get_unwrapped ( _Last );
        if ( _UFirst == _ULast ) {
            _Construct_empty ( );
        } else {
            if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
                _Construct < _Construct_strategy :: _From_ptr > (
                    _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
            } else if constexpr ( _Is_cpp17_fwd_iter_v < decltype ( _UFirst ) > ) {
                const auto _Length = static_cast < size_t > ( :: std :: distance ( _UFirst, _ULast ) );
                const auto _Count = _Convert_size < size_type > ( _Length );
                _Construct_from_iter ( :: std :: move ( _UFirst ), :: std :: move ( _ULast ), _Count );
            } else {
                _Construct_from_iter ( :: std :: move ( _UFirst ), :: std :: move ( _ULast ) );
            }
        }
    }

private :
    enum class _Allocation_policy { _At_least, _Exactly };

    template < _Allocation_policy _Policy = _Allocation_policy :: _At_least >
    [ [ nodiscard ] ] static inline pointer _Allocate_for_capacity ( _Alty & _Al, size_type & _Capacity ) {
        ;
        ++ _Capacity;

        pointer _Fancy_ptr;
        if constexpr ( _Policy == _Allocation_policy :: _At_least ) {
            _Fancy_ptr = _Allocate_at_least_helper ( _Al, _Capacity );
        } else {
            ;
            _Fancy_ptr = _Al . allocate ( _Capacity );
        }











        -- _Capacity;
        return _Fancy_ptr;
    }

    static inline void _Deallocate_for_capacity (
        _Alty & _Al, const pointer _Old_ptr, const size_type _Capacity ) noexcept {
        ;
        _Al . deallocate ( _Old_ptr, _Capacity + 1 );
    }

    inline void _Construct_empty ( ) {
        auto & _My_data = _Mypair . _Myval2;
        _My_data . _Alloc_proxy ( _Fake_alloc );


        _My_data . _Mysize = 0;
        _My_data . _Myres = _Small_string_capacity;
        _My_data . _Activate_SSO_buffer ( );


        _Traits :: assign ( _My_data . _Bx . _Buf [ 0 ], _Elem ( ) );
    }

    enum class _Construct_strategy : uint8_t { _From_char, _From_ptr, _From_string };

    template < _Construct_strategy _Strat, class _Char_or_ptr >
    inline void _Construct ( const _Char_or_ptr _Arg, const size_type _Count ) {
        auto & _My_data = _Mypair . _Myval2;
        ;

        if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
            ;
        } else {
            ;
        }

        if ( _Count > max_size ( ) ) {
            _Xlen_string ( );
        }

        auto & _Al = _Getal ( );
        auto && _Alproxy = _Fake_alloc;
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        if ( _Count <= _Small_string_capacity ) {
            _My_data . _Mysize = _Count;
            _My_data . _Myres = _Small_string_capacity;

            if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
                _Traits :: assign ( _My_data . _Bx . _Buf, _Count, _Arg );
                _Traits :: assign ( _My_data . _Bx . _Buf [ _Count ], _Elem ( ) );
            } else if constexpr ( _Strat == _Construct_strategy :: _From_ptr ) {
                _Traits :: copy ( _My_data . _Bx . _Buf, _Arg, _Count );
                _Traits :: assign ( _My_data . _Bx . _Buf [ _Count ], _Elem ( ) );
            } else {



                _Traits :: copy ( _My_data . _Bx . _Buf, _Arg, _BUF_SIZE );

            }

            _Proxy . _Release ( );
            return;
        }

        size_type _New_capacity = _Calculate_growth ( _Count, _Small_string_capacity, max_size ( ) );
        const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );
        _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );

        _My_data . _Mysize = _Count;
        _My_data . _Myres = _New_capacity;
        if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
            _Traits :: assign ( _Unfancy ( _New_ptr ), _Count, _Arg );
            _Traits :: assign ( _Unfancy ( _New_ptr ) [ _Count ], _Elem ( ) );
        } else if constexpr ( _Strat == _Construct_strategy :: _From_ptr ) {
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Arg, _Count );
            _Traits :: assign ( _Unfancy ( _New_ptr ) [ _Count ], _Elem ( ) );
        } else {
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Arg, _Count + 1 );
        }

        ;
        _Proxy . _Release ( );
    }

    template < class _Iter, class _Sent, class _Size = nullptr_t >
    inline void _Construct_from_iter ( _Iter _First, const _Sent _Last, _Size _Count = { } ) {







        auto & _My_data = _Mypair . _Myval2;
        auto & _Al = _Getal ( );
        auto && _Alproxy = _Fake_alloc;
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        _My_data . _Mysize = 0;
        _My_data . _Myres = _Small_string_capacity;

        if constexpr ( is_same_v < _Size, size_type > ) {
            if ( _Count > max_size ( ) ) {
                _Xlen_string ( );
            }

            if ( _Count > _Small_string_capacity ) {
                size_type _New_capacity = _Calculate_growth ( _Count );
                const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );
                _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
                _My_data . _Myres = _New_capacity;
            }
        }

        _Tidy_deallocate_guard < basic_string > _Guard { this };

        constexpr bool _Can_construct_by_copy =
            _Is_specialization_v < _Traits, char_traits > && _Is_EcharT < _Elem > && is_same_v < _Size, size_type >;

        if constexpr ( _Can_construct_by_copy ) {
            const auto _Data = _My_data . _Myptr ( );
            :: std :: _Copy_n_unchecked4 ( :: std :: move ( _First ), _Count, _Data );
            _My_data . _Mysize = _Count;
            _Data [ _Count ] = _Elem ( );
        } else {
            for (; _First != _Last; ++ _First ) {
                if constexpr ( ! is_same_v < _Size, size_type > ) {
                    if ( _My_data . _Mysize == _My_data . _Myres ) {
                        if ( _My_data . _Mysize == max_size ( ) ) {
                            _Xlen_string ( );
                        }

                        _Elem * const _Old_ptr = _My_data . _Myptr ( );
                        size_type _New_capacity = _Calculate_growth ( _My_data . _Mysize + 1 );
                        const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );

                        _Traits :: copy ( _Unfancy ( _New_ptr ), _Old_ptr, _My_data . _Mysize );
                        if ( _My_data . _Large_mode_engaged ( ) ) {
                            _Deallocate_for_capacity ( _Al, _My_data . _Bx . _Ptr, _My_data . _Myres );
                            _My_data . _Bx . _Ptr = _New_ptr;
                        } else {
                            _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
                        }
                        _My_data . _Myres = _New_capacity;
                    }
                }

                _Elem * const _Ptr = _My_data . _Myptr ( );
                _Traits :: assign ( _Ptr [ _My_data . _Mysize ], * _First );
                ++ _My_data . _Mysize;
            }

            _Elem * const _Ptr = _My_data . _Myptr ( );
            _Traits :: assign ( _Ptr [ _My_data . _Mysize ], _Elem ( ) );
        }

        ;
        _Guard . _Target = nullptr;
        _Proxy . _Release ( );
    }

public :


















    inline basic_string ( basic_string && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Right . _Getal ( ) ) ) {
        _Mypair . _Myval2 . _Alloc_proxy ( _Fake_alloc );
        _Take_contents ( _Right );
    }

    inline basic_string ( basic_string && _Right, const _Alloc & _Al ) noexcept (
        _Alty_traits :: is_always_equal :: value )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        if constexpr ( ! _Alty_traits :: is_always_equal :: value ) {
            if ( _Getal ( ) != _Right . _Getal ( ) ) {
                _Construct < _Construct_strategy :: _From_string > (
                    _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
                return;
            }
        }

        _Mypair . _Myval2 . _Alloc_proxy ( _Fake_alloc );
        _Take_contents ( _Right );
    }

    inline basic_string ( _String_constructor_concat_tag, const basic_string & _Source_of_al,
        const _Elem * const _Left_ptr, const size_type _Left_size, const _Elem * const _Right_ptr,
        const size_type _Right_size )
        : _Mypair (
            _One_then_variadic_args_t { }, _Alty_traits :: select_on_container_copy_construction ( _Source_of_al . _Getal ( ) ) ) {
        ;
        ;
        ;
        const auto _New_size = static_cast < size_type > ( _Left_size + _Right_size );
        size_type _New_capacity = _Small_string_capacity;
        auto & _My_data = _Mypair . _Myval2;
        _Elem * _Ptr = _My_data . _Bx . _Buf;
        auto && _Alproxy = _Fake_alloc;
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        if ( _New_capacity < _New_size ) {
            _New_capacity = _Calculate_growth ( _New_size, _Small_string_capacity, max_size ( ) );
            const pointer _Fancyptr = _Allocate_for_capacity ( _Getal ( ), _New_capacity );
            _Ptr = _Unfancy ( _Fancyptr );
            _Construct_in_place ( _My_data . _Bx . _Ptr, _Fancyptr );
        }

        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        _Traits :: copy ( _Ptr, _Left_ptr, _Left_size );
        _Traits :: copy ( _Ptr + static_cast < ptrdiff_t > ( _Left_size ), _Right_ptr, _Right_size );
        _Traits :: assign ( _Ptr [ _New_size ], _Elem ( ) );
        ;
        _Proxy . _Release ( );
    }

    inline basic_string ( _String_constructor_concat_tag, basic_string & _Left, basic_string & _Right )
        : _Mypair ( _One_then_variadic_args_t { }, _Left . _Getal ( ) ) {
        auto & _My_data = _Mypair . _Myval2;
        auto & _Left_data = _Left . _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;
        _Left_data . _Orphan_all ( );
        _Right_data . _Orphan_all ( );
        const auto _Left_size = _Left_data . _Mysize;
        const auto _Right_size = _Right_data . _Mysize;

        const auto _Left_capacity = _Left_data . _Myres;
        const auto _Right_capacity = _Right_data . _Myres;

        const auto _New_size = static_cast < size_type > ( _Left_size + _Right_size );
        const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;
        if ( _Fits_in_left && _Right_capacity <= _Left_capacity ) {

            _My_data . _Alloc_proxy ( _Fake_alloc );
            _Take_contents ( _Left );
            const auto _Ptr = _My_data . _Myptr ( );
            ;
            _Traits :: copy ( _Ptr + _Left_size, _Right_data . _Myptr ( ), _Right_size + 1 );
            _My_data . _Mysize = _New_size;
            return;
        }

        const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;
        if ( _Allocators_equal ( _Getal ( ), _Right . _Getal ( ) ) && _Fits_in_right ) {









            ;
            _My_data . _Alloc_proxy ( _Fake_alloc );
            _Take_contents ( _Right );
            const auto _Ptr = _Unfancy ( _My_data . _Bx . _Ptr );
            ;
            _Traits :: move ( _Ptr + _Left_size, _Ptr, _Right_size + 1 );
            _Traits :: copy ( _Ptr, _Left_data . _Myptr ( ), _Left_size );
            _My_data . _Mysize = _New_size;
            return;
        }


        const auto _Max = max_size ( );
        if ( _Max - _Left_size < _Right_size ) {
            _Xlen_string ( );
        }

        size_type _New_capacity = _Calculate_growth ( _New_size, _Small_string_capacity, _Max );
        auto && _Alproxy = _Fake_alloc;
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );
        const pointer _Fancyptr = _Allocate_for_capacity ( _Getal ( ), _New_capacity );

        _Construct_in_place ( _My_data . _Bx . _Ptr, _Fancyptr );
        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        const auto _Ptr = _Unfancy ( _Fancyptr );
        _Traits :: copy ( _Ptr, _Left_data . _Myptr ( ), _Left_size );
        _Traits :: copy ( _Ptr + _Left_size, _Right_data . _Myptr ( ), _Right_size + 1 );
        ;
        _Proxy . _Release ( );
    }



















































































    inline basic_string & operator = ( basic_string && _Right ) noexcept (
        _Choose_pocma_v < _Alty > != _Pocma_values :: _No_propagate_allocators ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }

        auto & _Al = _Getal ( );
        auto & _Right_al = _Right . _Getal ( );
        constexpr auto _Pocma_val = _Choose_pocma_v < _Alty >;
        if constexpr ( _Pocma_val == _Pocma_values :: _Propagate_allocators ) {
            if ( _Al != _Right_al ) {

                _Mypair . _Myval2 . _Orphan_all ( );
                _Mypair . _Myval2 . _Reload_proxy ( _Fake_alloc, _Fake_alloc );
            }
        } else if constexpr ( _Pocma_val == _Pocma_values :: _No_propagate_allocators ) {
            if ( _Al != _Right_al ) {
                assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
                return * this;
            }
        }

        _Tidy_deallocate ( );
        _Pocma ( _Al, _Right_al );
        _Take_contents ( _Right );
        return * this;
    }

    inline basic_string & assign ( basic_string && _Right ) noexcept ( noexcept ( * this = :: std :: move ( _Right ) ) ) {
        * this = :: std :: move ( _Right );
        return * this;
    }

private :
    inline void _Take_contents ( basic_string & _Right ) noexcept {





        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;


        if constexpr ( _Can_memcpy_val ) {



            {









                const auto _My_data_mem =
                    reinterpret_cast < unsigned char * > ( :: std :: addressof ( _Mypair . _Myval2 ) ) + _Memcpy_val_offset;
                const auto _Right_data_mem =
                    reinterpret_cast < const unsigned char * > ( :: std :: addressof ( _Right . _Mypair . _Myval2 ) ) + _Memcpy_val_offset;
                :: memcpy ( _My_data_mem, _Right_data_mem, _Memcpy_val_size );

                _Right_data . _Mysize = 0;
                _Right_data . _Myres = _Small_string_capacity;
                _Right_data . _Activate_SSO_buffer ( );
                _Traits :: assign ( _Right_data . _Bx . _Buf [ 0 ], _Elem ( ) );
                return;
            }
        }


        if ( _Right_data . _Large_mode_engaged ( ) ) {
            _Swap_proxy_and_iterators ( _Right );

            _Construct_in_place ( _My_data . _Bx . _Ptr, _Right_data . _Bx . _Ptr );
            _Right_data . _Bx . _Switch_to_buf ( );
        } else {
            _Right_data . _Orphan_all ( );

            _My_data . _Activate_SSO_buffer ( );
            _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, _Right_data . _Mysize + 1 );
        }

        _My_data . _Myres = _Right_data . _Myres;
        _My_data . _Mysize = _Right_data . _Mysize;

        _Right_data . _Mysize = 0;
        _Right_data . _Myres = _Small_string_capacity;
        _Traits :: assign ( _Right_data . _Bx . _Buf [ 0 ], _Elem ( ) );
    }























public :
    inline basic_string ( initializer_list < _Elem > _Ilist, const _Alloc & _Al = allocator_type ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & operator = ( initializer_list < _Elem > _Ilist ) {
        return assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & operator += ( initializer_list < _Elem > _Ilist ) {
        return append ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & assign ( initializer_list < _Elem > _Ilist ) {
        return assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & append ( initializer_list < _Elem > _Ilist ) {
        return append ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline iterator insert ( const const_iterator _Where, const initializer_list < _Elem > _Ilist ) {



        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const initializer_list < _Elem > _Ilist ) {

        _Adl_verify_range ( _First, _Last );



        const auto _Offset = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        const auto _Length = static_cast < size_type > ( _Last . _Ptr - _First . _Ptr );
        return replace ( _Offset, _Length, _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline ~ basic_string ( ) noexcept {
        _Tidy_deallocate ( );






    }

    static constexpr auto npos { static_cast < size_type > ( - 1 ) };

    inline basic_string & operator = ( const basic_string & _Right ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }

        auto & _Al = _Getal ( );
        const auto & _Right_al = _Right . _Getal ( );
        if constexpr ( _Choose_pocca_v < _Alty > ) {
            if ( _Al != _Right_al ) {
                auto && _Alproxy = _Fake_alloc;
                auto && _Right_alproxy = _Fake_alloc;
                _Container_proxy_ptr < _Alty > _New_proxy ( _Right_alproxy, _Leave_proxy_unbound { } );

                const size_type _Right_size = _Right . _Mypair . _Myval2 . _Mysize;
                const _Elem * const _Right_ptr = _Right . _Mypair . _Myval2 . _Myptr ( );
                if ( _Right_size > _Small_string_capacity ) {
                    size_type _New_capacity = _Calculate_growth ( _Right_size, _Small_string_capacity, _Right . max_size ( ) );
                    auto _Right_al_non_const = _Right_al;
                    const pointer _New_ptr = _Allocate_for_capacity ( _Right_al_non_const, _New_capacity );
                    _Traits :: copy ( _Unfancy ( _New_ptr ), _Right_ptr, _Right_size + 1 );

                    _Tidy_deallocate ( );
                    _Construct_in_place ( _Mypair . _Myval2 . _Bx . _Ptr, _New_ptr );
                    _Mypair . _Myval2 . _Mysize = _Right_size;
                    _Mypair . _Myval2 . _Myres = _New_capacity;
                    ;
                } else {
                    _Tidy_deallocate ( );
                    _Traits :: copy ( _Mypair . _Myval2 . _Bx . _Buf, _Right_ptr, _Right_size + 1 );
                    _Mypair . _Myval2 . _Mysize = _Right_size;
                    _Mypair . _Myval2 . _Myres = _Small_string_capacity;
                }

                _Pocca ( _Al, _Right_al );
                _New_proxy . _Bind ( _Alproxy, :: std :: addressof ( _Mypair . _Myval2 ) );
                return * this;
            }
        }

        _Pocca ( _Al, _Right_al );
        assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        return * this;
    }








    inline basic_string & operator = ( const _Elem * const _Ptr ) {
        return assign ( _Ptr );
    }





    inline basic_string & operator = ( const _Elem _Ch ) {
        ;
        _Mypair . _Myval2 . _Mysize = 1;
        _Elem * const _Ptr = _Mypair . _Myval2 . _Myptr ( );
        _Traits :: assign ( _Ptr [ 0 ], _Ch );
        _Traits :: assign ( _Ptr [ 1 ], _Elem ( ) );
        return * this;
    }

    inline basic_string & operator += ( const basic_string & _Right ) {
        return append ( _Right );
    }








    inline basic_string & operator += ( const _Elem * const _Ptr ) {
        return append ( _Ptr );
    }

    inline basic_string & operator += ( _Elem _Ch ) {
        push_back ( _Ch );
        return * this;
    }

    inline basic_string & append ( const basic_string & _Right ) {
        return append ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & append ( const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return append ( _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }

















    inline basic_string & append (
          const _Elem * const _Ptr, const size_type _Count ) {

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: move ( _Old_ptr + _Old_size, _Ptr, _Count );
            _Traits :: assign ( _Old_ptr [ _Old_size + _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const _Elem * const _Ptr,
                const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: copy ( _New_ptr + _Old_size, _Ptr, _Count );
                _Traits :: assign ( _New_ptr [ _Old_size + _Count ], _Elem ( ) );
            },
            _Ptr, _Count );
    }

    inline basic_string & append ( const _Elem * const _Ptr ) {
        return append ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & append ( const size_type _Count, const _Elem _Ch ) {

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: assign ( _Old_ptr + _Old_size, _Count, _Ch );
            _Traits :: assign ( _Old_ptr [ _Old_size + _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Count,
                const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: assign ( _New_ptr + _Old_size, _Count, _Ch );
                _Traits :: assign ( _New_ptr [ _Old_size + _Count ], _Elem ( ) );
            },
            _Count, _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & append ( const _Iter _First, const _Iter _Last ) {

        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            return append ( _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            const basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            return append ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }
    }














    inline basic_string & assign ( const basic_string & _Right ) {
        * this = _Right;
        return * this;
    }

    inline basic_string & assign ( const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return assign ( _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }

















    inline basic_string & assign (
          const _Elem * const _Ptr, const size_type _Count ) {

        if ( _Count <= _Mypair . _Myval2 . _Myres ) {
            ;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Mypair . _Myval2 . _Mysize = _Count;
            _Traits :: move ( _Old_ptr, _Ptr, _Count );
            _Traits :: assign ( _Old_ptr [ _Count ], _Elem ( ) );
            ;
            return * this;
        }

        return _Reallocate_for (
            _Count,
            [ ] ( _Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr ) {
                _Traits :: copy ( _New_ptr, _Ptr, _Count );
                _Traits :: assign ( _New_ptr [ _Count ], _Elem ( ) );
            },
            _Ptr );
    }

    inline basic_string & assign ( const _Elem * const _Ptr ) {
        return assign ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & assign ( const size_type _Count, const _Elem _Ch ) {

        if ( _Count <= _Mypair . _Myval2 . _Myres ) {
            ;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Mypair . _Myval2 . _Mysize = _Count;
            _Traits :: assign ( _Old_ptr, _Count, _Ch );
            _Traits :: assign ( _Old_ptr [ _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_for (
            _Count,
            [ ] ( _Elem * const _New_ptr, const size_type _Count, const _Elem _Ch ) {
                _Traits :: assign ( _New_ptr, _Count, _Ch );
                _Traits :: assign ( _New_ptr [ _Count ], _Elem ( ) );
            },
            _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & assign ( const _Iter _First, const _Iter _Last ) {
        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            return assign ( _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            if ( _Mypair . _Myval2 . _Myres < _Right . _Mypair . _Myval2 . _Myres ) {
                _Mypair . _Myval2 . _Orphan_all ( );
                _Swap_data ( _Right );
                return * this;
            } else {
                return assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
            }
        }
    }




















    inline basic_string & insert ( const size_type _Off, const basic_string & _Right ) {

        return insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & insert (
        const size_type _Off, const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }


















    inline basic_string & insert (
        const size_type _Off, const _Elem * const _Ptr, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;






        const bool _Check_overlap = _Count <= _Mypair . _Myval2 . _Myres - _Old_size;


        if ( _Check_overlap ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;


            size_type _Ptr_shifted_after;
            if ( _Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size ) {

                _Ptr_shifted_after = _Count;
            } else if ( _Insert_at <= _Ptr ) {
                _Ptr_shifted_after = 0;
            } else {
                _Ptr_shifted_after = static_cast < size_type > ( _Insert_at - _Ptr );
            }

            _Traits :: move ( _Insert_at + _Count, _Insert_at, _Old_size - _Off + 1 );
            _Traits :: copy ( _Insert_at, _Ptr, _Ptr_shifted_after );
            _Traits :: copy (
                _Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after, _Count - _Ptr_shifted_after );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const _Elem * const _Ptr, const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: copy ( _New_ptr + _Off, _Ptr, _Count );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1 );
            },
            _Off, _Ptr, _Count );
    }

    inline basic_string & insert ( const size_type _Off, const _Elem * const _Ptr ) {

        return insert ( _Off, _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & insert (
        const size_type _Off, const size_type _Count, const _Elem _Ch ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at + _Count, _Insert_at, _Old_size - _Off + 1 );
            _Traits :: assign ( _Insert_at, _Count, _Ch );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Count, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: assign ( _New_ptr + _Off, _Count, _Ch );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1 );
            },
            _Off, _Count, _Ch );
    }

    inline iterator insert ( const const_iterator _Where, const _Elem _Ch ) {



        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, 1, _Ch );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline iterator insert (
        const const_iterator _Where, const size_type _Count, const _Elem _Ch ) {




        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, _Count, _Ch );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline iterator insert ( const const_iterator _Where, const _Iter _First, const _Iter _Last ) {




        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            insert ( _Off, _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            const basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }

        return begin ( ) + static_cast < difference_type > ( _Off );
    }





















    inline basic_string & erase ( const size_type _Off = 0 ) {
        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Eos ( _Off );
        return * this;
    }

private :
    inline basic_string & _Erase_noexcept ( const size_type _Off, size_type _Count ) noexcept {
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        _Elem * const _My_ptr = _Mypair . _Myval2 . _Myptr ( );
        _Elem * const _Erase_at = _My_ptr + _Off;
        const size_type _New_size = _Old_size - _Count;
        _Traits :: move ( _Erase_at, _Erase_at + _Count, _New_size - _Off + 1 );
        ;
        _Mypair . _Myval2 . _Mysize = _New_size;
        return * this;
    }

public :
    inline basic_string & erase ( const size_type _Off, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Erase_noexcept ( _Off, _Count );
    }

    inline iterator erase ( const const_iterator _Where ) noexcept {



        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Erase_noexcept ( _Off, 1 );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline iterator erase ( const const_iterator _First, const const_iterator _Last ) noexcept
     {
        _Adl_verify_range ( _First, _Last );



        const auto _Off = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Erase_noexcept ( _Off, static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ) );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline void clear ( ) noexcept {
        _Eos ( 0 );
    }

    inline basic_string & replace ( const size_type _Off, const size_type _Nx, const basic_string & _Right ) {

        return replace ( _Off, _Nx, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & replace ( const size_type _Off, size_type _Nx, const basic_string & _Right,
        const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return replace ( _Off, _Nx, _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }


















    inline basic_string & replace (
        const size_type _Off, size_type _Nx, const _Elem * const _Ptr, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Nx = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx );
        if ( _Nx == _Count ) {
            _Traits :: move ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Ptr, _Count );
            return * this;
        }

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        const size_type _Suffix_size = _Old_size - _Nx - _Off + 1;
        if ( _Count < _Nx ) {
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at, _Ptr, _Count );
            _Traits :: move ( _Insert_at + _Count, _Insert_at + _Nx, _Suffix_size );

            const auto _New_size = _Old_size - ( _Nx - _Count );
            ;
            _Mypair . _Myval2 . _Mysize = _New_size;
            return * this;
        }

        const size_type _Growth = static_cast < size_type > ( _Count - _Nx );






        {
            if ( _Growth <= _Mypair . _Myval2 . _Myres - _Old_size ) {
                ;
                _Mypair . _Myval2 . _Mysize = _Old_size + _Growth;
                _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
                _Elem * const _Insert_at = _Old_ptr + _Off;
                _Elem * const _Suffix_at = _Insert_at + _Nx;

                size_type _Ptr_shifted_after;
                if ( _Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size ) {
                    _Ptr_shifted_after = _Count;
                } else if ( _Suffix_at <= _Ptr ) {
                    _Ptr_shifted_after = 0;
                } else {
                    _Ptr_shifted_after = static_cast < size_type > ( _Suffix_at - _Ptr );
                }

                _Traits :: move ( _Suffix_at + _Growth, _Suffix_at, _Suffix_size );



                _Traits :: move ( _Insert_at, _Ptr, _Ptr_shifted_after );


                _Traits :: copy (
                    _Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after, _Count - _Ptr_shifted_after );
                return * this;
            }
        }

        return _Reallocate_grow_by (
            _Growth,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Nx, const _Elem * const _Ptr, const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: copy ( _New_ptr + _Off, _Ptr, _Count );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off + _Nx, _Old_size - _Nx - _Off + 1 );
            },
            _Off, _Nx, _Ptr, _Count );
    }

    inline basic_string & replace ( const size_type _Off, const size_type _Nx, const _Elem * const _Ptr ) {

        return replace ( _Off, _Nx, _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & replace ( const size_type _Off, size_type _Nx, const size_type _Count, const _Elem _Ch ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Nx = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx );
        if ( _Count == _Nx ) {
            _Traits :: assign ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count, _Ch );
            return * this;
        }

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count < _Nx || _Count - _Nx <= _Mypair . _Myval2 . _Myres - _Old_size ) {


            const auto _New_size = _Old_size + _Count - _Nx;
            ;
            _Mypair . _Myval2 . _Mysize = _New_size;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at + _Count, _Insert_at + _Nx, _Old_size - _Nx - _Off + 1 );
            _Traits :: assign ( _Insert_at, _Count, _Ch );
            ;
            return * this;
        }

        return _Reallocate_grow_by (
            _Count - _Nx,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Nx, const size_type _Count, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: assign ( _New_ptr + _Off, _Count, _Ch );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off + _Nx, _Old_size - _Nx - _Off + 1 );
            },
            _Off, _Nx, _Count, _Ch );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const basic_string & _Right ) {

        _Adl_verify_range ( _First, _Last );



        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Right );
    }















    inline basic_string & replace ( const const_iterator _First, const const_iterator _Last,
          const _Elem * const _Ptr, const size_type _Count ) {

        _Adl_verify_range ( _First, _Last );



        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Ptr, _Count );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const _Elem * const _Ptr ) {

        _Adl_verify_range ( _First, _Last );



        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Ptr );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const size_type _Count, const _Elem _Ch ) {

        _Adl_verify_range ( _First, _Last );



        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Count, _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const _Iter _First2, const _Iter _Last2 ) {

        _Adl_verify_range ( _First, _Last );



        const auto _Off = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        const auto _Length = static_cast < size_type > ( _Last . _Ptr - _First . _Ptr );
        _Adl_verify_range ( _First2, _Last2 );
        const auto _UFirst2 = _Get_unwrapped ( _First2 );
        const auto _ULast2 = _Get_unwrapped ( _Last2 );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst2 ) > :: value ) {
            return replace ( _Off, _Length, _UFirst2, _Convert_size < size_type > ( static_cast < size_t > ( _ULast2 - _UFirst2 ) ) );
        } else {
            const basic_string _Right ( _UFirst2, _ULast2, get_allocator ( ) );
            return replace ( _Off, _Length, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }
    }





















    [ [ nodiscard ] ] inline iterator begin ( ) noexcept {
        return iterator ( _Refancy < pointer > ( _Mypair . _Myval2 . _Myptr ( ) ), :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline const_iterator begin ( ) const noexcept {
        return const_iterator ( _Refancy < const_pointer > ( _Mypair . _Myval2 . _Myptr ( ) ), :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline iterator end ( ) noexcept {
        return iterator (
            _Refancy < pointer > ( _Mypair . _Myval2 . _Myptr ( ) ) + static_cast < difference_type > ( _Mypair . _Myval2 . _Mysize ),
            :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline const_iterator end ( ) const noexcept {
        return const_iterator (
            _Refancy < const_pointer > ( _Mypair . _Myval2 . _Myptr ( ) ) + static_cast < difference_type > ( _Mypair . _Myval2 . _Mysize ),
            :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline _Elem * _Unchecked_begin ( ) noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline const _Elem * _Unchecked_begin ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline _Elem * _Unchecked_end ( ) noexcept {
        return _Mypair . _Myval2 . _Myptr ( ) + _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline const _Elem * _Unchecked_end ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( ) + _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline reverse_iterator rbegin ( ) noexcept {
        return reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rbegin ( ) const noexcept {
        return const_reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline reverse_iterator rend ( ) noexcept {
        return reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rend ( ) const noexcept {
        return const_reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_iterator cbegin ( ) const noexcept {
        return begin ( );
    }

    [ [ nodiscard ] ] inline const_iterator cend ( ) const noexcept {
        return end ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crbegin ( ) const noexcept {
        return rbegin ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crend ( ) const noexcept {
        return rend ( );
    }

    inline void shrink_to_fit ( ) {
        auto & _My_data = _Mypair . _Myval2;

        if ( ! _My_data . _Large_mode_engaged ( ) ) {
            return;
        }

        if ( _My_data . _Mysize <= _Small_string_capacity ) {
            _Become_small ( );
            return;
        }

        size_type _Target_capacity = ( :: std :: min ) ( _My_data . _Mysize | _Alloc_mask, max_size ( ) );
        if ( _Target_capacity < _My_data . _Myres ) {
            auto & _Al = _Getal ( );
            const pointer _New_ptr =
                _Allocate_for_capacity < _Allocation_policy :: _Exactly > ( _Al, _Target_capacity );
            ;

            _My_data . _Orphan_all ( );
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Unfancy ( _My_data . _Bx . _Ptr ), _My_data . _Mysize + 1 );
            _Deallocate_for_capacity ( _Al, _My_data . _Bx . _Ptr, _My_data . _Myres );
            _My_data . _Bx . _Ptr = _New_ptr;
            _My_data . _Myres = _Target_capacity;
            ;
        }
    }

    [ [ nodiscard ] ] inline reference at ( const size_type _Off ) {
        _Mypair . _Myval2 . _Check_offset_exclusive ( _Off );
        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline const_reference at ( const size_type _Off ) const {
        _Mypair . _Myval2 . _Check_offset_exclusive ( _Off );
        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const size_type _Off ) noexcept {



        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline const_reference operator [ ] ( const size_type _Off ) const noexcept
     {



        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }








    inline void push_back ( const _Elem _Ch ) {
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Old_size < _Mypair . _Myval2 . _Myres ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + 1;
            _Elem * const _Ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: assign ( _Ptr [ _Old_size ], _Ch );
            _Traits :: assign ( _Ptr [ _Old_size + 1 ], _Elem ( ) );
            return;
        }

        _Reallocate_grow_by (
            1,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: assign ( _New_ptr [ _Old_size ], _Ch );
                _Traits :: assign ( _New_ptr [ _Old_size + 1 ], _Elem ( ) );
            },
            _Ch );
    }

    inline void pop_back ( ) noexcept {
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;



        _Eos ( _Old_size - 1 );
    }

    [ [ nodiscard ] ] inline reference front ( ) noexcept {




        return _Mypair . _Myval2 . _Myptr ( ) [ 0 ];
    }

    [ [ nodiscard ] ] inline const_reference front ( ) const noexcept {




        return _Mypair . _Myval2 . _Myptr ( ) [ 0 ];
    }

    [ [ nodiscard ] ] inline reference back ( ) noexcept {




        return _Mypair . _Myval2 . _Myptr ( ) [ _Mypair . _Myval2 . _Mysize - 1 ];
    }

    [ [ nodiscard ] ] inline const_reference back ( ) const noexcept {




        return _Mypair . _Myval2 . _Myptr ( ) [ _Mypair . _Myval2 . _Mysize - 1 ];
    }

    [ [ nodiscard ] ] inline const _Elem * c_str ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline const _Elem * data ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }







    [ [ nodiscard ] ] inline size_type length ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline size_type size ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline size_type max_size ( ) const noexcept {
        const size_type _Alloc_max = _Alty_traits :: max_size ( _Getal ( ) );
        const size_type _Storage_max =
            ( :: std :: max ) ( _Alloc_max, static_cast < size_type > ( _BUF_SIZE ) );
        return ( :: std :: min ) ( static_cast < size_type > ( ( numeric_limits < difference_type > :: max ) ( ) ),
            _Storage_max - 1
        );
    }

    inline void resize ( const size_type _New_size, const _Elem _Ch = _Elem ( ) ) {

        const size_type _Old_size = size ( );
        if ( _New_size <= _Old_size ) {
            _Eos ( _New_size );
        } else {
            append ( _New_size - _Old_size, _Ch );
        }
    }

    template < class _Operation >
    constexpr void



        _Resize_and_overwrite

        ( const size_type _New_size, _Operation _Op ) {
        if ( _Mypair . _Myval2 . _Myres < _New_size ) {
            _Reallocate_grow_by ( _New_size - _Mypair . _Myval2 . _Mysize,
                [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size ) {
                    _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size + 1 );
                } );
        } else {
            ;
            _Mypair . _Myval2 . _Mysize = _New_size;
        }

        auto _Arg_ptr = _Mypair . _Myval2 . _Myptr ( );
        auto _Arg_size = _New_size;
        const auto _Result_size = :: std :: move ( _Op ) ( _Arg_ptr, _Arg_size );
        const auto _Result_as_size_type = static_cast < size_type > ( _Result_size );




        _Eos ( _Result_as_size_type );
    }








    [ [ nodiscard ] ] inline size_type capacity ( ) const noexcept {
        return _Mypair . _Myval2 . _Myres;
    }























    void reserve ( const size_type _Newcap = 0 ) {
        if ( _Mypair . _Myval2 . _Mysize > _Newcap ) {
            return;
        }

        if ( _Mypair . _Myval2 . _Myres == _Newcap ) {
            return;
        }

        if ( _Mypair . _Myval2 . _Myres < _Newcap ) {
            const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
            _Reallocate_grow_by (
                _Newcap - _Old_size, [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size ) {
                    _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size + 1 );
                } );

            _Mypair . _Myval2 . _Mysize = _Old_size;
            return;
        }

        if ( _Newcap <= _Small_string_capacity && _Mypair . _Myval2 . _Large_mode_engaged ( ) ) {

            _Become_small ( );
            return;
        }


    }


    [ [ nodiscard ( "This member function returns a bool indicating whether the container is empty and has no other effects. It is not useful to call" " this member function and discard the return value. Use the \'clear()\' member function if you want to erase all elements." ) ] ] inline bool empty ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize == 0;
    }

    inline size_type copy (
          _Elem * const _Ptr, size_type _Count, const size_type _Off = 0 ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        _Traits :: copy ( _Ptr, _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count );
        return _Count;
    }

    inline size_type
        _Copy_s ( _Elem * const _Dest, const size_type _Dest_size, size_type _Count,
            const size_type _Off = 0 ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        _Traits :: _Copy_s ( _Dest, _Dest_size, _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count );
        return _Count;
    }

    static inline void _Swap_bx_large_with_small ( _Scary_val & _Starts_large, _Scary_val & _Starts_small ) noexcept {

        const pointer _Ptr = _Starts_large . _Bx . _Ptr;
        _Starts_large . _Bx . _Switch_to_buf ( );
        _Traits :: copy ( _Starts_large . _Bx . _Buf, _Starts_small . _Bx . _Buf, _BUF_SIZE );

        _Construct_in_place ( _Starts_small . _Bx . _Ptr, _Ptr );
    }

    inline void _Swap_data ( basic_string & _Right ) noexcept {
        using :: std :: swap;

        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;


        if constexpr ( _Can_memcpy_val ) {



            {
                const auto _My_data_mem =
                    reinterpret_cast < unsigned char * > ( :: std :: addressof ( _My_data ) ) + _Memcpy_val_offset;
                const auto _Right_data_mem =
                    reinterpret_cast < unsigned char * > ( :: std :: addressof ( _Right_data ) ) + _Memcpy_val_offset;
                unsigned char _Temp_mem [ _Memcpy_val_size ];
                :: memcpy ( _Temp_mem, _My_data_mem, _Memcpy_val_size );
                :: memcpy ( _My_data_mem, _Right_data_mem, _Memcpy_val_size );
                :: memcpy ( _Right_data_mem, _Temp_mem, _Memcpy_val_size );

                return;
            }
        }


        const bool _My_large = _My_data . _Large_mode_engaged ( );
        const bool _Right_large = _Right_data . _Large_mode_engaged ( );

        if ( _My_large && _Right_large ) {
            swap ( _My_data . _Bx . _Ptr, _Right_data . _Bx . _Ptr );
        } else if ( _My_large ) {
            _Swap_bx_large_with_small ( _My_data, _Right_data );
        } else if ( _Right_large ) {
            _Swap_bx_large_with_small ( _Right_data, _My_data );
        } else {
            _Elem _Temp_buf [ _BUF_SIZE ];
            _Traits :: copy ( _Temp_buf, _My_data . _Bx . _Buf, _My_data . _Mysize + 1 );
            _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, _Right_data . _Mysize + 1 );
            _Traits :: copy ( _Right_data . _Bx . _Buf, _Temp_buf, _My_data . _Mysize + 1 );
        }

        :: std :: swap ( _My_data . _Mysize, _Right_data . _Mysize );
        :: std :: swap ( _My_data . _Myres, _Right_data . _Myres );
    }

    inline void swap ( basic_string & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Pocs ( _Getal ( ), _Right . _Getal ( ) );
















            _Swap_data ( _Right );
        }
    }












    [ [ nodiscard ] ] inline size_type find ( const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem * const _Ptr, const size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type rfind ( const basic_string & _Right, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_rfind < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept
     {

        return static_cast < size_type > ( _Traits_rfind < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_first_of (
        const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find_first_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_first_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of (
          const _Elem * const _Ptr, const size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find_first_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_last_of ( const basic_string & _Right, size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_last_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of (
          const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_first_not_of (
        const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find_first_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ),
            _Mypair . _Myval2 . _Mysize, _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of ( const _Elem * const _Ptr,
        const size_type _Off, const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_first_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of (
          const _Elem * const _Ptr, size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find_first_not_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_not_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_last_not_of (
        const basic_string & _Right, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ),
            _Mypair . _Myval2 . _Mysize, _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_last_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of (
          const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_not_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_not_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }








    [ [ nodiscard ] ] inline basic_string substr ( const size_type _Off = 0, const size_type _Count = npos )



        const

    {

        return basic_string { * this, _Off, _Count };
    }








    inline bool _Equal ( const basic_string & _Right ) const noexcept {

        return _Traits_equal < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline bool _Equal ( const _Elem * const _Ptr ) const noexcept {

        return _Traits_equal < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Ptr, _Traits :: length ( _Ptr ) );
    }
































    [ [ nodiscard ] ] inline int compare ( const basic_string & _Right ) const noexcept {

        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    [ [ nodiscard ] ] inline int compare ( size_type _Off, size_type _Nx, const basic_string & _Right ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    [ [ nodiscard ] ] inline int compare ( const size_type _Off, const size_type _Nx, const basic_string & _Right,
        const size_type _Roff, const size_type _Count = npos ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count ) );
    }

    [ [ nodiscard ] ] inline int compare ( const _Elem * const _Ptr ) const noexcept {

        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Ptr, _Traits :: length ( _Ptr ) );
    }

    [ [ nodiscard ] ] inline int compare (
        const size_type _Off, const size_type _Nx, const _Elem * const _Ptr ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Ptr, _Traits :: length ( _Ptr ) );
    }

    [ [ nodiscard ] ] inline int compare ( const size_type _Off, const size_type _Nx,
          const _Elem * const _Ptr, const size_type _Count ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ), _Ptr, _Count );
    }









































    [ [ nodiscard ] ] inline allocator_type get_allocator ( ) const noexcept {
        return static_cast < allocator_type > ( _Getal ( ) );
    }

private :
    [ [ nodiscard ] ] static inline size_type _Calculate_growth (
        const size_type _Requested, const size_type _Old, const size_type _Max ) noexcept {
        const size_type _Masked = _Requested | _Alloc_mask;
        if ( _Masked > _Max ) {
            return _Max;
        }

        if ( _Old > _Max - _Old / 2 ) {
            return _Max;
        }

        return ( :: std :: max ) ( _Masked, _Old + _Old / 2 );
    }

    [ [ nodiscard ] ] inline size_type _Calculate_growth ( const size_type _Requested ) const noexcept {
        return _Calculate_growth ( _Requested, _Mypair . _Myval2 . _Myres, max_size ( ) );
    }

    template < class _Fty, class ... _ArgTys >
    inline basic_string & _Reallocate_for ( const size_type _New_size, _Fty _Fn, _ArgTys ... _Args ) {


        if ( _New_size > max_size ( ) ) {
            _Xlen_string ( );
        }

        const size_type _Old_capacity = _Mypair . _Myval2 . _Myres;
        size_type _New_capacity = _Calculate_growth ( _New_size );
        auto & _Al = _Getal ( );
        const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );

        _Mypair . _Myval2 . _Orphan_all ( );
        ;
        _Mypair . _Myval2 . _Mysize = _New_size;
        _Mypair . _Myval2 . _Myres = _New_capacity;
        _Fn ( _Unfancy ( _New_ptr ), _New_size, _Args ... );
        if ( _Old_capacity > _Small_string_capacity ) {
            _Deallocate_for_capacity ( _Al, _Mypair . _Myval2 . _Bx . _Ptr, _Old_capacity );
            _Mypair . _Myval2 . _Bx . _Ptr = _New_ptr;
        } else {
            _Construct_in_place ( _Mypair . _Myval2 . _Bx . _Ptr, _New_ptr );
        }

        ;
        return * this;
    }

    template < class _Fty, class ... _ArgTys >
    inline basic_string & _Reallocate_grow_by ( const size_type _Size_increase, _Fty _Fn, _ArgTys ... _Args ) {


        auto & _My_data = _Mypair . _Myval2;
        const size_type _Old_size = _My_data . _Mysize;
        if ( max_size ( ) - _Old_size < _Size_increase ) {
            _Xlen_string ( );
        }

        const size_type _New_size = _Old_size + _Size_increase;
        const size_type _Old_capacity = _My_data . _Myres;
        size_type _New_capacity = _Calculate_growth ( _New_size );
        auto & _Al = _Getal ( );
        const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );

        _My_data . _Orphan_all ( );
        ;
        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        _Elem * const _Raw_new = _Unfancy ( _New_ptr );
        if ( _Old_capacity > _Small_string_capacity ) {
            const pointer _Old_ptr = _My_data . _Bx . _Ptr;
            _Fn ( _Raw_new, _Unfancy ( _Old_ptr ), _Old_size, _Args ... );
            _Deallocate_for_capacity ( _Al, _Old_ptr, _Old_capacity );
            _My_data . _Bx . _Ptr = _New_ptr;
        } else {
            _Fn ( _Raw_new, _My_data . _Bx . _Buf, _Old_size, _Args ... );
            _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
        }

        ;
        return * this;
    }

    inline void _Become_small ( ) noexcept {

        auto & _My_data = _Mypair . _Myval2;
        ;
        ;

        _My_data . _Orphan_all ( );
        ;
        const pointer _Ptr = _My_data . _Bx . _Ptr;
        _My_data . _Bx . _Switch_to_buf ( );
        _Traits :: copy ( _My_data . _Bx . _Buf, _Unfancy ( _Ptr ), _My_data . _Mysize + 1 );
        auto & _Al = _Getal ( );
        _Deallocate_for_capacity ( _Al, _Ptr, _My_data . _Myres );
        _My_data . _Myres = _Small_string_capacity;
    }

    inline void _Eos ( const size_type _New_size ) noexcept {
        ;
        _Mypair . _Myval2 . _Mysize = _New_size;
        _Traits :: assign ( _Mypair . _Myval2 . _Myptr ( ) [ _New_size ], _Elem ( ) );
    }

    inline void _Tidy_deallocate ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;
        _My_data . _Orphan_all ( );
        if ( _My_data . _Large_mode_engaged ( ) ) {
            ;
            auto & _Al = _Getal ( );
            _Deallocate_for_capacity ( _Al, _My_data . _Bx . _Ptr, _My_data . _Myres );
            _My_data . _Bx . _Switch_to_buf ( );
        }

        _My_data . _Mysize = 0;
        _My_data . _Myres = _Small_string_capacity;

        _Traits :: assign ( _My_data . _Bx . _Buf [ 0 ], _Elem ( ) );
    }

public :
    inline void _Orphan_all ( ) noexcept {
        _Mypair . _Myval2 . _Orphan_all ( );
    }

private :
    inline void _Swap_proxy_and_iterators ( basic_string & _Right ) noexcept {
        _Mypair . _Myval2 . _Swap_proxy_and_iterators ( _Right . _Mypair . _Myval2 );
    }

    inline _Alty & _Getal ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    inline const _Alty & _Getal ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    _Compressed_pair < _Alty, _Scary_val > _Mypair;
};
#line 4924 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
inline void swap ( basic_string < _Elem, _Traits, _Alloc > & _Left,
    basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 4930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    const auto _Left_size = _Left . size ( );
    const auto _Right_size = _Right . size ( );
    if ( _Left . max_size ( ) - _Left_size < _Right_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, _Right . c_str ( ), _Right_size };
}
#line 4942 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
      const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    using _Size_type = typename basic_string < _Elem, _Traits, _Alloc > :: size_type;
    const auto _Left_size = _Convert_size < _Size_type > ( _Traits :: length ( _Left ) );
    const auto _Right_size = _Right . size ( );
    if ( _Right . max_size ( ) - _Right_size < _Left_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Right, _Left, _Left_size, _Right . c_str ( ), _Right_size };
}
#line 4955 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const _Elem _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    const auto _Right_size = _Right . size ( );
    if ( _Right_size == _Right . max_size ( ) ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Right, :: std :: addressof ( _Left ), 1, _Right . c_str ( ), _Right_size };
}
#line 4966 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    using _Size_type = typename basic_string < _Elem, _Traits, _Alloc > :: size_type;
    const auto _Left_size = _Left . size ( );
    const auto _Right_size = _Convert_size < _Size_type > ( _Traits :: length ( _Right ) );
    if ( _Left . max_size ( ) - _Left_size < _Right_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, _Right, _Right_size };
}
#line 4979 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem _Right ) {
    const auto _Left_size = _Left . size ( );
    if ( _Left_size == _Left . max_size ( ) ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, :: std :: addressof ( _Right ), 1 };
}
#line 4990 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, _Left ) );
}
#line 4996 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return :: std :: move ( _Left . append ( _Right ) );
}
#line 5002 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {







    return { _String_constructor_concat_tag { }, _Left, _Right };
}
#line 5015 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
      const _Elem * const _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, _Left ) );
}
#line 5021 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const _Elem _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, 1, _Left ) );
}
#line 5027 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const _Elem * const _Right ) {
    return :: std :: move ( _Left . append ( _Right ) );
}
#line 5033 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const _Elem _Right ) {
    _Left . push_back ( _Right );
    return :: std :: move ( _Left );
}
#line 5040 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline bool operator == (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Left . _Equal ( _Right );
}
#line 5046 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline bool operator == (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) noexcept {
    return _Left . _Equal ( _Right );
}
#line 5065 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator == ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
    return _Right . _Equal ( _Left );
}
#line 5071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 5077 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
    return ! ( _Left == _Right );
}
#line 5083 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) noexcept
 {
    return ! ( _Left == _Right );
}
#line 5089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Left . compare ( _Right ) < 0;
}
#line 5095 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
    return _Right . compare ( _Left ) > 0;
}
#line 5101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) noexcept
 {
    return _Left . compare ( _Right ) < 0;
}
#line 5107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Right < _Left;
}
#line 5113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
    return _Right < _Left;
}
#line 5119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) noexcept
 {
    return _Right < _Left;
}
#line 5125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Right < _Left );
}
#line 5131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
    return ! ( _Right < _Left );
}
#line 5137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) noexcept
 {
    return ! ( _Right < _Left );
}
#line 5143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Left < _Right );
}
#line 5149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept
 {
    return ! ( _Left < _Right );
}
#line 5155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) noexcept
 {
    return ! ( _Left < _Right );
}
#line 5162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using string = basic_string< char> ; 
#line 5163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using wstring = basic_string< __wchar_t> ; 
#line 5167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using u16string = basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > ; 
#line 5168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
using u32string = basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > ; 
#line 5170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Alloc >
struct hash < basic_string < _Elem, char_traits < _Elem >, _Alloc > >
    : _Conditionally_enabled_hash < basic_string < _Elem, char_traits < _Elem >, _Alloc >, _Is_EcharT < _Elem > > {
    [ [ nodiscard ] ] static size_t _Do_hash ( const basic_string < _Elem, char_traits < _Elem >, _Alloc > & _Keyval ) noexcept {
        return _Hash_array_representation ( _Keyval . c_str ( ), _Keyval . size ( ) );
    }
};
#line 5178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & operator >> (
    basic_istream < _Elem, _Traits > & _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str ) {
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Ctype = typename _Myis :: _Ctype;
    using _Mystr = basic_string < _Elem, _Traits, _Alloc >;
    using _Mysizt = typename _Mystr :: size_type;

    typename _Myis :: iostate _State = _Myis :: goodbit;
    bool _Changed = false;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( _Istr . getloc ( ) );
        _Str . erase ( );

        try {
        _Mysizt _Size;
        if ( 0 < _Istr . width ( ) && static_cast < _Mysizt > ( _Istr . width ( ) ) < _Str . max_size ( ) ) {
            _Size = static_cast < _Mysizt > ( _Istr . width ( ) );
        } else {
            _Size = _Str . max_size ( );
        }

        typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

        for (; 0 < _Size; -- _Size, _Meta = _Istr . rdbuf ( ) -> snextc ( ) ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= _Myis :: eofbit;
                break;
            } else if ( _Ctype_fac . is ( _Ctype :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                break;
            } else {
                _Str . push_back ( _Traits :: to_char_type ( _Meta ) );
                _Changed = true;
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( _Myis :: badbit, true ); }
    }

    _Istr . width ( 0 );
    if ( ! _Changed ) {
        _State |= _Myis :: failbit;
    }

    _Istr . setstate ( _State );
    return _Istr;
}
#line 5227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
basic_ostream < _Elem, _Traits > & operator << (
    basic_ostream < _Elem, _Traits > & _Ostr, const basic_string < _Elem, _Traits, _Alloc > & _Str ) {
    return _Insert_string ( _Ostr, _Str . data ( ), _Str . size ( ) );
}
#line 5233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
inline namespace literals { 
#line 5234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
inline namespace string_literals { 
#line 5235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
[[nodiscard]] inline string operator ""s(const char *_Str, size_t _Len) { 
#line 5236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
return string{_Str, _Len}; 
#line 5237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
} 
#line 5239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
[[nodiscard]] inline wstring operator ""s(const __wchar_t *_Str, size_t _Len) { 
#line 5240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
return wstring{_Str, _Len}; 
#line 5241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
} 
#line 5249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
[[nodiscard]] inline u16string operator ""s(const char16_t *_Str, size_t _Len) { 
#line 5250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
return u16string{_Str, _Len}; 
#line 5251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
} 
#line 5253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
[[nodiscard]] inline u32string operator ""s(const char32_t *_Str, size_t _Len) { 
#line 5254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
return u32string{_Str, _Len}; 
#line 5255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
} 
#line 5256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
}
#line 5257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
}
#line 5287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
}
#line 5296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xstring"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
namespace std { 
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class logic_error : public exception { 
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = exception; 
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit logic_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit logic_error(const char *_Message) : _Mybase(_Message) { } 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class domain_error : public logic_error { 
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = logic_error; 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit domain_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit domain_error(const char *_Message) : _Mybase(_Message) { } 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class invalid_argument : public logic_error { 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = logic_error; 
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit invalid_argument(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit invalid_argument(const char *_Message) : _Mybase(_Message) { } 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class length_error : public logic_error { 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = logic_error; 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit length_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit length_error(const char *_Message) : _Mybase(_Message) { } 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class out_of_range : public logic_error { 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = logic_error; 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit out_of_range(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit out_of_range(const char *_Message) : _Mybase(_Message) { } 
#line 98 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class runtime_error : public exception { 
#line 102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = exception; 
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit runtime_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit runtime_error(const char *_Message) : _Mybase(_Message) { } 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class overflow_error : public runtime_error { 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = runtime_error; 
#line 120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit overflow_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit overflow_error(const char *_Message) : _Mybase(_Message) { } 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class underflow_error : public runtime_error { 
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = runtime_error; 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit underflow_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit underflow_error(const char *_Message) : _Mybase(_Message) { } 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
class range_error : public runtime_error { 
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
public: using _Mybase = runtime_error; 
#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit range_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
explicit range_error(const char *_Message) : _Mybase(_Message) { } 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}; 
#line 164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
[[noreturn]] inline void _Throw_range_error(const char *const _Message) { 
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
throw range_error{_Message}; 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
} 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
}
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\stdexcept"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
namespace std { 
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
struct once_flag { 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
constexpr once_flag() noexcept : _Opaque((nullptr)) { } 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
once_flag(const once_flag &) = delete;
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
once_flag &operator=(const once_flag &) = delete;
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
void *_Opaque; 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
}; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
template < class _Ty >
union _Immortalizer_impl {
    constexpr _Immortalizer_impl ( ) noexcept : _Storage { } { }
    _Immortalizer_impl ( const _Immortalizer_impl & ) = delete;
    _Immortalizer_impl & operator = ( const _Immortalizer_impl & ) = delete;
    ~ _Immortalizer_impl ( ) {

    }

    _Ty _Storage;
};
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
extern "C" [[nodiscard]] __declspec(dllimport) int __stdcall __std_init_once_begin_initialize(void ** _LpInitOnce, unsigned long _DwFlags, int * _FPending, void ** _LpContext) noexcept; 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
extern "C" [[nodiscard]] __declspec(dllimport) int __stdcall __std_init_once_complete(void ** _LpInitOnce, unsigned long _DwFlags, void * _LpContext) noexcept; 
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
extern "C" [[noreturn]] void __stdcall __std_init_once_link_alternate_names_and_abort() noexcept; 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
constexpr unsigned long _Init_once_init_failed = 4UL; 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
struct _Init_once_completer { 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
once_flag &_Once; 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
unsigned long _DwFlags; 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
~_Init_once_completer() { 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
if (!(__std_init_once_complete(&((_Once)._Opaque), _DwFlags, nullptr))) { 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
__std_init_once_link_alternate_names_and_abort(); 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
}  
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
} 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
}; 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
template < class _Fn, class ... _Args >
void ( call_once ) ( once_flag & _Once, _Fn && _Fx, _Args && ... _Ax ) noexcept (
    noexcept ( :: std :: invoke ( :: std :: forward < _Fn > ( _Fx ), :: std :: forward < _Args > ( _Ax ) ... ) ) ) {


    int _Pending;
    if ( ! __std_init_once_begin_initialize ( & _Once . _Opaque, 0, & _Pending, nullptr ) ) {
        :: abort ( );
    }

    if ( _Pending != 0 ) {
        _Init_once_completer _Op { _Once, _Init_once_init_failed };
        :: std :: invoke ( :: std :: forward < _Fn > ( _Fx ), :: std :: forward < _Args > ( _Ax ) ... );
        _Op . _DwFlags = 0;
    }
}
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
}
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xcall_once.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
namespace std { 
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
enum class errc { 
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
address_family_not_supported = 102, 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
address_in_use = 100, 
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
address_not_available, 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
already_connected = 113, 
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
argument_list_too_long = 7, 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
argument_out_of_domain = 33, 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
bad_address = 14, 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
bad_file_descriptor = 9, 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
bad_message = 104, 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
broken_pipe = 32, 
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
connection_aborted = 106, 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
connection_already_in_progress = 103, 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
connection_refused = 107, 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
connection_reset, 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
cross_device_link = 18, 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
destination_address_required = 109, 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
device_or_resource_busy = 16, 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
directory_not_empty = 41, 
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
executable_format_error = 8, 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
file_exists = 17, 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
file_too_large = 27, 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
filename_too_long = 38, 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
function_not_supported = 40, 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
host_unreachable = 110, 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
identifier_removed, 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
illegal_byte_sequence = 42, 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
inappropriate_io_control_operation = 25, 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
interrupted = 4, 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
invalid_argument = 22, 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
invalid_seek = 29, 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
io_error = 5, 
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
is_a_directory = 21, 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
message_size = 115, 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
network_down, 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
network_reset, 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
network_unreachable, 
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_buffer_space, 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_child_process = 10, 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_link = 121, 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_lock_available = 39, 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_message_available = 120, 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_message = 122, 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_protocol_option, 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_space_on_device = 28, 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_stream_resources = 124, 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_such_device_or_address = 6, 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_such_device = 19, 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_such_file_or_directory = 2, 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
no_such_process, 
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
not_a_directory = 20, 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
not_a_socket = 128, 
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
not_a_stream = 125, 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
not_connected, 
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
not_enough_memory = 12, 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
not_supported = 129, 
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
operation_canceled = 105, 
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
operation_in_progress = 112, 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
operation_not_permitted = 1, 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
operation_not_supported = 130, 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
operation_would_block = 140, 
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
owner_dead = 133, 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
permission_denied = 13, 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
protocol_error = 134, 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
protocol_not_supported, 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
read_only_file_system = 30, 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
resource_deadlock_would_occur = 36, 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
resource_unavailable_try_again = 11, 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
result_out_of_range = 34, 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
state_not_recoverable = 127, 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
stream_timeout = 137, 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
text_file_busy = 139, 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
timed_out = 138, 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
too_many_files_open_in_system = 23, 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
too_many_files_open, 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
too_many_links = 31, 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
too_many_symbolic_link_levels = 114, 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
value_too_large = 132, 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
wrong_protocol_type = 136
#line 98 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
}; 
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
}
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xerrc.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
namespace std { 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::clock_t;
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::time_t;
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::asctime;
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::clock;
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::strftime;
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::ctime;
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::difftime;
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::gmtime;
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::localtime;
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::mktime;
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
using ::time;
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
}
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ctime"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtimec.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtimec.h"
extern "C" {
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtimec.h"
__int64 __cdecl _Xtime_get_ticks() noexcept; 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtimec.h"
__int64 __cdecl _Query_perf_counter() noexcept; 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtimec.h"
__int64 __cdecl _Query_perf_frequency() noexcept; 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtimec.h"
}
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xtimec.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
extern "C" {
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
using _Thrd_id_t = unsigned; 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
struct _Thrd_t { 
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void *_Hnd; 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_id_t _Id; 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
}; 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
using _Smtx_t = void *; 
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
struct _Stl_critical_section { 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void *_Unused = (nullptr); 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Smtx_t _M_srw_lock = (nullptr); 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
}; 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
struct _Mtx_internal_imp_t { 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
static constexpr size_t _Critical_section_size = (64); 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
static constexpr size_t _Critical_section_align = __alignof(void *); 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
int _Type{0}; 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
union { 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Stl_critical_section _Critical_section{}; 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
std::_Aligned_storage_t< _Critical_section_size, _Critical_section_align>  _Cs_storage; 
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
}; 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
long _Thread_id{0L}; 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
int _Count{0}; 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
}; 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
constexpr size_t _Cnd_internal_imp_size = (72); 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
constexpr size_t _Cnd_internal_imp_alignment = __alignof(void *); 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
using _Mtx_t = _Mtx_internal_imp_t *; 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
struct _Cnd_internal_imp_t; 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
using _Cnd_t = _Cnd_internal_imp_t *; 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
enum class _Thrd_result: int { _Success, _Nomem, _Timedout, _Busy, _Error}; 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Thrd_detach(_Thrd_t) noexcept; 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Thrd_join(_Thrd_t, int *) noexcept; 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Thrd_yield() noexcept; 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
unsigned __cdecl _Thrd_hardware_concurrency() noexcept; 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_id_t __cdecl _Thrd_id() noexcept; 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __stdcall _Thrd_sleep_for(unsigned long) noexcept; 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
enum { 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Mtx_plain = 1, 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Mtx_try, 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Mtx_timed = 4, 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Mtx_recursive = 256
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
}; 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Mtx_init_in_situ(_Mtx_t, int) noexcept; 
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Mtx_destroy_in_situ(_Mtx_t) noexcept; 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
int __cdecl _Mtx_current_owns(_Mtx_t) noexcept; 
#line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Mtx_lock(_Mtx_t) noexcept; 
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Mtx_trylock(_Mtx_t) noexcept; 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Mtx_unlock(_Mtx_t) noexcept; 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Smtx_lock_exclusive(_Smtx_t *) noexcept; 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Smtx_lock_shared(_Smtx_t *) noexcept; 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
int __cdecl _Smtx_try_lock_exclusive(_Smtx_t *) noexcept; 
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
int __cdecl _Smtx_try_lock_shared(_Smtx_t *) noexcept; 
#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Smtx_unlock_exclusive(_Smtx_t *) noexcept; 
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Smtx_unlock_shared(_Smtx_t *) noexcept; 
#line 124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Cnd_init_in_situ(_Cnd_t) noexcept; 
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Cnd_destroy_in_situ(_Cnd_t) noexcept; 
#line 126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Cnd_wait(_Cnd_t, _Mtx_t) noexcept; 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Cnd_timedwait(_Cnd_t, _Mtx_t, const _timespec64 *) noexcept; 
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Cnd_broadcast(_Cnd_t) noexcept; 
#line 129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_Thrd_result __cdecl _Cnd_signal(_Cnd_t) noexcept; 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Cnd_register_at_thread_exit(_Cnd_t, _Mtx_t, int *) noexcept; 
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Cnd_unregister_at_thread_exit(_Mtx_t) noexcept; 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
void __cdecl _Cnd_do_broadcast_at_thread_exit() noexcept; 
#line 133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
}
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
namespace std { 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
enum { 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_DEVICE_OR_RESOURCE_BUSY, 
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_INVALID_ARGUMENT, 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_NO_SUCH_PROCESS, 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_NOT_ENOUGH_MEMORY, 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_OPERATION_NOT_PERMITTED, 
#line 142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_RESOURCE_DEADLOCK_WOULD_OCCUR, 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
_RESOURCE_UNAVAILABLE_TRY_AGAIN
#line 144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
}; 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
[[noreturn]] void __cdecl _Throw_Cpp_error(int _Code); 
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
}
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xthreads.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
extern "C" [[nodiscard]] unsigned char __stdcall __std_atomic_compare_exchange_128(__int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult) noexcept; 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
extern "C" [[nodiscard]] char __stdcall __std_atomic_has_cmpxchg16b() noexcept; 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
enum { 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Atomic_memory_order_relaxed, 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Atomic_memory_order_consume, 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Atomic_memory_order_acquire, 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Atomic_memory_order_release, 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Atomic_memory_order_acq_rel, 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Atomic_memory_order_seq_cst
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}; 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
extern "C" inline void _Check_memory_order(const unsigned _Order) noexcept { 
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
if (_Order > (_Atomic_memory_order_seq_cst)) { 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
; 
#line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
#pragma warning(push)
#pragma warning(disable : 6001)
#pragma warning(disable : 28113)
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
extern "C" inline void _Atomic_thread_fence(const unsigned _Order) noexcept { 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
if (_Order == (_Atomic_memory_order_relaxed)) { 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
return; 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
__pragma(warning(push)) __pragma(warning(disable : 4996)) _ReadWriteBarrier(); __pragma(warning(pop)) 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
if (_Order == (_Atomic_memory_order_seq_cst)) { 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
volatile long _Guard; 
#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
(void)_InterlockedIncrement(&_Guard); 
#line 273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
__pragma(warning(push)) __pragma(warning(disable : 4996)) _ReadWriteBarrier(); __pragma(warning(pop)) 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#pragma warning(pop)
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
extern "C" {
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Smtx_t *__stdcall __std_atomic_get_mutex(const void * _Key) noexcept; 
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
namespace std { 
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Storage_for {

    alignas ( _Ty ) unsigned char _Storage [ sizeof ( _Ty ) ];

    _Storage_for ( ) = default;
    _Storage_for ( const _Storage_for & ) = delete;
    _Storage_for & operator = ( const _Storage_for & ) = delete;








    [ [ nodiscard ] ] _Ty & _Ref ( ) noexcept {
        return reinterpret_cast < _Ty & > ( _Storage );
    }

    [ [ nodiscard ] ] _Ty * _Ptr ( ) noexcept {
        return reinterpret_cast < _Ty * > ( & _Storage );
    }
};
#line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
extern "C" inline void atomic_thread_fence(const memory_order _Order) noexcept { 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
::_Atomic_thread_fence(static_cast< unsigned>(_Order)); 
#line 336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
extern "C" inline void atomic_signal_fence(const memory_order _Order) noexcept { 
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
if (_Order != (memory_order_relaxed)) { 
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
__pragma(warning(push)) __pragma(warning(disable : 4996)) _ReadWriteBarrier(); __pragma(warning(pop)) 
#line 341 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty kill_dependency ( _Ty _Arg ) noexcept {
    return _Arg;
}
#line 349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void _Check_store_memory_order(const memory_order _Order) noexcept { 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
switch (_Order) { 
#line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_relaxed:  
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_release:  
#line 353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_seq_cst:  
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
break; 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_consume:  
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_acquire:  
#line 358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_acq_rel:  
#line 359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
default:  
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
; 
#line 361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
break; 
#line 362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void _Check_load_memory_order(const memory_order _Order) noexcept { 
#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
switch (_Order) { 
#line 367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_relaxed:  
#line 368 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_consume:  
#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_acquire:  
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_seq_cst:  
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
break; 
#line 373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_release:  
#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
case memory_order_acq_rel:  
#line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
default:  
#line 376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
; 
#line 377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
break; 
#line 378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 381 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
[[nodiscard]] inline memory_order _Combine_cas_memory_orders(const memory_order 
#line 382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Success, const memory_order _Failure) noexcept { 
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
static constexpr memory_order _Combined_memory_orders[6][6] = {{memory_order_relaxed, memory_order_consume, memory_order_acquire, memory_order_release, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_consume, memory_order_consume, memory_order_acquire, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_acquire, memory_order_acquire, memory_order_acquire, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_release, memory_order_acq_rel, memory_order_acq_rel, memory_order_release, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst}}; 
#line 408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Check_memory_order(static_cast< unsigned>(_Success)); 
#line 409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Check_load_memory_order(_Failure); 
#line 410 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
return (_Combined_memory_orders[static_cast< int>(_Success)])[static_cast< int>(_Failure)]; 
#line 411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 413 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Integral, class _Ty >
[ [ nodiscard ] ] _Integral _Atomic_reinterpret_as ( const _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    if constexpr ( is_integral_v < _Ty > && sizeof ( _Integral ) == sizeof ( _Ty ) ) {
        return static_cast < _Integral > ( _Source );
    } else if constexpr ( is_pointer_v < _Ty > && sizeof ( _Integral ) == sizeof ( _Ty ) ) {
        return reinterpret_cast < _Integral > ( _Source );
    } else {
        _Integral _Result { };
        :: memcpy ( & _Result, :: std :: addressof ( _Source ), sizeof ( _Source ) );
        return _Result;
    }
}
#line 429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< class _Ty> 
#line 430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
struct _Atomic_padded { 
#line 431 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
alignas(sizeof(_Ty)) mutable _Ty _Value; 
#line 432 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}; 
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< class _Ty> 
#line 475 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
struct _Atomic_storage_types { 
#line 476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using _TStorage = _Atomic_padded< _Ty> ; 
#line 477 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using _Spinlock = long; 
#line 478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}; 
#line 480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< class _Ty> 
#line 481 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
struct _Atomic_storage_types< _Ty &>  { 
#line 482 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using _TStorage = _Ty &; 
#line 483 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using _Spinlock = _Smtx_t *; 
#line 484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}; 
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty, size_t = sizeof ( remove_reference_t < _Ty > ) >



struct _Atomic_storage;
#line 523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void _Atomic_lock_acquire(long &_Spinlock) noexcept { 
#line 528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
int _Current_backoff = 1; 
#line 529 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
constexpr int _Max_backoff = 64; 
#line 530 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
while (_InterlockedExchange(&_Spinlock, 1) != (0)) { 
#line 531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
while (__iso_volatile_load32(&(reinterpret_cast< int &>(_Spinlock))) != 0) { 
#line 532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
for (int _Count_down = _Current_backoff; _Count_down != 0; --_Count_down) { 
#line 533 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_mm_pause(); 
#line 534 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 535 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Current_backoff = ((_Current_backoff < _Max_backoff) ? _Current_backoff << 1 : _Max_backoff); 
#line 536 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 537 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}  
#line 547 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 549 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void _Atomic_lock_release(long &_Spinlock) noexcept { 
#line 551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_InterlockedExchange(&_Spinlock, 0); 
#line 559 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void _Atomic_lock_acquire(_Smtx_t *_Spinlock) noexcept { 
#line 562 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Smtx_lock_exclusive(_Spinlock); 
#line 563 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 565 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void _Atomic_lock_release(_Smtx_t *_Spinlock) noexcept { 
#line 566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Smtx_unlock_exclusive(_Spinlock); 
#line 567 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 569 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Spinlock_t >
class [ [ nodiscard ] ] _Atomic_lock_guard {
public :
    explicit _Atomic_lock_guard ( _Spinlock_t & _Spinlock_ ) noexcept : _Spinlock ( _Spinlock_ ) {
        _Atomic_lock_acquire ( _Spinlock );
    }

    ~ _Atomic_lock_guard ( ) {
        _Atomic_lock_release ( _Spinlock );
    }

    _Atomic_lock_guard ( const _Atomic_lock_guard & ) = delete;
    _Atomic_lock_guard & operator = ( const _Atomic_lock_guard & ) = delete;

private :
    _Spinlock_t & _Spinlock;
};
#line 613 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty, size_t >
struct _Atomic_storage {



    using _TVal = remove_reference_t < _Ty >;
    using _Guard = _Atomic_lock_guard < typename _Atomic_storage_types < _Ty > :: _Spinlock >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage ( _Value ) {

    }

    void store ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        _Check_store_memory_order ( _Order );
        _Guard _Lock { _Spinlock };
        _Storage = _Value;
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order = memory_order_seq_cst ) const noexcept {

        _Check_load_memory_order ( _Order );
        _Guard _Lock { _Spinlock };
        _TVal _Local ( _Storage );
        return _Local;
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        _Check_memory_order ( static_cast < unsigned int > ( _Order ) );
        _Guard _Lock { _Spinlock };
        _TVal _Result ( _Storage );
        _Storage = _Value;
        return _Result;
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) );
        const auto _Storage_ptr = :: std :: addressof ( _Storage );
        const auto _Expected_ptr = :: std :: addressof ( _Expected );
        bool _Result;



        _Guard _Lock { _Spinlock };











        _Result = :: memcmp ( _Storage_ptr, _Expected_ptr, sizeof ( _TVal ) ) == 0;

        if ( _Result ) {
            :: memcpy ( _Storage_ptr, :: std :: addressof ( _Desired ), sizeof ( _TVal ) );
        } else {
            :: memcpy ( _Expected_ptr, _Storage_ptr, sizeof ( _TVal ) );
        }

        return _Result;
    }
















































protected :
    void _Init_spinlock_for_ref ( ) noexcept {
        _Spinlock = __std_atomic_get_mutex ( :: std :: addressof ( _Storage ) );
    }

private :

    mutable typename _Atomic_storage_types < _Ty > :: _Spinlock _Spinlock { };

public :
    _Ty _Storage { };





};
#line 749 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 1 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        const char _As_bytes = _Atomic_reinterpret_as < char > ( _Value );
        ( void ) _InterlockedExchange8 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        const char _As_bytes = _Atomic_reinterpret_as < char > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store8 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                      __pragma(warning(push))                                                                                                                                                              __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                    __pragma(warning(pop)); __iso_volatile_store8 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel :;;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        char _As_bytes = __iso_volatile_load8 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        char _As_bytes;



        _As_bytes = __iso_volatile_load8 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default :; break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        char _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange8 ( _Atomic_address_as < char > ( _Storage ), _Atomic_reinterpret_as < char > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Expected_bytes = _Atomic_reinterpret_as < char > ( _Expected );
        char _Prev_bytes;





















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange8 ( _Atomic_address_as < char > ( _Storage ), _Atomic_reinterpret_as < char > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        reinterpret_cast < char & > ( _Expected ) = _Prev_bytes;
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 857 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 2 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        const short _As_bytes = _Atomic_reinterpret_as < short > ( _Value );
        ( void ) _InterlockedExchange16 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        const short _As_bytes = _Atomic_reinterpret_as < short > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store16 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store16 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel :;;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        short _As_bytes = __iso_volatile_load16 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        short _As_bytes;



        _As_bytes = __iso_volatile_load16 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default :; break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        short _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange16 ( _Atomic_address_as < short > ( _Storage ), _Atomic_reinterpret_as < short > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Expected_bytes = _Atomic_reinterpret_as < short > ( _Expected );
        short _Prev_bytes;




















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange16 ( _Atomic_address_as < short > ( _Storage ), _Atomic_reinterpret_as < short > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _Ty ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 964 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 4 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        const int _As_bytes = _Atomic_reinterpret_as < int > ( _Value );
        ( void ) _InterlockedExchange ( reinterpret_cast < volatile long * > ( ( _Mem ) ), static_cast < long > ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        const int _As_bytes = _Atomic_reinterpret_as < int > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store32 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store32 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel :;;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        int _As_bytes = __iso_volatile_load32 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        int _As_bytes;



        _As_bytes = __iso_volatile_load32 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default :; break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        long _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange ( _Atomic_address_as < long > ( _Storage ), _Atomic_reinterpret_as < long > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Expected_bytes = _Atomic_reinterpret_as < long > ( _Expected );
        long _Prev_bytes;




















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange ( _Atomic_address_as < long > ( _Storage ), _Atomic_reinterpret_as < long > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _TVal ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 1071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 8 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        const long long _As_bytes = _Atomic_reinterpret_as < long long > ( _Value );
        ( void ) _InterlockedExchange64 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );;
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        const long long _As_bytes = _Atomic_reinterpret_as < long long > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store64 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store64 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel :;;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );



        long long _As_bytes = __iso_volatile_load64 ( _Mem );

        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        long long _As_bytes;







        _As_bytes = __iso_volatile_load64 ( _Mem );


        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default :; break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }











    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        long long _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange64 ( _Atomic_address_as < long long > ( _Storage ), _Atomic_reinterpret_as < long long > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }


    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Expected_bytes = _Atomic_reinterpret_as < long long > ( _Expected );
        long long _Prev_bytes;






















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange64 ( _Atomic_address_as < long long > ( _Storage ), _Atomic_reinterpret_as < long long > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _TVal ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 1202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty &, 16 > {

    using _TVal = remove_reference_t < _Ty & >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty & >, _Ty &, const _TVal > _Value ) noexcept
        : _Storage { _Value } { }

    void store ( const _TVal _Value ) noexcept {
        ( void ) exchange ( _Value );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        _Check_store_memory_order ( _Order );
        ( void ) exchange ( _Value, _Order );
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        long long * const _Storage_ptr = const_cast < long long * > ( _Atomic_address_as < const long long > ( _Storage ) );
        _Int128 _Result { };
        ( void ) __std_atomic_compare_exchange_128 ( _Storage_ptr, 0, 0, & _Result . _Low );
        return reinterpret_cast < _TVal & > ( _Result );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {























        _Check_load_memory_order ( _Order );
        return load ( );

    }

    _TVal exchange ( const _TVal _Value ) noexcept {
        _TVal _Result { _Value };
        while ( ! compare_exchange_strong ( _Result, _Value ) ) {
        }

        return _Result;
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order ) noexcept {
        _TVal _Result { _Value };
        while ( ! compare_exchange_strong ( _Result, _Value, _Order ) ) {
        }

        return _Result;
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        _Int128 _Desired_bytes { };
        :: memcpy ( & _Desired_bytes, :: std :: addressof ( _Desired ), sizeof ( _TVal ) );
        _Int128 _Expected_temp { };
        :: memcpy ( & _Expected_temp, :: std :: addressof ( _Expected ), sizeof ( _TVal ) );
        unsigned char _Result;







































        ( void ) _Order;
        _Result = __std_atomic_compare_exchange_128 (
            & reinterpret_cast < long long & > ( _Storage ), _Desired_bytes . _High, _Desired_bytes . _Low, & _Expected_temp . _Low );

        if ( _Result == 0 ) {
            :: memcpy ( :: std :: addressof ( _Expected ), & _Expected_temp, sizeof ( _TVal ) );
        }

        return _Result != 0;
    }









































    struct _Int128 {
        alignas ( 16 ) long long _Low;
        long long _High;
    };

    typename _Atomic_storage_types < _Ty & > :: _TStorage _Storage;
};
#line 1379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< class _Ty, size_t  = sizeof(_Ty)> struct _Atomic_integral; 
#line 1382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 1 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        return static_cast < _TVal > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), 1 ) );
    }

    _TVal operator ++ ( ) noexcept {
        unsigned char _Before =
            static_cast < unsigned char > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), 1 ) );
        ++ _Before;
        return static_cast < _TVal > ( _Before );
    }

    _TVal operator -- ( int ) noexcept {
        return static_cast < _TVal > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), - 1 ) );
    }

    _TVal operator -- ( ) noexcept {
        unsigned char _Before =
            static_cast < unsigned char > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), - 1 ) );
        -- _Before;
        return static_cast < _TVal > ( _Before );
    }
};
#line 1440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 2 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned short _After =
            static_cast < unsigned short > ( _InterlockedIncrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned short _After =
            static_cast < unsigned short > ( _InterlockedDecrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
    }
};
#line 1498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 4 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned long _After =
            static_cast < unsigned long > ( _InterlockedIncrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned long _After =
            static_cast < unsigned long > ( _InterlockedDecrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
    }
};
#line 1556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 8 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;























































    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned long long _After =
            static_cast < unsigned long long > ( _InterlockedIncrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned long long _After =
            static_cast < unsigned long long > ( _InterlockedDecrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
    }

};
#line 1670 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< size_t _TypeSize> constexpr bool 
#line 1671 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Is_always_lock_free = ((_TypeSize <= (8)) && ((_TypeSize & (_TypeSize - (1))) == (0))); 
#line 1682 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< class _Ty, bool _Is_lock_free = _Is_always_lock_free< sizeof(_Ty)> > constexpr bool 
#line 1683 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Deprecate_non_lock_free_volatile = true; 
#line 1685 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< class _Ty> constexpr bool 
#line 1686 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Deprecate_non_lock_free_volatile< _Ty, false>  = true; 
#line 1688 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_integral_facade : _Atomic_integral < _Ty > {

    using _Base = _Atomic_integral < _Ty >;
    using difference_type = _Ty;

    using _Base :: _Base;






    using _Base :: fetch_add;
    _Ty fetch_add ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand );
    }

    _Ty fetch_add ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand, _Order );
    }

    [ [ nodiscard ] ] static _Ty _Negate ( const _Ty _Value ) noexcept {
        return static_cast < _Ty > ( 0U - static_cast < make_unsigned_t < _Ty >> ( _Value ) );
    }

    _Ty fetch_sub ( const _Ty _Operand ) noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand ) volatile noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    using _Base :: fetch_and;
    _Ty fetch_and ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand, _Order );
    }

    using _Base :: fetch_or;
    _Ty fetch_or ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand );
    }

    _Ty fetch_or ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand, _Order );
    }

    using _Base :: fetch_xor;
    _Ty fetch_xor ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand );
    }

    _Ty fetch_xor ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand, _Order );
    }

    using _Base :: operator ++;
    _Ty operator ++ ( int ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( 0 );
    }

    _Ty operator ++ ( ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( );
    }

    using _Base :: operator --;
    _Ty operator -- ( int ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( 0 );
    }

    _Ty operator -- ( ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( );
    }

    _Ty operator += ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator += ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( fetch_sub ( _Operand ) - _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> fetch_sub ( _Operand ) - _Operand );
    }

    _Ty operator &= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator &= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_xor ( _Operand ) ^ _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand ) ^ _Operand );
    }
};
#line 1816 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_integral_facade < _Ty & > : _Atomic_integral < _Ty & > {

    using _Base = _Atomic_integral < _Ty & >;
    using difference_type = _Ty;

    using _Base :: _Base;

    [ [ nodiscard ] ] static _Ty _Negate ( const _Ty _Value ) noexcept {
        return static_cast < _Ty > ( 0U - static_cast < make_unsigned_t < _Ty >> ( _Value ) );
    }

    _Ty fetch_add ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand );
    }

    _Ty fetch_add ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand, _Order );
    }

    _Ty fetch_sub ( const _Ty _Operand ) const noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    _Ty operator ++ ( int ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( 0 );
    }

    _Ty operator ++ ( ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( );
    }

    _Ty operator -- ( int ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( 0 );
    }

    _Ty operator -- ( ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( );
    }

    _Ty operator += ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_sub ( _Operand ) - _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand, _Order );
    }

    _Ty fetch_or ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand );
    }

    _Ty fetch_or ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand, _Order );
    }

    _Ty fetch_xor ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand );
    }

    _Ty fetch_xor ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand, _Order );
    }

    _Ty operator &= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_xor ( _Operand ) ^ _Operand );
    }
};
#line 1996 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_pointer : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using difference_type = ptrdiff_t;

    using _Base :: _Base;

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order = memory_order_seq_cst ) noexcept {
        const ptrdiff_t _Shift_bytes =
            static_cast < ptrdiff_t > ( static_cast < size_t > ( _Diff ) * sizeof ( remove_pointer_t < _Ty > ) );
        ptrdiff_t _Result;




        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), _Shift_bytes );


        return reinterpret_cast < _Ty > ( _Result );
    }



    _Ty fetch_add ( const ptrdiff_t _Diff ) volatile noexcept {
        return const_cast < _Atomic_pointer * > ( this ) -> fetch_add ( _Diff );
    }

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_pointer * > ( this ) -> fetch_add ( _Diff, _Order );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty operator ++ ( int ) volatile noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( int ) noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( ) volatile noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator ++ ( ) noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator -- ( int ) volatile noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( int ) noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( ) volatile noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator -- ( ) noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }
};
#line 2092 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct _Atomic_pointer < _Ty & > : _Atomic_storage < _Ty & > {
    using _Base = _Atomic_storage < _Ty & >;
    using difference_type = ptrdiff_t;

    using _Base :: _Base;

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order = memory_order_seq_cst ) const noexcept {
        const ptrdiff_t _Shift_bytes =
            static_cast < ptrdiff_t > ( static_cast < size_t > ( _Diff ) * sizeof ( remove_pointer_t < _Ty > ) );
        ptrdiff_t _Result;




        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), _Shift_bytes );


        return reinterpret_cast < _Ty > ( _Result );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty operator ++ ( int ) const noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( ) const noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator -- ( int ) const noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( ) const noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }
};
#line 2149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< class _TVal, class _Ty = _TVal> using _Choose_atomic_base2_t = typename _Select< is_integral_v< _TVal>  && (!is_same_v< bool, _TVal> )> ::template _Apply< _Atomic_integral_facade< _Ty> , typename _Select< is_pointer_v< _TVal>  && is_object_v< remove_pointer_t< _TVal> > > ::template _Apply< _Atomic_pointer< _Ty> , _Atomic_storage< _Ty> > > ; 
#line 2160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template< class _TVal, class _Ty = _TVal> using _Choose_atomic_base_t = _Choose_atomic_base2_t< _TVal, _Ty> ; 
#line 2164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
struct atomic : _Choose_atomic_base_t < _Ty > {
private :
    using _Base = _Choose_atomic_base_t < _Ty >;

public :
    static_assert ( is_trivially_copyable_v < _Ty > && is_copy_constructible_v < _Ty > && is_move_constructible_v < _Ty >
                      && is_copy_assignable_v < _Ty > && is_move_assignable_v < _Ty >,
        "atomic<T> requires T to be trivially copyable, copy constructible, move constructible, copy assignable, and move assignable."
                              );

    using value_type = _Ty;

    using _Base :: _Base;

    constexpr atomic ( ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) : _Base ( ) { }

    atomic ( const atomic & ) = delete;
    atomic & operator = ( const atomic & ) = delete;






    [ [ nodiscard ] ] bool is_lock_free ( ) const volatile noexcept {
        constexpr bool _Result = sizeof ( _Ty ) <= 8 && ( sizeof ( _Ty ) & sizeof ( _Ty ) - 1 ) == 0;
        return _Result;
    }












    [ [ nodiscard ] ] bool is_lock_free ( ) const noexcept {
        return static_cast < const volatile atomic * > ( this ) -> is_lock_free ( );
    }

    _Ty operator = ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        this -> store ( _Value );
        return _Value;
    }

    _Ty operator = ( const _Ty _Value ) noexcept {
        this -> store ( _Value );
        return _Value;
    }






    using _Base :: store;
    void store ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        const_cast < atomic * > ( this ) -> _Base :: store ( _Value );
    }

    void store ( const _Ty _Value, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        const_cast < atomic * > ( this ) -> _Base :: store ( _Value, _Order );
    }

    using _Base :: load;
    [ [ nodiscard ] ] _Ty load ( ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < const atomic * > ( this ) -> _Base :: load ( );
    }

    [ [ nodiscard ] ] _Ty load ( const memory_order _Order ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < const atomic * > ( this ) -> _Base :: load ( _Order );
    }

    using _Base :: exchange;
    _Ty exchange ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: exchange ( _Value );
    }

    _Ty exchange ( const _Ty _Value, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: exchange ( _Value, _Order );
    }

    using _Base :: compare_exchange_strong;
    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired, const memory_order _Success,
        const memory_order _Failure ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_strong (
        _Ty & _Expected, const _Ty _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired ) volatile noexcept {

        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Success,
        const memory_order _Failure ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_weak (
        _Ty & _Expected, const _Ty _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }


















    operator _Ty ( ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> load ( );
    }

    operator _Ty ( ) const noexcept {
        return this -> load ( );
    }
};
#line 2452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
[ [ nodiscard ] ] bool atomic_is_lock_free ( const volatile atomic < _Ty > * _Mem ) noexcept {
    return _Mem -> is_lock_free ( );
}
#line 2457 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
[ [ nodiscard ] ] bool atomic_is_lock_free ( const atomic < _Ty > * _Mem ) noexcept {
    return _Mem -> is_lock_free ( );
}
#line 2462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
void atomic_store ( volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    _Mem -> store ( _Value );
}
#line 2468 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
void atomic_store ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    _Mem -> store ( _Value );
}
#line 2473 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
void atomic_store_explicit (
    volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    _Mem -> store ( _Value, _Order );
}
#line 2480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
void atomic_store_explicit ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    _Mem -> store ( _Value, _Order );
}
#line 2485 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
 void atomic_init (
    volatile atomic < _Ty > * const _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    :: std :: atomic_store_explicit ( _Mem, _Value, memory_order_relaxed );
}
#line 2492 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
 void atomic_init (
    atomic < _Ty > * const _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    :: std :: atomic_store_explicit ( _Mem, _Value, memory_order_relaxed );
}
#line 2498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load ( const volatile atomic < _Ty > * const _Mem ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> load ( );
}
#line 2504 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load ( const atomic < _Ty > * const _Mem ) noexcept {
    return _Mem -> load ( );
}
#line 2509 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load_explicit ( const volatile atomic < _Ty > * const _Mem, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> load ( _Order );
}
#line 2515 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load_explicit ( const atomic < _Ty > * const _Mem, const memory_order _Order ) noexcept {
    return _Mem -> load ( _Order );
}
#line 2520 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_exchange ( volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> exchange ( _Value );
}
#line 2526 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_exchange ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    return _Mem -> exchange ( _Value );
}
#line 2531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_exchange_explicit (
    volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> exchange ( _Value, _Order );
}
#line 2538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_exchange_explicit (
    atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    return _Mem -> exchange ( _Value, _Order );
}
#line 2544 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
bool atomic_compare_exchange_strong (
    volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
bool atomic_compare_exchange_strong (
    atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
bool atomic_compare_exchange_strong_explicit ( volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
bool atomic_compare_exchange_strong_explicit ( atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
bool atomic_compare_exchange_weak (
    volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2577 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
bool atomic_compare_exchange_weak (
    atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2583 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
bool atomic_compare_exchange_weak_explicit ( volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2590 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
bool atomic_compare_exchange_weak_explicit ( atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2596 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_add ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_add ( _Value );
}
#line 2602 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_add ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    return _Mem -> fetch_add ( _Value );
}
#line 2607 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_add_explicit ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value,
    const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_add ( _Value, _Order );
}
#line 2614 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_add_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_add ( _Value, _Order );
}
#line 2620 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_sub ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_sub ( _Value );
}
#line 2626 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_sub ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    return _Mem -> fetch_sub ( _Value );
}
#line 2631 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_sub_explicit ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value,
    const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_sub ( _Value, _Order );
}
#line 2638 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_sub_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_sub ( _Value, _Order );
}
#line 2644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_and ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_and ( _Value );
}
#line 2650 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_and ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_and ( _Value );
}
#line 2655 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_and_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_and ( _Value, _Order );
}
#line 2662 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_and_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_and ( _Value, _Order );
}
#line 2668 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_or ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_or ( _Value );
}
#line 2674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_or ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_or ( _Value );
}
#line 2679 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_or_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_or ( _Value, _Order );
}
#line 2686 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_or_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_or ( _Value, _Order );
}
#line 2692 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_xor ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_xor ( _Value );
}
#line 2698 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_xor ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_xor ( _Value );
}
#line 2703 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_xor_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_xor ( _Value, _Order );
}
#line 2710 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
template < class _Ty >
_Ty atomic_fetch_xor_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_xor ( _Value, _Order );
}
#line 2764 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_bool = atomic< bool> ; 
#line 2766 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_char = atomic< char> ; 
#line 2767 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_schar = atomic< signed char> ; 
#line 2768 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uchar = atomic< unsigned char> ; 
#line 2769 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_short = atomic< short> ; 
#line 2770 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_ushort = atomic< unsigned short> ; 
#line 2771 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int = atomic< int> ; 
#line 2772 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint = atomic< unsigned> ; 
#line 2773 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_long = atomic< long> ; 
#line 2774 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_ulong = atomic< unsigned long> ; 
#line 2775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_llong = atomic< __int64> ; 
#line 2776 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_ullong = atomic< unsigned __int64> ; 
#line 2781 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_char16_t = atomic< char16_t> ; 
#line 2782 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_char32_t = atomic< char32_t> ; 
#line 2783 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_wchar_t = atomic< __wchar_t> ; 
#line 2785 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int8_t = atomic< signed char> ; 
#line 2786 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint8_t = atomic< unsigned char> ; 
#line 2787 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int16_t = atomic< short> ; 
#line 2788 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint16_t = atomic< unsigned short> ; 
#line 2789 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int32_t = atomic< int> ; 
#line 2790 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint32_t = atomic< unsigned> ; 
#line 2791 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int64_t = atomic< __int64> ; 
#line 2792 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint64_t = atomic< unsigned __int64> ; 
#line 2794 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int_least8_t = atomic< signed char> ; 
#line 2795 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint_least8_t = atomic< unsigned char> ; 
#line 2796 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int_least16_t = atomic< short> ; 
#line 2797 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint_least16_t = atomic< unsigned short> ; 
#line 2798 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int_least32_t = atomic< int> ; 
#line 2799 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint_least32_t = atomic< unsigned> ; 
#line 2800 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int_least64_t = atomic< __int64> ; 
#line 2801 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint_least64_t = atomic< unsigned __int64> ; 
#line 2803 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int_fast8_t = atomic< signed char> ; 
#line 2804 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint_fast8_t = atomic< unsigned char> ; 
#line 2805 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int_fast16_t = atomic< int> ; 
#line 2806 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint_fast16_t = atomic< unsigned> ; 
#line 2807 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int_fast32_t = atomic< int> ; 
#line 2808 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint_fast32_t = atomic< unsigned> ; 
#line 2809 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_int_fast64_t = atomic< __int64> ; 
#line 2810 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uint_fast64_t = atomic< unsigned __int64> ; 
#line 2812 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_intptr_t = atomic< __int64> ; 
#line 2813 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uintptr_t = atomic< unsigned __int64> ; 
#line 2814 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_size_t = atomic< unsigned __int64> ; 
#line 2815 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_ptrdiff_t = atomic< __int64> ; 
#line 2816 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_intmax_t = atomic< __int64> ; 
#line 2817 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
using atomic_uintmax_t = atomic< unsigned __int64> ; 
#line 2829 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
struct atomic_flag { 
#line 2840 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
bool test_and_set(const memory_order _Order = memory_order_seq_cst) noexcept { 
#line 2841 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
return (_Storage).exchange(true, _Order) != (0); 
#line 2842 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2844 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
bool test_and_set(const memory_order _Order = memory_order_seq_cst) volatile noexcept { 
#line 2845 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
return (_Storage).exchange(true, _Order) != (0); 
#line 2846 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2848 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
void clear(const memory_order _Order = memory_order_seq_cst) noexcept { 
#line 2849 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
(_Storage).store(false, _Order); 
#line 2850 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
void clear(const memory_order _Order = memory_order_seq_cst) volatile noexcept { 
#line 2853 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
(_Storage).store(false, _Order); 
#line 2854 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2856 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
constexpr atomic_flag() noexcept = default;
#line 2885 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
atomic< long>  _Storage; 
#line 2889 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}; 
#line 2911 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline bool atomic_flag_test_and_set(atomic_flag *const _Flag) noexcept { 
#line 2912 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
return _Flag->test_and_set(); 
#line 2913 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2915 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline bool atomic_flag_test_and_set(volatile atomic_flag *const _Flag) noexcept { 
#line 2916 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
return _Flag->test_and_set(); 
#line 2917 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2919 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline bool atomic_flag_test_and_set_explicit(atomic_flag *const 
#line 2920 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Flag, const memory_order _Order) noexcept { 
#line 2921 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
return _Flag->test_and_set(_Order); 
#line 2922 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2924 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline bool atomic_flag_test_and_set_explicit(volatile atomic_flag *const 
#line 2925 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Flag, const memory_order _Order) noexcept { 
#line 2926 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
return _Flag->test_and_set(_Order); 
#line 2927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2929 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void atomic_flag_clear(atomic_flag *const _Flag) noexcept { 
#line 2930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Flag->clear(); 
#line 2931 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2933 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void atomic_flag_clear(volatile atomic_flag *const _Flag) noexcept { 
#line 2934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Flag->clear(); 
#line 2935 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2937 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void atomic_flag_clear_explicit(atomic_flag *const _Flag, const memory_order _Order) noexcept { 
#line 2938 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Flag->clear(_Order); 
#line 2939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 2941 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
inline void atomic_flag_clear_explicit(volatile atomic_flag *const 
#line 2942 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Flag, const memory_order _Order) noexcept { 
#line 2943 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
_Flag->clear(_Order); 
#line 2944 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
} 
#line 3045 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
}
#line 3071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\atomic"
#pragma warning(pop)
#pragma pack ( pop )
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
namespace std { 
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
enum class io_errc { 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
stream = 1
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template< class _Enum> 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
struct is_error_code_enum : public false_type { }; 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template< class _Ty> constexpr bool 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
is_error_code_enum_v = (is_error_code_enum< _Ty> ::value); 
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template< class _Enum> 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
struct is_error_condition_enum : public false_type { }; 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template<> struct is_error_condition_enum< errc>  : public true_type { }; 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template< class _Ty> constexpr bool 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
is_error_condition_enum_v = (is_error_condition_enum< _Ty> ::value); 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class error_code; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class error_condition; 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
namespace _Ensure_adl { 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
inline void make_error_code() = delete;
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
inline void make_error_condition() = delete;
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class error_category; 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline const error_category &generic_category() noexcept; 
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline const error_category &iostream_category() noexcept; 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline const error_category &system_category() noexcept; 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class __declspec(novtable) error_category { 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
#pragma warning(push)
#pragma warning(disable : 4355)
public: constexpr error_category() noexcept : _Addr(this) { } 
#pragma warning(pop)
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
virtual ~error_category() noexcept = default;
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual const char *name() const noexcept = 0; 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual string message(int _Errval) const = 0; 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline virtual error_condition default_error_condition(int _Errval) const noexcept; 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline virtual bool equivalent(int _Errval, const error_condition & _Cond) const noexcept; 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline virtual bool equivalent(const error_code & _Code, int _Errval) const noexcept; 
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] bool operator==(const error_category &_Right) const noexcept { 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Bit_cast< unsigned __int64> (_Addr) == _Bit_cast< unsigned __int64> (_Right._Addr); 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] bool operator!=(const error_category &_Right) const noexcept { 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return !((*this) == _Right); 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] bool operator<(const error_category &_Right) const noexcept { 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Bit_cast< unsigned __int64> (_Addr) < _Bit_cast< unsigned __int64> (_Right._Addr); 
#line 124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
error_category(const error_category &) = delete;
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
error_category &operator=(const error_category &) = delete;
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
protected: union _Addr_storage { 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
private: uintptr_t _Num; 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
error_category *_Ptr; 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
public: constexpr explicit _Addr_storage(const uintptr_t _Addr_num) noexcept : _Num(_Addr_num) { } 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
constexpr explicit _Addr_storage(error_category *const _Addr_ptr) noexcept : _Ptr(_Addr_ptr) { } 
#line 144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
constexpr _Addr_storage &operator=(const uintptr_t _Addr_num) noexcept { 
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Num) = _Addr_num; 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return *this; 
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_Addr_storage _Addr; 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
constexpr explicit error_category(const uintptr_t _Addr_) noexcept : _Addr(_Addr_) { } 
#line 157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
enum: uintptr_t { 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_Future_addr = 1Ui64, 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_Generic_addr = 3Ui64, 
#line 160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_Iostream_addr = 5Ui64, 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_System_addr = 7Ui64
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline bool _System_error_equal(const error_code &, const error_condition &) noexcept; 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class error_code { 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
public: error_code() noexcept : _Myval(0), _Mycat(&::std::system_category()) { } 
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
error_code(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) { } 
#line 175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template < class _Enum, enable_if_t < is_error_code_enum_v < _Enum >, int > = 0 >
    error_code ( _Enum _Errcode ) noexcept : _Myval ( 0 ), _Mycat ( nullptr ) {
        using _Ensure_adl :: make_error_code;
        * this = make_error_code ( _Errcode );
    }
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
void assign(int _Val, const error_category &_Cat) noexcept { 
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Myval) = _Val; 
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Mycat) = (&_Cat); 
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template < class _Enum, enable_if_t < is_error_code_enum_v < _Enum >, int > = 0 >
    error_code & operator = ( _Enum _Errcode ) noexcept {
        using _Ensure_adl :: make_error_code;
        * this = make_error_code ( _Errcode );
        return * this;
    }
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
void clear() noexcept { 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Myval) = 0; 
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Mycat) = (&::std::system_category()); 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] int value() const noexcept { 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Myval; 
#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] const error_category &category() const noexcept { 
#line 203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return *(_Mycat); 
#line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline error_condition default_error_condition() const noexcept; 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] string message() const { 
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return this->category().message(this->value()); 
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
explicit operator bool() const noexcept { 
#line 213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return this->value() != 0; 
#line 214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator==(const error_code &_Left, const error_code &_Right) noexcept { 
#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator==(const error_code &_Left, const std::error_condition &_Right) noexcept { 
#line 222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _System_error_equal(_Left, _Right); 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator<(const error_code &_Left, const error_code &_Right) noexcept { 
#line 234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator==(const std::error_condition &_Left, const error_code &_Right) noexcept { 
#line 240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _System_error_equal(_Right, _Left); 
#line 241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 243 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator!=(const error_code &_Left, const error_code &_Right) noexcept { 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return !(_Left == _Right); 
#line 245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator!=(const error_code &_Left, const std::error_condition &_Right) noexcept { 
#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return !_System_error_equal(_Left, _Right); 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator!=(const std::error_condition &_Left, const error_code &_Right) noexcept { 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return !_System_error_equal(_Right, _Left); 
#line 253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
private: int _Myval; 
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
const error_category *_Mycat; 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class error_condition { 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
public: error_condition() noexcept : _Myval(0), _Mycat(&::std::generic_category()) { } 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
error_condition(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) { } 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template < class _Enum, enable_if_t < is_error_condition_enum_v < _Enum >, int > = 0 >
    error_condition ( _Enum _Errcode ) noexcept : _Myval ( 0 ), _Mycat ( nullptr ) {
        using _Ensure_adl :: make_error_condition;
        * this = make_error_condition ( _Errcode );
    }
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
void assign(int _Val, const error_category &_Cat) noexcept { 
#line 275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Myval) = _Val; 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Mycat) = (&_Cat); 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template < class _Enum, enable_if_t < is_error_condition_enum_v < _Enum >, int > = 0 >
    error_condition & operator = ( _Enum _Errcode ) noexcept {
        using _Ensure_adl :: make_error_condition;
        * this = make_error_condition ( _Errcode );
        return * this;
    }
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
void clear() noexcept { 
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Myval) = 0; 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
(_Mycat) = (&::std::generic_category()); 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] int value() const noexcept { 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Myval; 
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] const error_category &category() const noexcept { 
#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return *(_Mycat); 
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] string message() const { 
#line 300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return this->category().message(this->value()); 
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
explicit operator bool() const noexcept { 
#line 304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return this->value() != 0; 
#line 305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator==(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator<(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 322 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator!=(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 328 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return !(_Left == _Right); 
#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator==(const std::error_code & _Left, const error_condition & _Right) noexcept; 
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator==(const error_condition & _Left, const std::error_code & _Right) noexcept; 
#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator!=(const std::error_code & _Left, const error_condition & _Right) noexcept; 
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
friend inline bool operator!=(const error_condition & _Left, const std::error_code & _Right) noexcept; 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
private: int _Myval; 
#line 345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
const error_category *_Mycat; 
#line 346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline bool _System_error_equal(const error_code &_Left, const error_condition &_Right) noexcept { 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Left.category().equivalent(_Left.value(), _Right) || _Right.category().equivalent(_Left, _Right.value()); 
#line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline error_condition error_category::default_error_condition(int _Errval) const noexcept { 
#line 417 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return error_condition(_Errval, *this); 
#line 418 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline bool error_category::equivalent(int _Errval, const error_condition &_Cond) const noexcept { 
#line 421 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return ((this->default_error_condition(_Errval)) == _Cond); 
#line 422 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 424 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline bool error_category::equivalent(const error_code &_Code, int _Errval) const noexcept { 
#line 425 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return ((*this) == (_Code.category())) && (_Code.value() == _Errval); 
#line 426 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 428 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline error_condition error_code::default_error_condition() const noexcept { 
#line 430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return this->category().default_error_condition(this->value()); 
#line 431 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline error_code make_error_code(errc _Ec) noexcept { 
#line 434 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return error_code(static_cast< int>(_Ec), ::std::generic_category()); 
#line 435 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline error_code make_error_code(io_errc _Ec) noexcept { 
#line 438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return error_code(static_cast< int>(_Ec), ::std::iostream_category()); 
#line 439 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 441 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline error_condition make_error_condition(errc _Ec) noexcept { 
#line 442 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return error_condition(static_cast< int>(_Ec), ::std::generic_category()); 
#line 443 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 445 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline error_condition make_error_condition(io_errc _Ec) noexcept { 
#line 446 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return error_condition(static_cast< int>(_Ec), ::std::iostream_category()); 
#line 447 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 450 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template<> struct hash< error_code>  { 
#line 451 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
using argument_type = error_code; 
#line 452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
using result_type = size_t; 
#line 454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] size_t operator()(const error_code &_Keyval) const noexcept { 
#line 455 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return std::hash< int> {}(_Keyval.value()); 
#line 456 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 457 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 460 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template<> struct hash< error_condition>  { 
#line 461 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
using argument_type = error_condition; 
#line 462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
using result_type = size_t; 
#line 464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] size_t operator()(const error_condition &_Keyval) const noexcept { 
#line 465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return std::hash< int> {}(_Keyval.value()); 
#line 466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 467 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 469 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class _System_error : public runtime_error { 
#line 471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
static string _Makestr(error_code _Errcode, string _Message) { 
#line 472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
if (!_Message.empty()) { 
#line 473 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_Message.append(": "); 
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}  
#line 476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_Message.append(_Errcode.message()); 
#line 477 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Message; 
#line 478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 481 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
protected: _System_error(error_code _Errcode) : runtime_error(_Errcode.message()), _Mycode(_Errcode) { } 
#line 483 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_System_error(error_code _Errcode, const string &_Message) : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) 
#line 484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
{ } 
#line 486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
error_code _Mycode; 
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class system_error : public _System_error { 
#line 491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
using _Mybase = _System_error; 
#line 494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
public: system_error(error_code _Errcode) : _Mybase(_Errcode) { } 
#line 496 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
system_error(error_code _Errcode, const string &_Message) : _Mybase(_Errcode, _Message) { } 
#line 498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
system_error(error_code _Errcode, const char *_Message) : _Mybase(_Errcode, _Message) { } 
#line 500 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat) : _Mybase(error_code(_Errval, _Errcat)) { } 
#line 502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat, const string &_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 503 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
{ } 
#line 505 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
system_error(int _Errval, const error_category &_Errcat, const char *_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
{ } 
#line 508 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] const error_code &code() const noexcept { 
#line 509 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Mycode; 
#line 510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 518 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 520 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[noreturn]] inline void _Throw_system_error(const errc _Ec) { 
#line 521 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
throw system_error{::std::make_error_code(_Ec)}; 
#line 522 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
const char *__cdecl _Syserror_map(int); 
#line 525 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
int __cdecl _Winerror_map(int); 
#line 527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
struct _System_error_message { 
#line 528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
char *_Str; 
#line 529 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
size_t _Length; 
#line 531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
explicit _System_error_message(const unsigned long _Ec) noexcept : _Str((nullptr)), _Length(::__std_system_error_allocate_message(_Ec, &(_Str))) 
#line 532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
{ } 
#line 534 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_System_error_message(const _System_error_message &) = delete;
#line 535 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
_System_error_message &operator=(const _System_error_message &) = delete;
#line 537 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
~_System_error_message() { 
#line 538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
::__std_system_error_deallocate_message(_Str); 
#line 539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 540 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 542 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class _Generic_error_category : public error_category { 
#line 544 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
public: constexpr _Generic_error_category() noexcept : error_category(_Generic_addr) { } 
#line 546 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 547 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return "generic"; 
#line 548 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 550 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Syserror_map(_Errcode); 
#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 553 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class _Iostream_error_category2 : public error_category { 
#line 557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
public: constexpr _Iostream_error_category2() noexcept : error_category(_Iostream_addr) { } 
#line 559 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 560 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return "iostream"; 
#line 561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 563 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
if (_Errcode == (static_cast< int>(io_errc::stream))) { 
#line 565 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
static constexpr char _Iostream_error[] = "iostream stream error"; 
#line 566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
constexpr size_t _Iostream_error_length = (sizeof _Iostream_error - (1)); 
#line 567 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return string{_Iostream_error, _Iostream_error_length}; 
#line 568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} else { 
#line 569 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Syserror_map(_Errcode); 
#line 570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}  
#line 571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 572 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 574 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
class _System_error_category : public error_category { 
#line 576 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
public: constexpr _System_error_category() noexcept : error_category(_System_addr) { } 
#line 578 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 579 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return "system"; 
#line 580 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 582 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 583 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
const _System_error_message _Msg(static_cast< unsigned long>(_Errcode)); 
#line 584 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
if ((_Msg._Length) == (0)) { 
#line 585 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
static constexpr char _Unknown_error[] = "unknown error"; 
#line 586 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
constexpr size_t _Unknown_error_length = (sizeof _Unknown_error - (1)); 
#line 587 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return string{_Unknown_error, _Unknown_error_length}; 
#line 588 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} else { 
#line 589 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
; 
#line 590 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return string{_Msg._Str, _Msg._Length}; 
#line 591 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}  
#line 592 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 594 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] virtual error_condition default_error_condition(int _Errval) const noexcept override { 
#line 595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
if (_Errval == 0) { 
#line 596 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return error_condition(0, ::std::generic_category()); 
#line 597 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}  
#line 600 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
const int _Posv = _Winerror_map(_Errval); 
#line 601 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
if (_Posv == 0) { 
#line 602 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return error_condition(_Errval, ::std::system_category()); 
#line 603 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} else { 
#line 604 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return error_condition(_Posv, ::std::generic_category()); 
#line 605 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}  
#line 606 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 607 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}; 
#line 658 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template < class _Ty >
struct _Constexpr_immortalize_impl {
    union {
        _Ty _Storage;
    };

    constexpr _Constexpr_immortalize_impl ( ) noexcept : _Storage { } { }

    _Constexpr_immortalize_impl ( const _Constexpr_immortalize_impl & ) = delete;
    _Constexpr_immortalize_impl & operator = ( const _Constexpr_immortalize_impl & ) = delete;

     ~ _Constexpr_immortalize_impl ( ) {

    }
};
#line 674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
template < class _Ty >
[ [ nodiscard ] ] const _Ty & _Immortalize_memcpy_image ( ) noexcept {
    static _Constexpr_immortalize_impl < _Ty > _Static;
    return _Static . _Storage;
}
#line 700 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline const error_category &generic_category() noexcept { 
#line 701 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Immortalize_memcpy_image< _Generic_error_category> (); 
#line 702 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 704 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline const error_category &iostream_category() noexcept { 
#line 705 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Immortalize_memcpy_image< _Iostream_error_category2> (); 
#line 706 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 708 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
[[nodiscard]] inline const error_category &system_category() noexcept { 
#line 709 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
return _Immortalize_memcpy_image< _System_error_category> (); 
#line 710 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
} 
#line 711 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
}
#line 742 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\system_error"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
#pragma warning(disable : 4275)
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
#pragma pack ( push, 8 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
extern "C++" {
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
struct __type_info_node; 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
extern __type_info_node __type_info_root_node; 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
struct __std_type_info_data { 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
const char *_UndecoratedName; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
const char _DecoratedName[1]; 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
__std_type_info_data() = delete;
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
__std_type_info_data(const __std_type_info_data &) = delete;
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
__std_type_info_data(__std_type_info_data &&) = delete;
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
__std_type_info_data &operator=(const __std_type_info_data &) = delete;
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
__std_type_info_data &operator=(__std_type_info_data &&) = delete;
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}; 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
int __cdecl __std_type_info_compare(const __std_type_info_data * _Lhs, const __std_type_info_data * _Rhs); 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
size_t __cdecl __std_type_info_hash(const __std_type_info_data * _Data); 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
const char *__cdecl __std_type_info_name(__std_type_info_data * _Data, __type_info_node * _RootNode); 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}__pragma(pack ( pop )) 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4577)
extern "C++" {
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
class type_info { 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
public: type_info(const type_info &) = delete;
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
type_info &operator=(const type_info &) = delete;
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
[[nodiscard]] size_t hash_code() const noexcept 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return __std_type_info_hash(&(_Data)); 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
[[nodiscard]] bool 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
operator==(const type_info &_Other) const noexcept 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 98 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) == 0; 
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
[[nodiscard]] bool operator!=(const type_info &_Other) const noexcept 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) != 0; 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
[[nodiscard]] bool before(const type_info &_Other) const noexcept 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) < 0; 
#line 111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
[[nodiscard]] const char *name() const noexcept 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return __std_type_info_name(&(_Data), &__type_info_root_node); 
#line 120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
[[nodiscard]] const char *raw_name() const noexcept 
#line 123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return (_Data)._DecoratedName; 
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
virtual ~type_info() noexcept; 
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
private: mutable __std_type_info_data _Data; 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}; 
#line 133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}
#pragma warning(pop)
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
namespace std { 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
using ::type_info;
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}
#line 142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
namespace std { 
#line 144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4577)
class bad_cast : public exception { 
#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
public: bad_cast() noexcept : exception("bad cast", 1) 
#line 153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
static bad_cast __construct_from_string_literal(const char *const _Message) noexcept 
#line 157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return bad_cast(_Message, 1); 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
private: bad_cast(const char *const _Message, int) noexcept : exception(_Message, 1) 
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}; 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
class bad_typeid : public exception { 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
public: bad_typeid() noexcept : exception("bad typeid", 1) 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
static bad_typeid __construct_from_string_literal(const char *const _Message) noexcept 
#line 180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return bad_typeid(_Message, 1); 
#line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
friend class __non_rtti_object; 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
private: bad_typeid(const char *const _Message, int) noexcept : exception(_Message, 1) 
#line 190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}; 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
class __non_rtti_object : public bad_typeid { 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
public: static __non_rtti_object __construct_from_string_literal(const char *const _Message) noexcept 
#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
return __non_rtti_object(_Message, 1); 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
private: __non_rtti_object(const char *const _Message, int) noexcept : bad_typeid(_Message, 1) 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
{ 
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
} 
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
}; 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
#pragma warning(pop)
}
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\vcruntime_typeinfo.h"
#pragma pack ( pop )
#pragma warning(pop)
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
class type_info; 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
namespace std { 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
constexpr int _Small_object_num_ptrs = ((6) + ((16) / sizeof(void *))); 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
class bad_cast; 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
class bad_typeid; 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
[[noreturn]] inline void _Throw_bad_cast() { 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
throw bad_cast{}; 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
} 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
}
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\typeinfo"
#pragma pack ( pop )
#pragma warning(pop)
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
namespace std { 
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _InIt, class _Diff, class _NoThrowFwdIt >
_NoThrowFwdIt uninitialized_copy_n ( const _InIt _First, const _Diff _Count_raw, _NoThrowFwdIt _Dest ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( _Count <= 0 ) {
        return _Dest;
    }

    auto _UFirst = _Get_unwrapped_n ( _First, _Count );
    auto _UDest = _Get_unwrapped_n ( _Dest, _Count );
    if constexpr ( _Iter_copy_cat < decltype ( _UFirst ), decltype ( _UDest ) > :: _Bitcopy_constructible ) {
        _UDest = _Copy_memmove_n ( _UFirst, static_cast < size_t > ( _Count ), _UDest );
    } else {
        _Uninitialized_backout < decltype ( _UDest ) > _Backout { _UDest };

        for (; _Count > 0; -- _Count, ( void ) ++ _UFirst ) {
            _Backout . _Emplace_back ( * _UFirst );
        }

        _UDest = _Backout . _Release ( );
    }

    _Seek_wrapped ( _Dest, _UDest );
    return _Dest;
}
#line 431 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _NoThrowFwdIt, class _Diff, class _Tval >
_NoThrowFwdIt uninitialized_fill_n ( _NoThrowFwdIt _First, const _Diff _Count_raw, const _Tval & _Val ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( _Count <= 0 ) {
        return _First;
    }

    auto _UFirst = _Get_unwrapped_n ( _First, _Count );
    if constexpr ( _Fill_memset_is_safe < decltype ( _UFirst ), _Tval > ) {
        _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _Count ) );
        _UFirst += _Count;
    } else {
        if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UFirst ), _Tval > ) {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _Count ) );
                _Seek_wrapped ( _First, _UFirst + _Count );
                return _First;
            }
        }

        _Uninitialized_backout < decltype ( _UFirst ) > _Backout { _UFirst };

        for (; _Count > 0; -- _Count ) {
            _Backout . _Emplace_back ( _Val );
        }

        _UFirst = _Backout . _Release ( );
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 920 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _OutIt, class _Ty >
class raw_storage_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;

    explicit raw_storage_iterator ( _OutIt _First ) : _Next ( _First ) { }

    [ [ nodiscard ] ] raw_storage_iterator & operator * ( ) {
        return * this;
    }

    raw_storage_iterator & operator = ( const _Ty & _Val ) {
        :: std :: _Construct_in_place ( const_cast < _Remove_cvref_t < decltype ( * _Next ) > & > ( * _Next ), _Val );
        return * this;
    }

    raw_storage_iterator & operator = ( _Ty && _Val ) {
        :: std :: _Construct_in_place ( const_cast < _Remove_cvref_t < decltype ( * _Next ) > & > ( * _Next ), :: std :: move ( _Val ) );
        return * this;
    }

    raw_storage_iterator & operator ++ ( ) {
        ++ _Next;
        return * this;
    }

    raw_storage_iterator operator ++ ( int ) {
        raw_storage_iterator _Ans = * this;
        ++ _Next;
        return _Ans;
    }

    [ [ nodiscard ] ] _OutIt base ( ) const {
        return _Next;
    }

private :
    _OutIt _Next;
};
#line 970 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class auto_ptr;
#line 973 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
struct auto_ptr_ref {
    explicit auto_ptr_ref ( _Ty * _Right ) : _Ref ( _Right ) { }

    _Ty * _Ref;
};
#line 980 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class auto_ptr {
public :
    using element_type = _Ty;

    explicit auto_ptr ( _Ty * _Ptr = nullptr ) noexcept : _Myptr ( _Ptr ) { }

    auto_ptr ( auto_ptr & _Right ) noexcept : _Myptr ( _Right . release ( ) ) { }

    auto_ptr ( auto_ptr_ref < _Ty > _Right ) noexcept {
        _Ty * _Ptr = _Right . _Ref;
        _Right . _Ref = nullptr;
        _Myptr = _Ptr;
    }

    template < class _Other >
    operator auto_ptr < _Other > ( ) noexcept {
        return auto_ptr < _Other > ( * this );
    }

    template < class _Other >
    operator auto_ptr_ref < _Other > ( ) noexcept {
        _Other * _Cvtptr = _Myptr;
        auto_ptr_ref < _Other > _Ans ( _Cvtptr );
        _Myptr = nullptr;
        return _Ans;
    }

    template < class _Other >
    auto_ptr & operator = ( auto_ptr < _Other > & _Right ) noexcept {
        reset ( _Right . release ( ) );
        return * this;
    }

    template < class _Other >
    auto_ptr ( auto_ptr < _Other > & _Right ) noexcept : _Myptr ( _Right . release ( ) ) { }

    auto_ptr & operator = ( auto_ptr & _Right ) noexcept {
        reset ( _Right . release ( ) );
        return * this;
    }

    auto_ptr & operator = ( auto_ptr_ref < _Ty > _Right ) noexcept {
        _Ty * _Ptr = _Right . _Ref;
        _Right . _Ref = 0;
        reset ( _Ptr );
        return * this;
    }

    ~ auto_ptr ( ) noexcept {
        delete _Myptr;
    }

    [ [ nodiscard ] ] _Ty & operator * ( ) const noexcept {




        return * get ( );
    }

    [ [ nodiscard ] ] _Ty * operator -> ( ) const noexcept {




        return get ( );
    }

    [ [ nodiscard ] ] _Ty * get ( ) const noexcept {
        return _Myptr;
    }

    _Ty * release ( ) noexcept {
        _Ty * _Tmp = _Myptr;
        _Myptr = nullptr;
        return _Tmp;
    }

    void reset ( _Ty * _Ptr = nullptr ) noexcept {
        if ( _Ptr != _Myptr ) {
            delete _Myptr;
        }

        _Myptr = _Ptr;
    }

private :
    _Ty * _Myptr;
};
#line 1072 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
#pragma pack(8)
template<> 
#line 1072 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
class auto_ptr< void>  { 
#line 1074 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
public: using element_type = void; 
#line 1075 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#pragma pack()
#line 1078 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
#pragma pack(8)
#line 1078 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
class bad_weak_ptr : public exception { 
#line 1080 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
public: bad_weak_ptr() noexcept { } 
#line 1082 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
[[nodiscard]] virtual const char *what() const noexcept override { 
#line 1084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
return "bad_weak_ptr"; 
#line 1085 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1086 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#pragma pack()
[[noreturn]] inline void _Throw_bad_weak_ptr() { 
#line 1089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
throw bad_weak_ptr{}; 
#line 1090 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1092 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
#pragma pack(8)
#line 1092 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
class __declspec(novtable) _Ref_count_base { 
#line 1104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
virtual void _Destroy() noexcept = 0; 
#line 1105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
virtual void _Delete_this() noexcept = 0; 
#line 1108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_Atomic_counter_t _Uses = (1); 
#line 1109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_Atomic_counter_t _Weaks = (1); 
#line 1112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
protected: constexpr _Ref_count_base() noexcept = default;
#line 1115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
public: _Ref_count_base(const _Ref_count_base &) = delete;
#line 1116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_Ref_count_base &operator=(const _Ref_count_base &) = delete;
#line 1118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
virtual ~_Ref_count_base() noexcept { } 
#line 1120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
bool _Incref_nz() noexcept { 
#line 1121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
auto &_Volatile_uses = reinterpret_cast< volatile long &>(_Uses); 
#line 1125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
long _Count = __iso_volatile_load32(reinterpret_cast< volatile int *>(&_Volatile_uses)); 
#line 1127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
while (_Count != (0)) { 
#line 1128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
const long _Old_value = _InterlockedCompareExchange(&_Volatile_uses, _Count + (1), _Count); 
#line 1129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
if (_Old_value == _Count) { 
#line 1130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
return true; 
#line 1131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}  
#line 1133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_Count = _Old_value; 
#line 1134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}  
#line 1136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
return false; 
#line 1137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
void _Incref() noexcept { 
#line 1140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Uses))); 
#line 1141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
void _Incwref() noexcept { 
#line 1144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Weaks))); 
#line 1145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
void _Decref() noexcept { 
#line 1148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Uses))) == (0)) { 
#line 1149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
this->_Destroy(); 
#line 1150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
this->_Decwref(); 
#line 1151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}  
#line 1152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
void _Decwref() noexcept { 
#line 1155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Weaks))) == (0)) { 
#line 1156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
this->_Delete_this(); 
#line 1157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}  
#line 1158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
long _Use_count() const noexcept { 
#line 1161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
return static_cast< long>(_Uses); 
#line 1162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
virtual void *_Get_deleter(const type_info &) const noexcept { 
#line 1165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
return nullptr; 
#line 1166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 1167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#pragma pack()
template < class _Ty >
class _Ref_count : public _Ref_count_base {
public :
    explicit _Ref_count ( _Ty * _Px ) : _Ref_count_base ( ), _Ptr ( _Px ) { }

private :
    void _Destroy ( ) noexcept override {
        delete _Ptr;
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }

    _Ty * _Ptr;
};
#line 1186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Resource, class _Dx >
class _Ref_count_resource : public _Ref_count_base {
public :
    _Ref_count_resource ( _Resource _Px, _Dx _Dt )
        : _Ref_count_base ( ), _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Px ) { }

    ~ _Ref_count_resource ( ) noexcept override = default;

    void * _Get_deleter ( const type_info & _Typeid ) const noexcept override {

        if ( _Typeid == typeid ( _Dx ) ) {
            return const_cast < _Dx * > ( :: std :: addressof ( _Mypair . _Get_first ( ) ) );
        }




        return nullptr;
    }

private :
    void _Destroy ( ) noexcept override {
        _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }

    _Compressed_pair < _Dx, _Resource > _Mypair;
};
#line 1218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Resource, class _Dx, class _Alloc >
class _Ref_count_resource_alloc : public _Ref_count_base {

public :
    _Ref_count_resource_alloc ( _Resource _Px, _Dx _Dt, const _Alloc & _Ax )
        : _Ref_count_base ( ),
          _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _One_then_variadic_args_t { }, _Ax, _Px ) { }

    ~ _Ref_count_resource_alloc ( ) noexcept override = default;

    void * _Get_deleter ( const type_info & _Typeid ) const noexcept override {

        if ( _Typeid == typeid ( _Dx ) ) {
            return const_cast < _Dx * > ( :: std :: addressof ( _Mypair . _Get_first ( ) ) );
        }




        return nullptr;
    }

private :
    using _Myalty = _Rebind_alloc_t < _Alloc, _Ref_count_resource_alloc >;

    void _Destroy ( ) noexcept override {
        _Mypair . _Get_first ( ) ( _Mypair . _Myval2 . _Myval2 );
    }

    void _Delete_this ( ) noexcept override {
        _Myalty _Al = _Mypair . _Myval2 . _Get_first ( );
        this -> ~ _Ref_count_resource_alloc ( );
        _Deallocate_plain ( _Al, this );
    }

    _Compressed_pair < _Dx, _Compressed_pair < _Myalty, _Resource >> _Mypair;
};
#line 1256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
struct default_delete;
#line 1259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx = default_delete < _Ty > >
class unique_ptr;
#line 1262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class shared_ptr;
#line 1265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class weak_ptr;
#line 1268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty, class  = void> 
#line 1269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_enable_shared : public false_type { }; 
#line 1271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty> 
#line 1272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_enable_shared< _Yty, void_t< typename _Yty::_Esft_type> >  : public is_convertible< remove_cv_t< _Yty>  *, typename _Yty::_Esft_type *> ::type { 
#line 1275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 1277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Exception_ptr_access; 
#line 1279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class _Ptr_base {
public :
    using element_type = remove_extent_t < _Ty >;

    [ [ nodiscard ] ] long use_count ( ) const noexcept {
        return _Rep ? _Rep -> _Use_count ( ) : 0;
    }

    template < class _Ty2 >
    [ [ nodiscard ] ] bool owner_before ( const _Ptr_base < _Ty2 > & _Right ) const noexcept {
        return _Rep < _Right . _Rep;
    }

    _Ptr_base ( const _Ptr_base & ) = delete;
    _Ptr_base & operator = ( const _Ptr_base & ) = delete;

protected :
    [ [ nodiscard ] ] element_type * get ( ) const noexcept {
        return _Ptr;
    }

    constexpr _Ptr_base ( ) noexcept = default;

    ~ _Ptr_base ( ) = default;

    template < class _Ty2 >
    void _Move_construct_from ( _Ptr_base < _Ty2 > && _Right ) noexcept {

        _Ptr = _Right . _Ptr;
        _Rep = _Right . _Rep;

        _Right . _Ptr = nullptr;
        _Right . _Rep = nullptr;
    }

    template < class _Ty2 >
    void _Copy_construct_from ( const shared_ptr < _Ty2 > & _Other ) noexcept {

        _Other . _Incref ( );

        _Ptr = _Other . _Ptr;
        _Rep = _Other . _Rep;
    }

    template < class _Ty2 >
    void _Alias_construct_from ( const shared_ptr < _Ty2 > & _Other, element_type * _Px ) noexcept {

        _Other . _Incref ( );

        _Ptr = _Px;
        _Rep = _Other . _Rep;
    }

    template < class _Ty2 >
    void _Alias_move_construct_from ( shared_ptr < _Ty2 > && _Other, element_type * _Px ) noexcept {

        _Ptr = _Px;
        _Rep = _Other . _Rep;

        _Other . _Ptr = nullptr;
        _Other . _Rep = nullptr;
    }

    template < class _Ty0 >
    friend class weak_ptr;

    template < class _Ty2 >
    bool _Construct_from_weak ( const weak_ptr < _Ty2 > & _Other ) noexcept {

        if ( _Other . _Rep && _Other . _Rep -> _Incref_nz ( ) ) {
            _Ptr = _Other . _Ptr;
            _Rep = _Other . _Rep;
            return true;
        }

        return false;
    }

    void _Incref ( ) const noexcept {
        if ( _Rep ) {
            _Rep -> _Incref ( );
        }
    }

    void _Decref ( ) noexcept {
        if ( _Rep ) {
            _Rep -> _Decref ( );
        }
    }

    void _Swap ( _Ptr_base & _Right ) noexcept {
        :: std :: swap ( _Ptr, _Right . _Ptr );
        :: std :: swap ( _Rep, _Right . _Rep );
    }

    template < class _Ty2 >
    void _Weakly_construct_from ( const _Ptr_base < _Ty2 > & _Other ) noexcept {
        if ( _Other . _Rep ) {
            _Ptr = _Other . _Ptr;
            _Rep = _Other . _Rep;
            _Rep -> _Incwref ( );
        } else {
            ;
        }
    }

    template < class _Ty2 >
    void _Weakly_convert_lvalue_avoiding_expired_conversions ( const _Ptr_base < _Ty2 > & _Other ) noexcept {

        if ( _Other . _Rep ) {
            _Rep = _Other . _Rep;
            _Rep -> _Incwref ( );

            if ( _Rep -> _Incref_nz ( ) ) {
                _Ptr = _Other . _Ptr;
                _Rep -> _Decref ( );
            } else {
                ;
            }
        } else {
            ;
        }
    }

    template < class _Ty2 >
    void _Weakly_convert_rvalue_avoiding_expired_conversions ( _Ptr_base < _Ty2 > && _Other ) noexcept {

        _Rep = _Other . _Rep;
        _Other . _Rep = nullptr;

        if ( _Rep && _Rep -> _Incref_nz ( ) ) {
            _Ptr = _Other . _Ptr;
            _Rep -> _Decref ( );
        } else {
            ;
        }

        _Other . _Ptr = nullptr;
    }

    void _Incwref ( ) const noexcept {
        if ( _Rep ) {
            _Rep -> _Incwref ( );
        }
    }

    void _Decwref ( ) noexcept {
        if ( _Rep ) {
            _Rep -> _Decwref ( );
        }
    }

private :
    element_type * _Ptr { nullptr };
    _Ref_count_base * _Rep { nullptr };

    template < class _Ty0 >
    friend class _Ptr_base;

    friend shared_ptr < _Ty >;

    template < class _Ty0 >
    friend struct atomic;

    friend _Exception_ptr_access;


    template < class _Dx, class _Ty0 >
    friend _Dx * get_deleter ( const shared_ptr < _Ty0 > & _Sx ) noexcept;

};
#line 1452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty, class  = void> 
#line 1453 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_scalar_delete : public false_type { }; 
#line 1454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty> 
#line 1455 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_scalar_delete< _Yty, void_t< decltype(delete std::declval< _Yty *> ())> >  : public bool_constant< !is_void_v< _Yty> >  { }; 
#line 1457 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty, class  = void> 
#line 1458 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_array_delete : public false_type { }; 
#line 1459 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty> 
#line 1460 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_array_delete< _Yty, void_t< decltype(delete [] std::declval< _Yty *> ())> >  : public true_type { }; 
#line 1462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Fx, class _Arg, class  = void> 
#line 1463 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_call_function_object : public false_type { }; 
#line 1464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Fx, class _Arg> 
#line 1465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_call_function_object< _Fx, _Arg, void_t< decltype(std::declval< _Fx> ()(std::declval< _Arg> ()))> >  : public true_type { }; 
#line 1467 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty, class _Ty> 
#line 1468 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _SP_convertible : public is_convertible< _Yty *, _Ty *> ::type { }; 
#line 1469 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty, class _Uty> 
#line 1470 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _SP_convertible< _Yty, _Uty []>  : public is_convertible< _Yty (*)[], _Uty (*)[]> ::type { }; 
#line 1471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty, class _Uty, size_t _Ext> 
#line 1472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _SP_convertible< _Yty, _Uty [_Ext]>  : public is_convertible< _Yty (*)[_Ext], _Uty (*)[_Ext]> ::type { }; 
#line 1474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Yty, class _Ty> 
#line 1475 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _SP_pointer_compatible : public is_convertible< _Yty *, _Ty *> ::type { 
#line 1478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 1479 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Uty, size_t _Ext> 
#line 1480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _SP_pointer_compatible< _Uty [_Ext], _Uty []>  : public true_type { 
#line 1482 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 1483 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Uty, size_t _Ext> 
#line 1484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _SP_pointer_compatible< _Uty [_Ext], const _Uty []>  : public true_type { 
#line 1486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 1487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Uty, size_t _Ext> 
#line 1488 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _SP_pointer_compatible< _Uty [_Ext], volatile _Uty []>  : public true_type { 
#line 1490 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 1491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Uty, size_t _Ext> 
#line 1492 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _SP_pointer_compatible< _Uty [_Ext], const volatile _Uty []>  : public true_type { 
#line 1494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 1496 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ux >
struct _Temporary_owner {
    _Ux * _Ptr;

    explicit _Temporary_owner ( _Ux * const _Ptr_ ) noexcept : _Ptr ( _Ptr_ ) { }
    _Temporary_owner ( const _Temporary_owner & ) = delete;
    _Temporary_owner & operator = ( const _Temporary_owner & ) = delete;
    ~ _Temporary_owner ( ) {
        delete _Ptr;
    }
};
#line 1508 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _UxptrOrNullptr, class _Dx >
struct _Temporary_owner_del {
    _UxptrOrNullptr _Ptr;
    _Dx & _Dt;
    bool _Call_deleter = true;

    explicit _Temporary_owner_del ( const _UxptrOrNullptr _Ptr_, _Dx & _Dt_ ) noexcept : _Ptr ( _Ptr_ ), _Dt ( _Dt_ ) { }
    _Temporary_owner_del ( const _Temporary_owner_del & ) = delete;
    _Temporary_owner_del & operator = ( const _Temporary_owner_del & ) = delete;
    ~ _Temporary_owner_del ( ) {
        if ( _Call_deleter ) {
            _Dt ( _Ptr );
        }
    }
};
#line 1524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class shared_ptr : public _Ptr_base < _Ty > {
private :
    using _Mybase = _Ptr_base < _Ty >;

public :
    using typename _Mybase :: element_type;





    constexpr shared_ptr ( ) noexcept = default;

    constexpr shared_ptr ( nullptr_t ) noexcept { }

    template < class _Ux,
        enable_if_t < conjunction_v < conditional_t < is_array_v < _Ty >, _Can_array_delete < _Ux >, _Can_scalar_delete < _Ux >>,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    explicit shared_ptr ( _Ux * _Px ) {
        if constexpr ( is_array_v < _Ty > ) {
            _Setpd ( _Px, default_delete < _Ux [ ] > { } );
        } else {
            _Temporary_owner < _Ux > _Owner ( _Px );
            _Set_ptr_rep_and_enable_shared ( _Owner . _Ptr, new _Ref_count < _Ux > ( _Owner . _Ptr ) );
            _Owner . _Ptr = nullptr;
        }
    }

    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    shared_ptr ( _Ux * _Px, _Dx _Dt ) {
        _Setpd ( _Px, :: std :: move ( _Dt ) );
    }

    template < class _Ux, class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    shared_ptr ( _Ux * _Px, _Dx _Dt, _Alloc _Ax ) {
        _Setpda ( _Px, :: std :: move ( _Dt ), _Ax );
    }

    template < class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, nullptr_t & >>, int > = 0 >
    shared_ptr ( nullptr_t, _Dx _Dt ) {
        _Setpd ( nullptr, :: std :: move ( _Dt ) );
    }

    template < class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, nullptr_t & >>, int > = 0 >
    shared_ptr ( nullptr_t, _Dx _Dt, _Alloc _Ax ) {
        _Setpda ( nullptr, :: std :: move ( _Dt ), _Ax );
    }

    template < class _Ty2 >
    shared_ptr ( const shared_ptr < _Ty2 > & _Right, element_type * _Px ) noexcept {

        this -> _Alias_construct_from ( _Right, _Px );
    }

    template < class _Ty2 >
    shared_ptr ( shared_ptr < _Ty2 > && _Right, element_type * _Px ) noexcept {

        this -> _Alias_move_construct_from ( :: std :: move ( _Right ), _Px );
    }

    shared_ptr ( const shared_ptr & _Other ) noexcept {
        this -> _Copy_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr ( const shared_ptr < _Ty2 > & _Other ) noexcept {

        this -> _Copy_construct_from ( _Other );
    }

    shared_ptr ( shared_ptr && _Right ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Right ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr ( shared_ptr < _Ty2 > && _Right ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Right ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    explicit shared_ptr ( const weak_ptr < _Ty2 > & _Other ) {
        if ( ! this -> _Construct_from_weak ( _Other ) ) {
            _Throw_bad_weak_ptr ( );
        }
    }


    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    shared_ptr ( auto_ptr < _Ty2 > && _Other ) {
        _Ty2 * _Px = _Other . get ( );
        _Set_ptr_rep_and_enable_shared ( _Px, new _Ref_count < _Ty2 > ( _Px ) );
        _Other . release ( );
    }


    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < _SP_pointer_compatible < _Ux, _Ty >,
                        is_convertible < typename unique_ptr < _Ux, _Dx > :: pointer, element_type * >>,
            int > = 0 >
    shared_ptr ( unique_ptr < _Ux, _Dx > && _Other ) {
        using _Fancy_t = typename unique_ptr < _Ux, _Dx > :: pointer;
        using _Raw_t = typename unique_ptr < _Ux, _Dx > :: element_type *;
        using _Deleter_t = conditional_t < is_reference_v < _Dx >, decltype ( :: std :: ref ( _Other . get_deleter ( ) ) ), _Dx >;

        const _Fancy_t _Fancy = _Other . get ( );

        if ( _Fancy ) {
            const _Raw_t _Raw = _Fancy;
            const auto _Rx =
                new _Ref_count_resource < _Fancy_t, _Deleter_t > ( _Fancy, :: std :: forward < _Dx > ( _Other . get_deleter ( ) ) );
            _Set_ptr_rep_and_enable_shared ( _Raw, _Rx );
            _Other . release ( );
        }
    }

    ~ shared_ptr ( ) noexcept {
        this -> _Decref ( );
    }

    shared_ptr & operator = ( const shared_ptr & _Right ) noexcept {
        shared_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr & operator = ( const shared_ptr < _Ty2 > & _Right ) noexcept {
        shared_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    shared_ptr & operator = ( shared_ptr && _Right ) noexcept {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr & operator = ( shared_ptr < _Ty2 > && _Right ) noexcept {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }


    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    shared_ptr & operator = ( auto_ptr < _Ty2 > && _Right ) {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }


    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < _SP_pointer_compatible < _Ux, _Ty >,
                        is_convertible < typename unique_ptr < _Ux, _Dx > :: pointer, element_type * >>,
            int > = 0 >
    shared_ptr & operator = ( unique_ptr < _Ux, _Dx > && _Right ) {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    void swap ( shared_ptr & _Other ) noexcept {
        this -> _Swap ( _Other );
    }

    void reset ( ) noexcept {
        shared_ptr ( ) . swap ( * this );
    }

    template < class _Ux,
        enable_if_t < conjunction_v < conditional_t < is_array_v < _Ty >, _Can_array_delete < _Ux >, _Can_scalar_delete < _Ux >>,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px ) {
        shared_ptr ( _Px ) . swap ( * this );
    }

    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px, _Dx _Dt ) {
        shared_ptr ( _Px, _Dt ) . swap ( * this );
    }

    template < class _Ux, class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px, _Dx _Dt, _Alloc _Ax ) {
        shared_ptr ( _Px, _Dt, _Ax ) . swap ( * this );
    }

    using _Mybase :: get;

    template < class _Ty2 = _Ty, enable_if_t < ! disjunction_v < is_array < _Ty2 >, is_void < _Ty2 >>, int > = 0 >
    [ [ nodiscard ] ] _Ty2 & operator * ( ) const noexcept {
        return * get ( );
    }

    template < class _Ty2 = _Ty, enable_if_t < ! is_array_v < _Ty2 >, int > = 0 >
    [ [ nodiscard ] ] _Ty2 * operator -> ( ) const noexcept {
        return get ( );
    }

    template < class _Ty2 = _Ty, class _Elem = element_type, enable_if_t < is_array_v < _Ty2 >, int > = 0 >
    [ [ nodiscard ] ] _Elem & operator [ ] ( ptrdiff_t _Idx ) const noexcept {
        return get ( ) [ _Idx ];
    }


     [ [ nodiscard ] ] bool unique ( ) const noexcept {

        return this -> use_count ( ) == 1;
    }


    explicit operator bool ( ) const noexcept {
        return get ( ) != nullptr;
    }

private :
    template < class _UxptrOrNullptr, class _Dx >
    void _Setpd ( const _UxptrOrNullptr _Px, _Dx _Dt ) {
        _Temporary_owner_del < _UxptrOrNullptr, _Dx > _Owner ( _Px, _Dt );
        _Set_ptr_rep_and_enable_shared (
            _Owner . _Ptr, new _Ref_count_resource < _UxptrOrNullptr, _Dx > ( _Owner . _Ptr, :: std :: move ( _Dt ) ) );
        _Owner . _Call_deleter = false;
    }

    template < class _UxptrOrNullptr, class _Dx, class _Alloc >
    void _Setpda ( const _UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax ) {
        using _Alref_alloc = _Rebind_alloc_t < _Alloc, _Ref_count_resource_alloc < _UxptrOrNullptr, _Dx, _Alloc >>;

        _Temporary_owner_del < _UxptrOrNullptr, _Dx > _Owner ( _Px, _Dt );
        _Alref_alloc _Alref ( _Ax );
        _Alloc_construct_ptr < _Alref_alloc > _Constructor ( _Alref );
        _Constructor . _Allocate ( );
        _Construct_in_place ( * _Constructor . _Ptr, _Owner . _Ptr, :: std :: move ( _Dt ), _Ax );
        _Set_ptr_rep_and_enable_shared ( _Owner . _Ptr, _Unfancy ( _Constructor . _Ptr ) );
        _Constructor . _Ptr = nullptr;
        _Owner . _Call_deleter = false;
    }



































    template < class _Ty0, class ... _Types >
    friend shared_ptr < _Ty0 > make_shared ( _Types && ... _Args );

    template < class _Ty0, class _Alloc, class ... _Types >
    friend shared_ptr < _Ty0 > allocate_shared ( const _Alloc & _Al_arg, _Types && ... _Args );


    template < class _Ux >
    void _Set_ptr_rep_and_enable_shared ( _Ux * const _Px, _Ref_count_base * const _Rx ) noexcept {
        this -> _Ptr = _Px;
        this -> _Rep = _Rx;
        if constexpr ( conjunction_v < negation < is_array < _Ty >>, negation < is_volatile < _Ux >>, _Can_enable_shared < _Ux >> ) {
            if ( _Px && _Px -> _Wptr . expired ( ) ) {
                _Px -> _Wptr = shared_ptr < remove_cv_t < _Ux >> ( * this, const_cast < remove_cv_t < _Ux > * > ( _Px ) );
            }
        }
    }

    void _Set_ptr_rep_and_enable_shared ( nullptr_t, _Ref_count_base * const _Rx ) noexcept {
        this -> _Ptr = nullptr;
        this -> _Rep = _Rx;
    }
};
#line 1841 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator == ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) == _Right . get ( );
}
#line 1852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator != ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) != _Right . get ( );
}
#line 1857 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator < ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) < _Right . get ( );
}
#line 1862 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator >= ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) >= _Right . get ( );
}
#line 1867 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator > ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) > _Right . get ( );
}
#line 1872 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator <= ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) <= _Right . get ( );
}
#line 1878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator == ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) == nullptr;
}
#line 1889 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator == ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return nullptr == _Right . get ( );
}
#line 1894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator != ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) != nullptr;
}
#line 1899 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator != ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return nullptr != _Right . get ( );
}
#line 1904 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator < ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) < static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1909 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator < ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) < _Right . get ( );
}
#line 1914 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator >= ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) >= static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1919 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator >= ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) >= _Right . get ( );
}
#line 1924 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator > ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) > static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1929 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator > ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) > _Right . get ( );
}
#line 1934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator <= ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) <= static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator <= ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) <= _Right . get ( );
}
#line 1945 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Elem, class _Traits, class _Ty >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Out, const shared_ptr < _Ty > & _Px ) {

    return _Out << _Px . get ( );
}
#line 1951 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
void swap ( shared_ptr < _Ty > & _Left, shared_ptr < _Ty > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 1956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > static_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = static_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 1963 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > static_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = static_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 1970 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > const_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = const_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 1977 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > const_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = const_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 1984 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > reinterpret_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = reinterpret_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 1991 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > reinterpret_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = reinterpret_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 1999 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > dynamic_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = dynamic_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );

    if ( _Ptr ) {
        return shared_ptr < _Ty1 > ( _Other, _Ptr );
    }

    return { };
}
#line 2011 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > dynamic_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = dynamic_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );

    if ( _Ptr ) {
        return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
    }

    return { };
}
#line 2030 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Dx, class _Ty >
[ [ nodiscard ] ] _Dx * get_deleter ( const shared_ptr < _Ty > & _Sx ) noexcept {

    if ( _Sx . _Rep ) {
        return static_cast < _Dx * > ( _Sx . _Rep -> _Get_deleter ( typeid ( _Dx ) ) );
    }

    return nullptr;
}
#line 2050 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class _Ref_count_obj2 : public _Ref_count_base {
public :
    template < class ... _Types >
    explicit _Ref_count_obj2 ( _Types && ... _Args ) : _Ref_count_base ( ) {






        {
            :: std :: _Construct_in_place ( _Storage . _Value, :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    ~ _Ref_count_obj2 ( ) noexcept override {





    }

    union {
        _Wrap < remove_cv_t < _Ty >> _Storage;
    };

private :
    void _Destroy ( ) noexcept override {
        _Destroy_in_place ( _Storage . _Value );
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }
};
#line 2433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Alloc >
class _Ref_count_obj_alloc3 : public _Ebco_base < _Rebind_alloc_t < _Alloc, _Ty > >, public _Ref_count_base {

private :
    static_assert ( is_same_v < _Ty, remove_cv_t < _Ty >>, "allocate_shared should remove_cv_t" );

    using _Rebound = _Rebind_alloc_t < _Alloc, _Ty >;

public :
    template < class ... _Types >
    explicit _Ref_count_obj_alloc3 ( const _Alloc & _Al_arg, _Types && ... _Args )
        : _Ebco_base < _Rebound > ( _Al_arg ), _Ref_count_base ( ) {






        {
            allocator_traits < _Rebound > :: construct (
                this -> _Get_val ( ), :: std :: addressof ( _Storage . _Value ), :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    union {
        _Wrap < _Ty > _Storage;
    };

private :
    ~ _Ref_count_obj_alloc3 ( ) noexcept override {



    }

    void _Destroy ( ) noexcept override {
        allocator_traits < _Rebound > :: destroy ( this -> _Get_val ( ), :: std :: addressof ( _Storage . _Value ) );
    }

    void _Delete_this ( ) noexcept override {
        _Rebind_alloc_t < _Alloc, _Ref_count_obj_alloc3 > _Al ( this -> _Get_val ( ) );
        this -> ~ _Ref_count_obj_alloc3 ( );
        _Deallocate_plain ( _Al, this );
    }
};
#line 2730 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class ... _Types >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ]



    shared_ptr < _Ty >

    make_shared ( _Types && ... _Args ) {
    const auto _Rx = new _Ref_count_obj2 < _Ty > ( :: std :: forward < _Types > ( _Args ) ... );
    shared_ptr < _Ty > _Ret;
    _Ret . _Set_ptr_rep_and_enable_shared ( :: std :: addressof ( _Rx -> _Storage . _Value ), _Rx );
    return _Ret;
}
#line 2825 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Alloc, class ... _Types >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ]



    shared_ptr < _Ty >

    allocate_shared ( const _Alloc & _Al, _Types && ... _Args ) {


    using _Refoa = _Ref_count_obj_alloc3 < remove_cv_t < _Ty >, _Alloc >;
    using _Alblock = _Rebind_alloc_t < _Alloc, _Refoa >;
    _Alblock _Rebound ( _Al );
    _Alloc_construct_ptr < _Alblock > _Constructor { _Rebound };
    _Constructor . _Allocate ( );
    _Construct_in_place ( * _Constructor . _Ptr, _Al, :: std :: forward < _Types > ( _Args ) ... );
    shared_ptr < _Ty > _Ret;
    const auto _Ptr = reinterpret_cast < _Ty * > ( :: std :: addressof ( _Constructor . _Ptr -> _Storage . _Value ) );
    _Ret . _Set_ptr_rep_and_enable_shared ( _Ptr, _Unfancy ( _Constructor . _Release ( ) ) );
    return _Ret;
}
#line 2965 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class weak_ptr : public _Ptr_base < _Ty > {
public :





    template < class _Ty2, class = const _Ty2 * >
    static constexpr bool _Must_avoid_expired_conversions_from = true;


    template < class _Ty2 >
    static constexpr bool
        _Must_avoid_expired_conversions_from < _Ty2, decltype ( static_cast < const _Ty2 * > ( static_cast < _Ty * > ( nullptr ) ) ) > =
            false;


    constexpr weak_ptr ( ) noexcept { }

    weak_ptr ( const weak_ptr & _Other ) noexcept {
        this -> _Weakly_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( const shared_ptr < _Ty2 > & _Other ) noexcept {
        this -> _Weakly_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( const weak_ptr < _Ty2 > & _Other ) noexcept {



        constexpr bool _Avoid_expired_conversions = _Must_avoid_expired_conversions_from < _Ty2 >;


        if constexpr ( _Avoid_expired_conversions ) {
            this -> _Weakly_convert_lvalue_avoiding_expired_conversions ( _Other );
        } else {
            this -> _Weakly_construct_from ( _Other );
        }
    }

    weak_ptr ( weak_ptr && _Other ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Other ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( weak_ptr < _Ty2 > && _Other ) noexcept {



        constexpr bool _Avoid_expired_conversions = _Must_avoid_expired_conversions_from < _Ty2 >;


        if constexpr ( _Avoid_expired_conversions ) {
            this -> _Weakly_convert_rvalue_avoiding_expired_conversions ( :: std :: move ( _Other ) );
        } else {
            this -> _Move_construct_from ( :: std :: move ( _Other ) );
        }
    }

    ~ weak_ptr ( ) noexcept {
        this -> _Decwref ( );
    }

    weak_ptr & operator = ( const weak_ptr & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( const weak_ptr < _Ty2 > & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    weak_ptr & operator = ( weak_ptr && _Right ) noexcept {
        weak_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( weak_ptr < _Ty2 > && _Right ) noexcept {
        weak_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( const shared_ptr < _Ty2 > & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    void reset ( ) noexcept {
        weak_ptr { } . swap ( * this );
    }

    void swap ( weak_ptr & _Other ) noexcept {
        this -> _Swap ( _Other );
    }

    [ [ nodiscard ] ] bool expired ( ) const noexcept {
        return this -> use_count ( ) == 0;
    }

    [ [ nodiscard ] ] shared_ptr < _Ty > lock ( ) const noexcept {
        shared_ptr < _Ty > _Ret;
        ( void ) _Ret . _Construct_from_weak ( * this );
        return _Ret;
    }
};
#line 3084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
void swap ( weak_ptr < _Ty > & _Left, weak_ptr < _Ty > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 3089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
class enable_shared_from_this {
public :
    using _Esft_type = enable_shared_from_this;

    [ [ nodiscard ] ] shared_ptr < _Ty > shared_from_this ( ) {
        return shared_ptr < _Ty > ( _Wptr );
    }

    [ [ nodiscard ] ] shared_ptr < const _Ty > shared_from_this ( ) const {
        return shared_ptr < const _Ty > ( _Wptr );
    }

    [ [ nodiscard ] ] weak_ptr < _Ty > weak_from_this ( ) noexcept {
        return _Wptr;
    }

    [ [ nodiscard ] ] weak_ptr < const _Ty > weak_from_this ( ) const noexcept {
        return _Wptr;
    }

protected :
    constexpr enable_shared_from_this ( ) noexcept : _Wptr ( ) { }

    enable_shared_from_this ( const enable_shared_from_this & ) noexcept : _Wptr ( ) {

    }

    enable_shared_from_this & operator = ( const enable_shared_from_this & ) noexcept {
        return * this;
    }

    ~ enable_shared_from_this ( ) = default;

private :
    template < class _Yty >
    friend class shared_ptr;

    mutable weak_ptr < _Ty > _Wptr;
};
#line 3130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
struct default_delete {
    constexpr default_delete ( ) noexcept = default;

    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    inline default_delete ( const default_delete < _Ty2 > & ) noexcept { }

    inline void operator ( ) ( _Ty * _Ptr ) const noexcept {
        static_assert ( 0 < sizeof ( _Ty ), "can\'t delete an incomplete type" );
        delete _Ptr;
    }
};
#line 3143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Ty> 
#pragma pack(8)
#line 3144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct default_delete< _Ty []>  { 
#line 3145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
constexpr default_delete() noexcept = default;
#line 3147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Uty, enable_if_t < is_convertible_v < _Uty ( * ) [ ], _Ty ( * ) [ ] >, int > = 0 >
    inline default_delete ( const default_delete < _Uty [ ] > & ) noexcept { }
#line 3150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Uty, enable_if_t < is_convertible_v < _Uty ( * ) [ ], _Ty ( * ) [ ] >, int > = 0 >
    inline void operator ( ) ( _Uty * _Ptr ) const noexcept {
        static_assert ( 0 < sizeof ( _Uty ), "can\'t delete an incomplete type" );
        delete [ ] _Ptr;
    }
#line 3155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#pragma pack(8)
template< class _Ty, class _Dx_noref, class  = void> 
#line 3158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Get_deleter_pointer_type { 
#line 3159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using type = _Ty *; 
#line 3160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 3162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Ty, class _Dx_noref> 
#line 3163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Get_deleter_pointer_type< _Ty, _Dx_noref, void_t< typename _Dx_noref::pointer> >  { 
#line 3164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using type = typename _Dx_noref::pointer; 
#line 3165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 3167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Dx2> using _Unique_ptr_enable_default_t = enable_if_t< conjunction_v< negation< is_pointer< _Dx2> > , is_default_constructible< _Dx2> > , int> ; 
#line 3171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
class unique_ptr {
public :
    using pointer = typename _Get_deleter_pointer_type < _Ty, remove_reference_t < _Dx >> :: type;
    using element_type = _Ty;
    using deleter_type = _Dx;

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( nullptr_t ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    inline unique_ptr & operator = ( nullptr_t ) noexcept {
        reset ( );
        return * this;
    }



    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    inline explicit unique_ptr ( pointer _Ptr ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Ptr ) { }

    template < class _Dx2 = _Dx, enable_if_t < is_constructible_v < _Dx2, const _Dx2 & >, int > = 0 >
    inline unique_ptr ( pointer _Ptr, const _Dx & _Dt ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Dt, _Ptr ) { }

    template < class _Dx2 = _Dx,
        enable_if_t < conjunction_v < negation < is_reference < _Dx2 >>, is_constructible < _Dx2, _Dx2 >>, int > = 0 >
    inline unique_ptr ( pointer _Ptr, _Dx && _Dt ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Ptr ) { }

    template < class _Dx2 = _Dx,
        enable_if_t < conjunction_v < is_reference < _Dx2 >, is_constructible < _Dx2, remove_reference_t < _Dx2 >> >, int > = 0 >
    unique_ptr ( pointer, remove_reference_t < _Dx > && ) = delete;

    template < class _Dx2 = _Dx, enable_if_t < is_move_constructible_v < _Dx2 >, int > = 0 >
    inline unique_ptr ( unique_ptr && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Ty2, class _Dx2,
        enable_if_t <
            conjunction_v < negation < is_array < _Ty2 >>, is_convertible < typename unique_ptr < _Ty2, _Dx2 > :: pointer, pointer >,
                conditional_t < is_reference_v < _Dx >, is_same < _Dx2, _Dx >, is_convertible < _Dx2, _Dx >> >,
            int > = 0 >
    inline unique_ptr ( unique_ptr < _Ty2, _Dx2 > && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx2 > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }


    template < class _Ty2,
        enable_if_t < conjunction_v < is_convertible < _Ty2 *, _Ty * >, is_same < _Dx, default_delete < _Ty >> >, int > = 0 >
    unique_ptr ( auto_ptr < _Ty2 > && _Right ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Right . release ( ) ) { }


    template < class _Ty2, class _Dx2,
        enable_if_t < conjunction_v < negation < is_array < _Ty2 >>, is_assignable < _Dx &, _Dx2 >,
                        is_convertible < typename unique_ptr < _Ty2, _Dx2 > :: pointer, pointer >>,
            int > = 0 >
    inline unique_ptr & operator = ( unique_ptr < _Ty2, _Dx2 > && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Dx2 > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    template < class _Dx2 = _Dx, enable_if_t < is_move_assignable_v < _Dx2 >, int > = 0 >
    inline unique_ptr & operator = ( unique_ptr && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Dx > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    inline void swap ( unique_ptr & _Right ) noexcept {
        using :: std :: swap;
        swap ( _Mypair . _Myval2, _Right . _Mypair . _Myval2 );
        swap ( _Mypair . _Get_first ( ), _Right . _Mypair . _Get_first ( ) );
    }

    inline ~ unique_ptr ( ) noexcept {
        if ( _Mypair . _Myval2 ) {
            _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
        }
    }

    [ [ nodiscard ] ] inline _Dx & get_deleter ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline const _Dx & get_deleter ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline add_lvalue_reference_t < _Ty > operator * ( ) const noexcept ( noexcept ( * :: std :: declval < pointer > ( ) ) ) {
        return * _Mypair . _Myval2;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    [ [ nodiscard ] ] inline pointer get ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    inline explicit operator bool ( ) const noexcept {
        return static_cast < bool > ( _Mypair . _Myval2 );
    }

    inline pointer release ( ) noexcept {
        return :: std :: exchange ( _Mypair . _Myval2, nullptr );
    }

    inline void reset ( pointer _Ptr = nullptr ) noexcept {
        pointer _Old = :: std :: exchange ( _Mypair . _Myval2, _Ptr );
        if ( _Old ) {
            _Mypair . _Get_first ( ) ( _Old );
        }
    }

    unique_ptr ( const unique_ptr & ) = delete;
    unique_ptr & operator = ( const unique_ptr & ) = delete;

private :
    template < class, class >
    friend class unique_ptr;

    _Compressed_pair < _Dx, pointer > _Mypair;
};
#line 3298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
class unique_ptr < _Ty [ ], _Dx > {
public :
    using pointer = typename _Get_deleter_pointer_type < _Ty, remove_reference_t < _Dx >> :: type;
    using element_type = _Ty;
    using deleter_type = _Dx;

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    template < class _Uty, class _Is_nullptr = is_same < _Uty, nullptr_t >>
    using _Enable_ctor_reset =
        enable_if_t < is_same_v < _Uty, pointer > || _Is_nullptr :: value
                        || ( is_same_v < pointer, element_type * > && is_pointer_v < _Uty >
                            && is_convertible_v < remove_pointer_t < _Uty > ( * ) [ ], element_type ( * ) [ ] > ),
            int >;

    template < class _Uty, class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0, _Enable_ctor_reset < _Uty > = 0 >
    inline explicit unique_ptr ( _Uty _Ptr ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx, enable_if_t < is_constructible_v < _Dx2, const _Dx2 & >, int > = 0,
        _Enable_ctor_reset < _Uty > = 0 >
    inline unique_ptr ( _Uty _Ptr, const _Dx & _Dt ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Dt, _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx,
        enable_if_t < conjunction_v < negation < is_reference < _Dx2 >>, is_constructible < _Dx2, _Dx2 >>, int > = 0,
        _Enable_ctor_reset < _Uty > = 0 >
    inline unique_ptr ( _Uty _Ptr, _Dx && _Dt ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx,
        enable_if_t < conjunction_v < is_reference < _Dx2 >, is_constructible < _Dx2, remove_reference_t < _Dx2 >> >, int > = 0 >
    unique_ptr ( _Uty, remove_reference_t < _Dx > && ) = delete;

    template < class _Dx2 = _Dx, enable_if_t < is_move_constructible_v < _Dx2 >, int > = 0 >
    inline unique_ptr ( unique_ptr && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Dx2 = _Dx, enable_if_t < is_move_assignable_v < _Dx2 >, int > = 0 >
    inline unique_ptr & operator = ( unique_ptr && _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            reset ( _Right . release ( ) );
            _Mypair . _Get_first ( ) = :: std :: move ( _Right . _Mypair . _Get_first ( ) );
        }

        return * this;
    }

    template < class _Uty, class _Ex, class _More, class _UP_pointer = typename unique_ptr < _Uty, _Ex > :: pointer,
        class _UP_element_type = typename unique_ptr < _Uty, _Ex > :: element_type >
    using _Enable_conversion = enable_if_t <
        conjunction_v < is_array < _Uty >, is_same < pointer, element_type * >, is_same < _UP_pointer, _UP_element_type * >,
            is_convertible < _UP_element_type ( * ) [ ], element_type ( * ) [ ] >, _More >,
        int >;

    template < class _Uty, class _Ex,
        _Enable_conversion < _Uty, _Ex, conditional_t < is_reference_v < _Dx >, is_same < _Ex, _Dx >, is_convertible < _Ex, _Dx >> > =
            0 >
    inline unique_ptr ( unique_ptr < _Uty, _Ex > && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Ex > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Uty, class _Ex, _Enable_conversion < _Uty, _Ex, is_assignable < _Dx &, _Ex >> = 0 >
    inline unique_ptr & operator = ( unique_ptr < _Uty, _Ex > && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Ex > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( nullptr_t ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    inline unique_ptr & operator = ( nullptr_t ) noexcept {
        reset ( );
        return * this;
    }

    inline void reset ( nullptr_t = nullptr ) noexcept {
        reset ( pointer ( ) );
    }

    inline void swap ( unique_ptr & _Right ) noexcept {
        using :: std :: swap;
        swap ( _Mypair . _Myval2, _Right . _Mypair . _Myval2 );
        swap ( _Mypair . _Get_first ( ), _Right . _Mypair . _Get_first ( ) );
    }

    inline ~ unique_ptr ( ) noexcept {
        if ( _Mypair . _Myval2 ) {
            _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
        }
    }

    [ [ nodiscard ] ] inline _Dx & get_deleter ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline const _Dx & get_deleter ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline _Ty & operator [ ] ( size_t _Idx ) const noexcept {
        return _Mypair . _Myval2 [ _Idx ];
    }

    [ [ nodiscard ] ] inline pointer get ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    inline explicit operator bool ( ) const noexcept {
        return static_cast < bool > ( _Mypair . _Myval2 );
    }

    inline pointer release ( ) noexcept {
        return :: std :: exchange ( _Mypair . _Myval2, nullptr );
    }

    template < class _Uty, _Enable_ctor_reset < _Uty, false_type > = 0 >
    inline void reset ( _Uty _Ptr ) noexcept {
        pointer _Old = :: std :: exchange ( _Mypair . _Myval2, _Ptr );
        if ( _Old ) {
            _Mypair . _Get_first ( ) ( _Old );
        }
    }

    unique_ptr ( const unique_ptr & ) = delete;
    unique_ptr & operator = ( const unique_ptr & ) = delete;

private :
    template < class, class >
    friend class unique_ptr;

    _Compressed_pair < _Dx, pointer > _Mypair;
};
#line 3432 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class ... _Types, enable_if_t < ! is_array_v < _Ty >, int > = 0 >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] inline unique_ptr < _Ty > make_unique ( _Types && ... _Args ) {
    return unique_ptr < _Ty > ( new _Ty ( :: std :: forward < _Types > ( _Args ) ... ) );
}
#line 3437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, enable_if_t < is_array_v < _Ty > && extent_v < _Ty > == 0, int > = 0 >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] inline unique_ptr < _Ty > make_unique ( const size_t _Size ) {
    using _Elem = remove_extent_t < _Ty >;
    return unique_ptr < _Ty > ( new _Elem [ _Size ] ( ) );
}
#line 3443 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class ... _Types, enable_if_t < extent_v < _Ty > != 0, int > = 0 >
void make_unique ( _Types && ... ) = delete;
#line 3464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx, enable_if_t < _Is_swappable < _Dx > :: value, int > = 0 >
inline void swap ( unique_ptr < _Ty, _Dx > & _Left, unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 3469 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] inline bool operator == ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return _Left . get ( ) == _Right . get ( );
}
#line 3475 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator != ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Left == _Right );
}
#line 3481 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator < ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    using _Ptr1 = typename unique_ptr < _Ty1, _Dx1 > :: pointer;
    using _Ptr2 = typename unique_ptr < _Ty2, _Dx2 > :: pointer;
    using _Common = common_type_t < _Ptr1, _Ptr2 >;
    return less < _Common > { } ( _Left . get ( ), _Right . get ( ) );
}
#line 3489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator >= ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Left < _Right );
}
#line 3494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator > ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return _Right < _Left;
}
#line 3499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator <= ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Right < _Left );
}
#line 3517 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator == ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t ) noexcept {
    return ! _Left;
}
#line 3523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator == ( nullptr_t, const unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    return ! _Right;
}
#line 3528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator != ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 3533 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator != ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 3539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator < ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    using _Ptr = typename unique_ptr < _Ty, _Dx > :: pointer;
    return less < _Ptr > { } ( _Left . get ( ), _Right );
}
#line 3545 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator < ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    using _Ptr = typename unique_ptr < _Ty, _Dx > :: pointer;
    return less < _Ptr > { } ( _Left, _Right . get ( ) );
}
#line 3551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator >= ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return ! ( _Left < _Right );
}
#line 3556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator >= ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return ! ( _Left < _Right );
}
#line 3561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator > ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return _Right < _Left;
}
#line 3566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator > ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return _Right < _Left;
}
#line 3571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator <= ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return ! ( _Right < _Left );
}
#line 3576 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator <= ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return ! ( _Right < _Left );
}
#line 3590 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _OutTy, class _PxTy, class  = void> 
#line 3591 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_stream_unique_ptr : public false_type { }; 
#line 3592 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _OutTy, class _PxTy> 
#line 3593 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Can_stream_unique_ptr< _OutTy, _PxTy, void_t< decltype(std::declval< _OutTy> () << std::declval< _PxTy> ().get())> >  : public true_type { 
#line 3594 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 3596 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Elem, class _Traits, class _Yty, class _Dx,
    enable_if_t < _Can_stream_unique_ptr < basic_ostream < _Elem, _Traits > &, const unique_ptr < _Yty, _Dx > & > :: value, int > = 0 >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Out, const unique_ptr < _Yty, _Dx > & _Px ) {

    _Out << _Px . get ( );
    return _Out;
}
#line 3605 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
enum class pointer_safety { relaxed, preferred, strict}; 
#line 3607 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
inline void declare_reachable(void *) { } 
#line 3609 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
_Ty * undeclare_reachable ( _Ty * _Ptr ) {
    return _Ptr;
}
#line 3614 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
inline void declare_no_pointers(char *, size_t) { } 
#line 3616 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
inline void undeclare_no_pointers(char *, size_t) { } 
#line 3618 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
inline pointer_safety get_pointer_safety() noexcept { 
#line 3619 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
return pointer_safety::relaxed; 
#line 3620 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 3623 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template< class _Ty = void> struct owner_less; 
#line 3626 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
struct owner_less < shared_ptr < _Ty > > {
    using first_argument_type = shared_ptr < _Ty >;
    using second_argument_type = shared_ptr < _Ty >;
    using result_type = bool;

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
};
#line 3645 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
struct owner_less < weak_ptr < _Ty > > {
    using first_argument_type = weak_ptr < _Ty >;
    using second_argument_type = weak_ptr < _Ty >;
    using result_type = bool;

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
};
#line 3665 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template<> struct owner_less< void>  { 
#line 3666 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const shared_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3671 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3676 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3681 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const weak_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3686 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using is_transparent = int; 
#line 3687 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 3689 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty, class _Dx >
struct hash < unique_ptr < _Ty, _Dx > > : _Conditionally_enabled_hash < unique_ptr < _Ty, _Dx >,
                                        is_default_constructible_v < hash < typename unique_ptr < _Ty, _Dx > :: pointer > > > {
    static size_t _Do_hash ( const unique_ptr < _Ty, _Dx > & _Keyval ) noexcept (
        _Is_nothrow_hashable < typename unique_ptr < _Ty, _Dx > :: pointer > :: value ) {
        return hash < typename unique_ptr < _Ty, _Dx > :: pointer > { } ( _Keyval . get ( ) );
    }
};
#line 3698 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
struct hash < shared_ptr < _Ty > > {
    using argument_type = shared_ptr < _Ty >;
    using result_type = size_t;

    [ [ nodiscard ] ] size_t operator ( ) ( const shared_ptr < _Ty > & _Keyval ) const noexcept {
        return hash < typename shared_ptr < _Ty > :: element_type * > ( ) ( _Keyval . get ( ) );
    }
};
#line 3720 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
extern "C" {
#line 3721 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
void __cdecl _Lock_shared_ptr_spin_lock() noexcept; 
#line 3722 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
void __cdecl _Unlock_shared_ptr_spin_lock() noexcept; 
#line 3723 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}
#line 3725 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
struct _Shared_ptr_spin_lock { 
#line 3726 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_Shared_ptr_spin_lock() { 
#line 3727 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_Lock_shared_ptr_spin_lock(); 
#line 3728 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 3730 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
~_Shared_ptr_spin_lock() noexcept { 
#line 3731 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
_Unlock_shared_ptr_spin_lock(); 
#line 3732 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
} 
#line 3733 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}; 
#line 3735 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 [ [ nodiscard ] ] bool atomic_is_lock_free ( const shared_ptr < _Ty > * ) {

    return false;
}
#line 3741 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 [ [ nodiscard ] ] shared_ptr < _Ty > atomic_load_explicit (
    const shared_ptr < _Ty > * _Ptr, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    shared_ptr < _Ty > _Result = * _Ptr;
    return _Result;
}
#line 3750 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 [ [ nodiscard ] ] shared_ptr < _Ty > atomic_load (
    const shared_ptr < _Ty > * _Ptr ) {
    return :: std :: atomic_load_explicit ( _Ptr, memory_order_seq_cst );
}
#line 3756 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 void atomic_store_explicit (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    _Ptr -> swap ( _Other );
}
#line 3764 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 void atomic_store (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other ) {
    :: std :: atomic_store_explicit ( _Ptr, :: std :: move ( _Other ), memory_order_seq_cst );
}
#line 3770 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 shared_ptr < _Ty > atomic_exchange_explicit (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    _Ptr -> swap ( _Other );
    return _Other;
}
#line 3779 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 shared_ptr < _Ty > atomic_exchange (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other ) {

    return :: std :: atomic_exchange_explicit ( _Ptr, :: std :: move ( _Other ), memory_order_seq_cst );
}
#line 3786 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 bool atomic_compare_exchange_weak_explicit ( shared_ptr < _Ty > * _Ptr,
    shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value, memory_order, memory_order ) {
    shared_ptr < _Ty > _Old_exp;
    _Shared_ptr_spin_lock _Lock;
    bool _Success = _Ptr -> get ( ) == _Exp -> get ( ) && ! _Ptr -> owner_before ( * _Exp ) && ! _Exp -> owner_before ( * _Ptr );
    if ( _Success ) {
        _Ptr -> swap ( _Value );
    } else {
        _Exp -> swap ( _Old_exp );
        * _Exp = * _Ptr;
    }
    return _Success;
}
#line 3801 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 bool atomic_compare_exchange_weak (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value ) {

    return :: std :: atomic_compare_exchange_weak_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 3809 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 bool atomic_compare_exchange_strong_explicit ( shared_ptr < _Ty > * _Ptr,
    shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value, memory_order, memory_order ) {
    return :: std :: atomic_compare_exchange_weak_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 3816 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
template < class _Ty >
 bool atomic_compare_exchange_strong (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value ) {

    return :: std :: atomic_compare_exchange_strong_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 4304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 4305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::allocate_shared;
#line 4306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::bad_weak_ptr;
#line 4307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::const_pointer_cast;
#line 4308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::dynamic_pointer_cast;
#line 4309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::enable_shared_from_this;
#line 4310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::get_deleter;
#line 4311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::make_shared;
#line 4312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::shared_ptr;
#line 4313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::static_pointer_cast;
#line 4314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::swap;
#line 4315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
using std::weak_ptr;
#line 4316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}
#line 4319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
}
#line 4326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\memory"
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
namespace std { 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
class _Facet_base { 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
public: virtual ~_Facet_base() noexcept { } 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
virtual void _Incref() noexcept = 0; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
virtual _Facet_base *_Decref() noexcept = 0; 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
}; 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *); 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
}
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xfacet"
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
extern "C" {
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
struct _Collvec { 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
unsigned _Page; 
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
__wchar_t *_LocaleName; 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
}; 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
struct _Ctypevec { 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
unsigned _Page; 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
const short *_Table; 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
int _Delfl; 
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
__wchar_t *_LocaleName; 
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
}; 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
struct _Cvtvec { 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
unsigned _Page; 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
unsigned _Mbcurmax; 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
int _Isclocale; 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
unsigned char _Isleadbyte[32]; 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
}; 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
}
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_xlocinfo_types.hpp"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
namespace std { 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isalnum;
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isalpha;
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::iscntrl;
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isdigit;
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isgraph;
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::islower;
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isprint;
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::ispunct;
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isspace;
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isupper;
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isxdigit;
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::tolower;
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::toupper;
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
using ::isblank;
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
}
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\cctype"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
struct lconv { 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *decimal_point; 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *thousands_sep; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *grouping; 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *int_curr_symbol; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *currency_symbol; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *mon_decimal_point; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *mon_thousands_sep; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *mon_grouping; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *positive_sign; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *negative_sign; 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char int_frac_digits; 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char frac_digits; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char p_cs_precedes; 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char p_sep_by_space; 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char n_cs_precedes; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char n_sep_by_space; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char p_sign_posn; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char n_sign_posn; 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *_W_decimal_point; 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *_W_thousands_sep; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *_W_int_curr_symbol; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *_W_currency_symbol; 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *_W_mon_decimal_point; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *_W_mon_thousands_sep; 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *_W_positive_sign; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *_W_negative_sign; 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
}; 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
struct tm; 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
void __cdecl _lock_locales(); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
void __cdecl _unlock_locales(); 
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
int __cdecl _configthreadlocale(int _Flag); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *__cdecl setlocale(int _Category, const char * _Locale); 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
lconv *__cdecl localeconv(); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
_locale_t __cdecl _get_current_locale(); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
_locale_t __cdecl _create_locale(int _Category, const char * _Locale); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
void __cdecl _free_locale(_locale_t _Locale); 
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
_locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t **__cdecl ___lc_locale_name_func(); 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
unsigned __cdecl ___lc_codepage_func(); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
unsigned __cdecl ___lc_collate_cp_func(); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *__cdecl _Getdays(); 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
char *__cdecl _Getmonths(); 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
void *__cdecl _Gettnames(); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *__cdecl _W_Getdays(); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
__wchar_t *__cdecl _W_Getmonths(); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
void *__cdecl _W_Gettnames(); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
size_t __cdecl _Strftime(char * _Buffer, size_t _Max_size, const char * _Format, const tm * _Timeptr, void * _Lc_time_arg); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
size_t __cdecl _Wcsftime(__wchar_t * _Buffer, size_t _Max_size, const __wchar_t * _Format, const tm * _Timeptr, void * _Lc_time_arg); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
}__pragma(pack ( pop )) 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22000.0\\ucrt\\locale.h"
#pragma warning(pop)
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\clocale"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\clocale"
namespace std { 
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\clocale"
using ::lconv;
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\clocale"
using ::localeconv;
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\clocale"
using ::setlocale;
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\clocale"
}
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\clocale"
#pragma warning(pop)
#pragma pack ( pop )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
extern "C" {
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Collvec __cdecl _Getcoll() noexcept; 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Ctypevec __cdecl _Getctype() noexcept; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Cvtvec __cdecl _Getcvt() noexcept; 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
int __cdecl _Getdateorder() noexcept; 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
int __cdecl _Mbrtowc(__wchar_t *, const char *, size_t _Max_multibyte, mbstate_t *, const _Cvtvec *) noexcept; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *) noexcept; 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
size_t __cdecl _Strxfrm(char * _String1, char * _End1, const char *, const char *, const _Collvec *) noexcept; 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
int __cdecl _Tolower(int, const _Ctypevec *) noexcept; 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
int __cdecl _Toupper(int, const _Ctypevec *) noexcept; 
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
int __cdecl _Wcrtomb(char *, __wchar_t, mbstate_t *, const _Cvtvec *) noexcept; 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
int __cdecl _Wcscoll(const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *) noexcept; 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
size_t __cdecl _Wcsxfrm(__wchar_t * _String1, __wchar_t * _End1, const __wchar_t *, const __wchar_t *, const _Collvec *) noexcept; 
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
short __cdecl _Getwctype(__wchar_t, const _Ctypevec *) noexcept; 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const __wchar_t *__cdecl _Getwctypes(const __wchar_t *, const __wchar_t *, short *, const _Ctypevec *) noexcept; 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
__wchar_t __cdecl _Towlower(__wchar_t, const _Ctypevec *) noexcept; 
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
__wchar_t __cdecl _Towupper(__wchar_t, const _Ctypevec *) noexcept; 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
extern "C" {
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
char *__cdecl _Getdays(); 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
char *__cdecl _Getmonths(); 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
void *__cdecl _Gettnames(); 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
size_t __cdecl _Strftime(char *, size_t _Maxsize, const char *, const tm *, void *); 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
__wchar_t *__cdecl _W_Getdays(); 
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
__wchar_t *__cdecl _W_Getmonths(); 
#line 101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
void *__cdecl _W_Gettnames(); 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
size_t __cdecl _Wcsftime(__wchar_t *, size_t _Maxsize, const __wchar_t *, const tm *, void *); 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
namespace std { 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
class _Timevec { 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
public: explicit _Timevec(void *_Ptr = 0) : _Timeptr(_Ptr) { } 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Timevec(const _Timevec &_Right) : _Timeptr((nullptr)) { 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
((*this) = _Right); 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
~_Timevec() noexcept { 
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
::free(_Timeptr); 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Timevec &operator=(const _Timevec &_Right) { 
#line 121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if (this != (&_Right)) { 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
::free(_Timeptr); 
#line 123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
(_Timeptr) = (_Right._Timeptr); 
#line 124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
((const_cast< _Timevec &>(_Right))._Timeptr) = (nullptr); 
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return *this; 
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
void *_Getptr() const { 
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return _Timeptr; 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
private: void *_Timeptr; 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}; 
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
template < class _Elem >
class _Yarn {
public :
     _Yarn ( ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) { }

     _Yarn ( const _Yarn & _Right ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) {
        * this = _Right;
    }

     _Yarn ( const _Elem * _Right ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) {
        * this = _Right;
    }

    _Yarn & operator = ( const _Yarn & _Right ) noexcept {
        return * this = _Right . _Myptr;
    }

    _Yarn & operator = ( const _Elem * _Right ) noexcept {
        if ( _Myptr != _Right ) {
            _Tidy ( );

            if ( _Right ) {
                const _Elem * _Ptr = _Right;
                while ( * _Ptr != _Elem { } ) {
                    ++ _Ptr;
                }

                const auto _Count = ( ++ _Ptr - _Right ) * sizeof ( _Elem );




                _Myptr = static_cast < _Elem * > ( :: malloc ( _Count ) );


                if ( _Myptr ) {
                    :: memcpy ( _Myptr, _Right, _Count );
                }
            }
        }

        return * this;
    }

     ~ _Yarn ( ) noexcept {
        _Tidy ( );
    }

    [ [ nodiscard ] ] bool empty ( ) const noexcept {
        return _Myptr == nullptr;
    }

      const _Elem * c_str ( ) const noexcept {
        return _Myptr ? _Myptr : & _Nul;
    }

    [ [ nodiscard ] ] bool _Empty ( ) const noexcept {
        return _Myptr == nullptr;
    }

      const _Elem * _C_str ( ) const noexcept {
        return _Myptr ? _Myptr : & _Nul;
    }

private :
    void _Tidy ( ) noexcept {
        if ( _Myptr ) {



            :: free ( _Myptr );

        }

        _Myptr = nullptr;
    }

    _Elem * _Myptr;
    _Elem _Nul;
};
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
class _Locinfo { 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
public: using _Collvec = ::_Collvec; 
#line 222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
using _Ctypevec = ::_Ctypevec; 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
using _Cvtvec = ::_Cvtvec; 
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
using _Timevec = std::_Timevec; 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
static void __cdecl _Locinfo_ctor(_Locinfo *, const char *); 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
static void __cdecl _Locinfo_ctor(_Locinfo *, int, const char *); 
#line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
static void __cdecl _Locinfo_dtor(_Locinfo *); 
#line 229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
static _Locinfo &__cdecl _Locinfo_Addcats(_Locinfo *, int, const char *); 
#line 231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Locinfo(const char *_Pch = "C") : _Lock(0) 
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
{ 
#line 236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if (_Pch) { 
#line 237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Locinfo_ctor(this, _Pch); 
#line 238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return; 
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Xruntime_error("bad locale name"); 
#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Locinfo(int _Cat, const char *_Pch) : _Lock(0) 
#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
{ 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if (_Pch) { 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Locinfo_ctor(this, _Cat, _Pch); 
#line 251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return; 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Xruntime_error("bad locale name"); 
#line 255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
~_Locinfo() noexcept { 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Locinfo_dtor(this); 
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Locinfo &_Addcats(int _Cat, const char *_Pch) { 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if (_Pch) { 
#line 263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return _Locinfo_Addcats(this, _Cat, _Pch); 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Xruntime_error("bad locale name"); 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const char *_Getname() const { 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return (_Newlocname)._C_str(); 
#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Collvec _Getcoll() const { 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return ::_Getcoll(); 
#line 275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Ctypevec _Getctype() const { 
#line 278 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return ::_Getctype(); 
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Cvtvec _Getcvt() const { 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return ::_Getcvt(); 
#line 283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const lconv *_Getlconv() const { 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return localeconv(); 
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Timevec _Gettnames() const { 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return ((std::_Timevec)(::_Gettnames())); 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const char *_Getdays() const { 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const char *_Ptr = ::_Getdays(); 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if (_Ptr) { 
#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
(((const_cast< _Locinfo *>(this))->_Days) = _Ptr); 
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
::free(const_cast< char *>(_Ptr)); 
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return (!(_Days)._Empty()) ? (_Days)._C_str() : (":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday:Thu:Thursday:Fri:Friday:Sat:Saturday"); 
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const char *_Getmonths() const { 
#line 306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const char *_Ptr = ::_Getmonths(); 
#line 307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if (_Ptr) { 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
(((const_cast< _Locinfo *>(this))->_Months) = _Ptr); 
#line 309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
::free(const_cast< char *>(_Ptr)); 
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return (!(_Months)._Empty()) ? (_Months)._C_str() : (":Jan:January:Feb:February:Mar:March:Apr:April:May:May:Jun:June:Jul:July:Aug:August:Sep:September:Oct:October:Nov:November:Dec:De" "cember"); 
#line 317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const char *_Getfalse() const { 
#line 320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return "false"; 
#line 321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const char *_Gettrue() const { 
#line 324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return "true"; 
#line 325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
int _Getdateorder() const { 
#line 328 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return ::_Getdateorder(); 
#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Timevec _W_Gettnames() const { 
#line 332 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return ((std::_Timevec)(::_W_Gettnames())); 
#line 333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const unsigned short *_W_Getdays() const { 
#line 336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const __wchar_t *_Ptr = ::_W_Getdays(); 
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if (_Ptr) { 
#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
(((const_cast< _Locinfo *>(this))->_W_Days) = _Ptr); 
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
::free(const_cast< __wchar_t *>(_Ptr)); 
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const __wchar_t *_Ret; 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if ((_W_Days)._Empty()) { 
#line 345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Ret = (L"\x3a\x53\x75\x6e\x3a\x53\x75\x6e\x64\x61\x79\x3a\x4d\x6f\x6e\x3a\x4d\x6f\x6e\x64\x61\x79\x3a\x54\x75\x65\x3a\x54\x75\x65\x73\x64" L"\x61\x79\x3a\x57\x65\x64\x3a\x57\x65\x64\x6e\x65\x73\x64\x61\x79\x3a\x54\x68\x75\x3a\x54\x68\x75\x72\x73\x64\x61\x79\x3a\x46\x72" L"\x69\x3a\x46\x72\x69\x64\x61\x79\x3a\x53\x61\x74\x3a\x53\x61\x74\x75\x72\x64\x61\x79"); 
#line 346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} else { 
#line 347 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Ret = (_W_Days)._C_str(); 
#line 348 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return reinterpret_cast< const unsigned short *>(_Ret); 
#line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const unsigned short *_W_Getmonths() const { 
#line 354 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const __wchar_t *_Ptr = ::_W_Getmonths(); 
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if (_Ptr) { 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
(((const_cast< _Locinfo *>(this))->_W_Months) = _Ptr); 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
::free(const_cast< __wchar_t *>(_Ptr)); 
#line 358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
const __wchar_t *_Ret; 
#line 362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
if ((_W_Months)._Empty()) { 
#line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Ret = (L"\x3a\x4a\x61\x6e\x3a\x4a\x61\x6e\x75\x61\x72\x79\x3a\x46\x65\x62\x3a\x46\x65\x62\x72\x75\x61\x72\x79\x3a\x4d\x61\x72\x3a\x4d\x61" L"\x72\x63\x68\x3a\x41\x70\x72\x3a\x41\x70\x72\x69\x6c\x3a\x4d\x61\x79\x3a\x4d\x61\x79\x3a\x4a\x75\x6e\x3a\x4a\x75\x6e\x65\x3a\x4a" L"\x75\x6c\x3a\x4a\x75\x6c\x79\x3a\x41\x75\x67\x3a\x41\x75\x67\x75\x73\x74\x3a\x53\x65\x70\x3a\x53\x65\x70\x74\x65\x6d\x62\x65\x72" L"\x3a\x4f\x63\x74\x3a\x4f\x63\x74\x6f\x62\x65\x72\x3a\x4e\x6f\x76\x3a\x4e\x6f\x76\x65\x6d\x62\x65\x72\x3a\x44\x65\x63\x3a\x44\x65" L"\x63\x65\x6d\x62\x65\x72"); 
#line 365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} else { 
#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Ret = (_W_Months)._C_str(); 
#line 367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}  
#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return reinterpret_cast< const unsigned short *>(_Ret); 
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Locinfo(const _Locinfo &) = delete;
#line 373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Locinfo &operator=(const _Locinfo &) = delete;
#line 379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
private: _Lockit _Lock; 
#line 382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Yarn< char>  _Days; 
#line 383 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Yarn< char>  _Months; 
#line 384 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Yarn< __wchar_t>  _W_Days; 
#line 385 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Yarn< __wchar_t>  _W_Months; 
#line 386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Yarn< char>  _Oldlocname; 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Yarn< char>  _Newlocname; 
#line 388 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}; 
#line 390 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
template < class _Elem >
int __cdecl _LStrcoll ( const _Elem * _First1, const _Elem * _Last1, const _Elem * _First2, const _Elem * _Last2,
    const _Locinfo :: _Collvec * ) {
    for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 ) {
        if ( * _First1 < * _First2 ) {
            return - 1;
        } else if ( * _First2 < * _First1 ) {
            return + 1;
        }
    }

    return _First2 != _Last2 ? - 1 : _First1 != _Last1 ? + 1 : 0;
}
#line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
template<> inline int __cdecl _LStrcoll(const char *_First1, const char *_Last1, const char *_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 406 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Vector) { 
#line 407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
template<> inline int __cdecl _LStrcoll(const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *_First2, const __wchar_t *
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Last2, const _Locinfo::_Collvec *
#line 413 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Vector) { 
#line 414 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 417 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
template < class _Elem >
size_t __cdecl _LStrxfrm ( _Elem * _First1, _Elem * _Last1, const _Elem * _First2, const _Elem * _Last2,
    const _Locinfo :: _Collvec * ) {
    const ptrdiff_t _Count = _Last2 - _First2;
    if ( _Count <= _Last1 - _First1 ) {
        :: memcpy ( _First1, _First2, _Count * sizeof ( _Elem ) );
    }

    return _Count;
}
#line 429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(char *_First1, char *
#line 430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Last1, const char *_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 431 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Vector) { 
#line 432 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 436 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
template<> inline size_t __cdecl _LStrxfrm(__wchar_t *_First1, __wchar_t *
#line 437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Last1, const __wchar_t *_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
_Vector) { 
#line 439 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
} 
#line 441 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
}
#line 444 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocinfo"
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
namespace std { 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template< class _Dummy> 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
class _Locbase { }; 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template< class _Elem> class collate; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
struct _Crt_new_delete { 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
class locale : public _Locbase< int> , public _Crt_new_delete { 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: using category = int; 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static constexpr category collate = ((1 << 1) >> 1); 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static constexpr category ctype = ((1 << 2) >> 1); 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static constexpr category monetary = ((1 << 3) >> 1); 
#line 69 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static constexpr category numeric = ((1 << 4) >> 1); 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static constexpr category time = ((1 << 5) >> 1); 
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static constexpr category messages = ((1 << 6) >> 1); 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static constexpr category all = (((1 << (6 + 1)) >> 1) - 1); 
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static constexpr category none = 0; 
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
class id { 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: id(size_t _Val = 0) : _Id(_Val) { } 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
id(const id &) = delete;
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
id &operator=(const id &) = delete;
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
operator size_t() { 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Id) == (0)) { 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Lockit _Lock(0); 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Id) == (0)) { 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Id) = (static_cast< size_t>(++_Id_cnt)); 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Id; 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: size_t _Id; 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static int _Id_cnt; 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
struct _Facet_guard; 
#line 101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
class facet : public _Facet_base, public _Crt_new_delete { 
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
friend struct _Facet_guard; 
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: static size_t __cdecl _Getcat(const facet ** = 0, const locale * = 0) { 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return static_cast< size_t>(-1); 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual void _Incref() noexcept override { 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Myrefs))); 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Facet_base *_Decref() noexcept override { 
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Myrefs))) == (0)) { 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this; 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return nullptr; 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: _Atomic_counter_t _Myrefs; 
#line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: explicit facet(size_t _Initrefs = 0) noexcept : _Myrefs(static_cast< _Atomic_counter_t>(_Initrefs)) 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ } 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual ~facet() noexcept override { } 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: facet(const facet &) = delete;
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
facet &operator=(const facet &) = delete;
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
struct [[nodiscard]] _Facet_guard { 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
facet *_Target; 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
~_Facet_guard() { 
#line 142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Target) { 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
delete (_Target)->_Decref(); 
#line 144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
class _Locimp : public facet { 
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual ~_Locimp() noexcept { 
#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp_dtor(this); 
#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: static _Locimp *__cdecl _New_Locimp(bool _Transparent = false); 
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static _Locimp *__cdecl _New_Locimp(const _Locimp & _Right); 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static void __cdecl _Locimp_dtor(_Locimp *); 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static void __cdecl _Locimp_Addfac(_Locimp *, facet *, size_t); 
#line 160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp &); 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
friend class locale; 
#line 164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp(bool _Transparent) : facet(1), _Facetvec((nullptr)), _Facetcount((0)), _Catmask(none), _Xparent(_Transparent), _Name("*") 
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp(const _Locimp &_Right) : facet(1), _Facetvec((nullptr)), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask), _Xparent(_Right._Xparent), _Name((_Right._Name).c_str()) 
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp_ctor(this, _Right); 
#line 172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Addfac(facet *_Pfacet, size_t _Id) { 
#line 175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp_Addfac(this, _Pfacet, _Id); 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static _Locimp *__cdecl _Makeloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static void __cdecl _Makewloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static void __cdecl _Makeushloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static void __cdecl _Makexloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
facet **_Facetvec; 
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
size_t _Facetcount; 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
category _Catmask; 
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
bool _Xparent; 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Yarn< char>  _Name; 
#line 198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static _Locimp *_Clocptr; 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: _Locimp &operator=(const _Locimp &) = delete;
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Elem, class _Traits, class _Alloc >
    bool operator ( ) (
        const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) const {

        const auto & _Coll_fac = :: std :: use_facet < :: std :: collate < _Elem >> ( * this );

        const _Elem * const _Left_data = _Left . data ( );
        const _Elem * const _Right_data = _Right . data ( );
        return _Coll_fac . compare ( _Left_data, _Left_data + _Left . size ( ), _Right_data, _Right_data + _Right . size ( ) ) < 0;
    }
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Facet >
    locale combine ( const locale & _Loc ) const {
        _Facet * _Facptr;

        try {
        _Facptr = const_cast < _Facet * > ( :: std :: addressof ( :: std :: use_facet < _Facet > ( _Loc ) ) );
        } catch ( ... ) {
        _Xruntime_error ( "locale::combine facet missing" );
        }

        _Locimp * _Newimp = _Locimp :: _New_Locimp ( * _Ptr );
        _Newimp -> _Addfac ( _Facptr, _Facet :: id );
        _Newimp -> _Catmask = none;
        _Newimp -> _Name = "*";
        return locale { _Newimp };
    }
#line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Facet >
    locale ( const locale & _Loc, const _Facet * _Facptr ) : _Ptr ( _Locimp :: _New_Locimp ( * _Loc . _Ptr ) ) {
        if ( _Facptr ) {
            _Ptr -> _Addfac ( const_cast < _Facet * > ( _Facptr ), _Facet :: id );
            _Ptr -> _Catmask = none;
            _Ptr -> _Name = "*";
        }
    }
#line 241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
#pragma warning(push)
#pragma warning(disable : 26495)
#line 251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
locale(_Uninitialized) { } 
#pragma warning(pop)
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
locale(const locale &_Right) noexcept : _Ptr(_Right._Ptr) { 
#line 255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Ptr)->_Incref(); 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
locale() noexcept : _Ptr(_Init(true)) { } 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
locale(const locale &_Loc, const locale &_Other, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Cat != none) { 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
; 
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Facet_guard _Guard{_Ptr}; 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other); 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Lobj._Addcats((_Loc._Ptr)->_Catmask, (_Loc.name()).c_str()); 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Lobj._Addcats((_Other._Ptr)->_Catmask, (_Other.name()).c_str()); 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
((_Ptr)->_Catmask) = (((_Loc._Ptr)->_Catmask) | ((_Other._Ptr)->_Catmask)); 
#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(((_Ptr)->_Name) = (_Lobj._Getname())); 
#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Guard._Target) = (nullptr); 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 278 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: void _Construct(const string &_Str, category _Cat) { 
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
; 
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
bool _Bad = false; 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Init(); 
#line 283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Cat != none) { 
#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Facet_guard _Guard{_Ptr}; 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj(_Cat, _Str.c_str()); 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (this->_Badname(_Lobj)) { 
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Bad = true; 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr); 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
((_Ptr)->_Catmask) = _Cat; 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(((_Ptr)->_Name) = (_Str.c_str())); 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Guard._Target) = (nullptr); 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Bad) { 
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Xruntime_error("bad locale name"); 
#line 300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: explicit locale(const char *_Locname, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) { 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Locname) { 
#line 309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Construct(_Locname, _Cat); 
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return; 
#line 311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Xruntime_error("bad locale name"); 
#line 314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
locale(const locale &_Loc, const char *_Locname, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Locname) { 
#line 321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Construct(_Locname, _Cat); 
#line 322 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return; 
#line 323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Xruntime_error("bad locale name"); 
#line 326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 328 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit locale(const string &_Str, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) { 
#line 330 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Construct(_Str, _Cat); 
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
locale(const locale &_Loc, const string &_Str, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Construct(_Str, _Cat); 
#line 336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
~locale() noexcept { 
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ptr) { 
#line 341 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const locale &operator=(const locale &_Right) noexcept { 
#line 346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Ptr) != (_Right._Ptr)) { 
#line 347 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
delete (_Ptr)->_Decref(); 
#line 348 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Ptr) = (_Right._Ptr); 
#line 349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Ptr)->_Incref(); 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return *this; 
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 354 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
string name() const { 
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ((_Ptr) ? ((_Ptr)->_Name).c_str() : string{}); 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const char *_C_str() const noexcept { 
#line 359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_Ptr) ? ((_Ptr)->_Name).c_str() : (""); 
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const facet *_Getfacet(size_t _Id) const { 
#line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const facet *_Facptr = (_Id < ((_Ptr)->_Facetcount)) ? ((_Ptr)->_Facetvec)[_Id] : (nullptr); 
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Facptr || (!((_Ptr)->_Xparent))) { 
#line 365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Facptr; 
#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp *_Ptr0 = _Getgloballocale(); 
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Id < (_Ptr0->_Facetcount)) { 
#line 371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_Ptr0->_Facetvec)[_Id]; 
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return nullptr; 
#line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
[[nodiscard]] bool operator==(const locale &_Loc) const noexcept { 
#line 378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ((_Ptr) == (_Loc._Ptr)) || ((::strcmp(this->_C_str(), "*") != 0) && (::strcmp(this->_C_str(), _Loc._C_str()) == 0)); 
#line 379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
[[nodiscard]] bool operator!=(const locale &_Right) const noexcept { 
#line 383 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return !((*this) == _Right); 
#line 384 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static const locale &__cdecl classic(); 
#line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale __cdecl global(const locale &); 
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale __cdecl empty(); 
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: locale(_Locimp *_Ptrimp) : _Ptr(_Ptrimp) { } 
#line 396 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static _Locimp *__cdecl _Init(bool _Do_incref = false); 
#line 397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static _Locimp *__cdecl _Getgloballocale(); 
#line 398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static void __cdecl _Setgloballocale(void *); 
#line 400 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
bool _Badname(const _Locinfo &_Lobj) { 
#line 401 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ::strcmp(_Lobj._Getname(), "*") == 0; 
#line 402 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locimp *_Ptr; 
#line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template< class _Facet> 
#line 408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
struct _Facetptr { 
#line 409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static const locale::facet *_Psave; 
#line 410 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template< class _Facet> const locale::facet *
#line 413 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Facetptr< _Facet> ::_Psave = (nullptr); 
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Facet >
const _Facet & __cdecl use_facet ( const locale & _Loc ) {
    { :: std :: _Lockit _Lock ( 0 );
    const locale :: facet * _Psave = _Facetptr < _Facet > :: _Psave;

    const size_t _Id = _Facet :: id;
    const locale :: facet * _Pf = _Loc . _Getfacet ( _Id );

    if ( ! _Pf ) {
        if ( _Psave ) {
            _Pf = _Psave;
        } else if ( _Facet :: _Getcat ( & _Psave, & _Loc ) == static_cast < size_t > ( - 1 ) ) {

            _Throw_bad_cast ( );



        } else {
            auto _Pfmod = const_cast < locale :: facet * > ( _Psave );
            unique_ptr < _Facet_base > _Psave_guard ( static_cast < _Facet_base * > ( _Pfmod ) );




            _Facet_Register ( _Pfmod );


            _Pfmod -> _Incref ( );
            _Facetptr < _Facet > :: _Psave = _Psave;
            _Pf = _Psave;

            ( void ) _Psave_guard . release ( );
        }
    }

    return static_cast < const _Facet & > ( * _Pf );
    }
}
#line 454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Elem >
char __cdecl _Maklocbyte ( _Elem _Char, const _Locinfo :: _Cvtvec & ) {

    return static_cast < char > ( static_cast < unsigned char > ( _Char ) );
}
#line 461 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> inline char __cdecl _Maklocbyte(__wchar_t _Char, const _Locinfo::_Cvtvec &_Cvt) { 
#line 463 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Byte = '\000'; 
#line 464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt); 
#line 466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Byte; 
#line 467 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> inline char __cdecl _Maklocbyte(unsigned short _Char, const _Locinfo::_Cvtvec &_Cvt) { 
#line 473 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Byte = '\000'; 
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 475 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Wcrtomb(&_Byte, static_cast< __wchar_t>(_Char), &_Mbst1, &_Cvt); 
#line 476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Byte; 
#line 477 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Elem >
_Elem __cdecl _Maklocchr ( char _Byte, _Elem *, const _Locinfo :: _Cvtvec & ) {

    return static_cast < _Elem > ( static_cast < unsigned char > ( _Byte ) );
}
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> inline __wchar_t __cdecl _Maklocchr(char _Byte, __wchar_t *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t _Wc = L'\x0'; 
#line 490 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 491 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt); 
#line 492 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Wc; 
#line 493 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 497 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> inline unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 499 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned short _Wc = (0); 
#line 500 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), &_Byte, 1, &_Mbst1, &_Cvt); 
#line 502 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Wc; 
#line 503 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 506 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Elem >
_Elem * __cdecl _Maklocstr ( const char * _Ptr, _Elem *, const _Locinfo :: _Cvtvec & ) {

    size_t _Count = :: strlen ( _Ptr ) + 1;

    _Elem * _Ptrdest = static_cast < _Elem * > ( calloc ( _Count, sizeof ( _Elem ) ) );

    if ( ! _Ptrdest ) {
        _Xbad_alloc ( );
    }

    for ( _Elem * _Ptrnext = _Ptrdest; 0 < _Count; -- _Count, ++ _Ptrnext, ++ _Ptr ) {
        * _Ptrnext = static_cast < _Elem > ( static_cast < unsigned char > ( * _Ptr ) );
    }

    return _Ptrdest;
}
#line 525 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> inline __wchar_t *__cdecl _Maklocstr(const char *_Ptr, __wchar_t *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
size_t _Count; 
#line 528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
size_t _Count1; 
#line 529 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
size_t _Wchars; 
#line 530 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const char *_Ptr1; 
#line 531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes; 
#line 532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t _Wc; 
#line 533 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 535 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Count1 = (::strlen(_Ptr) + (1)); 
#line 536 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 537 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 540 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 542 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Wchars; 
#line 544 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(calloc(_Wchars, sizeof(__wchar_t))); 
#line 546 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (!_Ptrdest) { 
#line 547 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Xbad_alloc(); 
#line 548 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 550 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t *_Ptrnext = _Ptrdest; 
#line 551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst2 = {}; 
#line 553 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 554 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 557 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 559 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ptrnext) = L'\x0'; 
#line 561 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Ptrdest; 
#line 562 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> inline unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
size_t _Count; 
#line 569 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
size_t _Count1; 
#line 570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
size_t _Wchars; 
#line 571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const char *_Ptr1; 
#line 572 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes; 
#line 573 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned short _Wc; 
#line 574 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst1 = {}; 
#line 576 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Count1 = (::strlen(_Ptr) + (1)); 
#line 577 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 578 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 579 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 580 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 581 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 583 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Wchars; 
#line 585 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(calloc(_Wchars, sizeof(__wchar_t))); 
#line 587 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (!_Ptrdest) { 
#line 588 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Xbad_alloc(); 
#line 589 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 591 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t *_Ptrnext = _Ptrdest; 
#line 592 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst2 = {}; 
#line 593 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 594 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 596 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 597 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 599 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ptrnext) = L'\x0'; 
#line 600 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return reinterpret_cast< unsigned short *>(_Ptrdest); 
#line 601 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 604 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
class codecvt_base : public locale::facet { 
#line 608 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: enum { 
#line 609 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
ok, 
#line 610 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
partial, 
#line 611 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
error, 
#line 612 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
noconv
#line 613 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 614 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using result = int; 
#line 616 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
codecvt_base(size_t _Refs = 0) noexcept : locale::facet(_Refs) 
#line 617 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ } 
#line 619 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
bool always_noconv() const noexcept { 
#line 621 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_always_noconv(); 
#line 622 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int max_length() const noexcept { 
#line 626 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_max_length(); 
#line 627 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 629 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int encoding() const noexcept { 
#line 630 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_encoding(); 
#line 631 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 633 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual ~codecvt_base() noexcept { } 
#line 636 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual bool do_always_noconv() const noexcept { 
#line 638 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return false; 
#line 639 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 641 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_max_length() const noexcept { 
#line 643 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 1; 
#line 644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 646 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_encoding() const noexcept { 
#line 647 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 1; 
#line 648 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 649 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 651 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template< class _Ty> constexpr bool 
#line 652 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Is_one_byte_char_like_v = _Is_any_of_v< remove_cv_t< _Ty> , signed char, unsigned char, char> ; 
#line 661 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template< class _Elem, class _Byte> constexpr bool 
#line 662 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Is_codecvt_do_always_noconv_v = is_same_v< _Byte, _Elem>  || (_Is_one_byte_char_like_v< _Byte>  && _Is_one_byte_char_like_v< _Elem> ); 
#line 665 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Elem, class _Byte, class _Statype >
class codecvt : public codecvt_base {
public :








    static_assert ( ! 0 || is_same_v < codecvt, codecvt < char, char, mbstate_t >>,
        "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    using intern_type = _Elem;
    using extern_type = _Byte;
    using state_type = _Statype;

    result in ( _Statype & _State, const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
        _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const {
        return do_in ( _State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 );
    }

    result out ( _Statype & _State, const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
        _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {
        return do_out ( _State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 );
    }

    result unshift ( _Statype & _State, _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {

        return do_unshift ( _State, _First2, _Last2, _Mid2 );
    }

    int length ( _Statype & _State, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) const {


        return do_length ( _State, _First1, _Last1, _Count );
    }

     static locale :: id id;

    explicit codecvt ( size_t _Refs = 0 ) : codecvt_base ( _Refs ) {
        _Init ( _Locinfo ( ) );
    }

    explicit codecvt ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : codecvt_base ( _Refs ) {
        _Init ( _Lobj );
    }

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new codecvt ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 2;
    }

protected :
     ~ codecvt ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

    bool do_always_noconv ( ) const noexcept override {

        return _Is_codecvt_do_always_noconv_v < _Elem, _Byte >;
    }

    virtual result do_in ( _Statype &, const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
        _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const {
        _Mid1 = _First1;
        _Mid2 = _First2;
        if constexpr ( _Is_codecvt_do_always_noconv_v < _Elem, _Byte > ) {
            return noconv;
        } else {

            for (; _Mid1 != _Last1; ++ _Mid1, ++ _Mid2 ) {
                if ( _Mid2 == _Last2 ) {
                    return partial;
                }
                * _Mid2 = static_cast < _Elem > ( * _Mid1 );
            }

            return ok;
        }
    }

    virtual result do_out ( _Statype &, const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
        _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {
        _Mid1 = _First1;
        _Mid2 = _First2;
        if constexpr ( _Is_codecvt_do_always_noconv_v < _Elem, _Byte > ) {
            return noconv;
        } else {

            for (; _Mid1 != _Last1; ++ _Mid1, ++ _Mid2 ) {
                if ( _Mid2 == _Last2 ) {
                    return partial;
                }
                * _Mid2 = static_cast < _Byte > ( * _Mid1 );
            }

            return ok;
        }
    }

    virtual result do_unshift ( _Statype &, _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const {

        _Mid2 = _First2;
        return noconv;
    }

    virtual int do_length (
        _Statype &, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) const {



        const auto _Dist = static_cast < size_t > ( ( :: std :: min ) ( _Last1 - _First1, ptrdiff_t { 2147483647 } ) );
        return static_cast < int > ( ( :: std :: min ) ( _Count, _Dist ) );
    }
};
#line 792 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template< class _Elem, class _Byte, class _Statype> locale::id 
#line 793 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
codecvt< _Elem, _Byte, _Statype> ::id; 
#line 799 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _CvtTy, class _Byte, class _Statype >
[ [ nodiscard ] ] int _Codecvt_do_length (
    const _CvtTy & _Cvt, _Statype & _State, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) {



    __pragma(warning(push))                            __pragma(warning(disable : 4996))
    using _Elem = typename _CvtTy :: intern_type;
    __pragma(warning(pop))

    _Adl_verify_range ( _First1, _Last1 );
    const auto _Old_first1 = _First1;

    while ( _Count > 0 && _First1 != _Last1 ) {
        const _Byte * _Mid1;
        _Elem * _Mid2;
        _Elem _Ch;



        __pragma(warning(push))                                __pragma(warning(disable : 4996))
        const auto _Result = _Cvt . _CvtTy :: do_in ( _State, _First1, _Last1, _Mid1, & _Ch, & _Ch + 1, _Mid2 );
        __pragma(warning(pop))

        if ( _Result != codecvt_base :: ok ) {
            if ( _Result == codecvt_base :: noconv ) {
                _First1 += ( :: std :: min ) ( static_cast < size_t > ( _Last1 - _First1 ), _Count );
            }

            break;
        }

        if ( _Mid2 == & _Ch + 1 ) {
            -- _Count;
        }

        _First1 = _Mid1;
    }

    return static_cast < int > ( ( :: std :: min ) ( _First1 - _Old_first1, ptrdiff_t { 2147483647 } ) );
}
#line 841 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
enum _Codecvt_mode { _Consume_header = 4, _Generate_header = 2}; 
#line 845 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> class codecvt< char16_t, char, _Mbstatet>  : public codecvt_base { 
#line 848 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: using intern_type = char16_t; 
#line 849 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using extern_type = char; 
#line 850 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using state_type = mbstate_t; 
#line 852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, char16_t *
#line 853 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First2, char16_t *_Last2, char16_t *&_Mid2) const { 
#line 855 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 856 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 858 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result out(mbstate_t &_State, const char16_t *_First1, const char16_t *_Last1, const char16_t *&
#line 859 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 861 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 862 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 864 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 866 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 867 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 869 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 872 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 873 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 875 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale::id id; 
#line 877 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 879 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 880 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 881 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 882 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 884 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 885 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 886 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 887 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 889 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
codecvt(const _Locinfo &
#line 890 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode _Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 891 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 892 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 893 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 895 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 897 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ppf && (!(*_Ppf))) { 
#line 898 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 899 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ppf) = (new std::codecvt< char16_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 900 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__pragma(warning(pop)) 
#line 901 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 903 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 2; 
#line 904 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 907 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual ~codecvt() noexcept override { } 
#line 909 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Init(const _Locinfo &) { } 
#line 911 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&
#line 912 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char16_t *_First2, char16_t *_Last2, char16_t *&_Mid2) const { 
#line 914 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 915 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 916 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 918 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 919 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned char _By = static_cast< unsigned char>(*_Mid1); 
#line 920 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned long _Ch; 
#line 921 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Nextra; 
#line 922 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Nskip; 
#line 924 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((*_Pstate) > 1) { 
#line 925 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_By < 128) || (192 <= _By)) { 
#line 926 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 931 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = (static_cast< char16_t>((*_Pstate) | (_By & 63))); 
#line 932 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Pstate) = (1); 
#line 933 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
continue; 
#line 934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 936 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_By < 128U) { 
#line 937 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = _By; 
#line 938 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 0; 
#line 939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_By < 192U) { 
#line 940 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 941 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 942 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_By < 224U) { 
#line 943 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 31)); 
#line 944 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 1; 
#line 945 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_By < 240U) { 
#line 946 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 15)); 
#line 947 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 2; 
#line 948 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_By < 248U) { 
#line 949 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 7)); 
#line 950 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 3; 
#line 951 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 952 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 3)); 
#line 953 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = ((_By < 252) ? 4 : 5); 
#line 954 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  }  }  }  
#line 956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nskip = ((_Nextra < 3) ? 0 : 1); 
#line 957 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First1 = _Mid1; 
#line 959 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Nextra == 0) { 
#line 960 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 961 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if ((_Last1 - _Mid1) < ((_Nextra + 1) - _Nskip)) { 
#line 962 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 963 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 964 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (++_Mid1; _Nskip < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 965 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (((_By = (static_cast< unsigned char>(*_Mid1))) < 128U) || (192U <= _By)) { 
#line 966 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 967 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 968 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = ((_Ch << 6) | (_By & 63)); 
#line 969 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 970 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 971 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  
#line 973 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (0 < _Nskip) { 
#line 974 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch <<= 6; 
#line 975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 977 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((((_Maxcode) < (1114111U)) ? _Maxcode : (1114111U)) < _Ch) { 
#line 978 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 979 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 981 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((65535U) < _Ch) { 
#line 982 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned short _Ch0 = static_cast< unsigned short>((55296) | ((_Ch >> 10) - (64))); 
#line 984 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = (static_cast< char16_t>(_Ch0)); 
#line 985 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Pstate) = (static_cast< unsigned short>((56320) | (_Ch & (1023)))); 
#line 986 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
continue; 
#line 987 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 989 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Nskip != 0) { 
#line 990 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Mid1 == _Last1) { 
#line 991 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 992 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 993 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 995 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (((_By = (static_cast< unsigned char>(*(_Mid1++)))) < 128U) || (192U <= _By)) { 
#line 996 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 997 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 999 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch |= (_By & 63); 
#line 1000 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1002 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((*_Pstate) == 0U) { 
#line 1003 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Pstate) = (1); 
#line 1005 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279U))) { 
#line 1006 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1008 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ans == (codecvt< char16_t, char, _Mbstatet> ::partial)) { 
#line 1009 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Pstate) = (0); 
#line 1010 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 1011 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1013 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Ans; 
#line 1014 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1015 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1017 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = (static_cast< char16_t>(_Ch)); 
#line 1018 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}   
#line 1020 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_First1 == _Mid1) ? codecvt< char16_t, char, _Mbstatet> ::partial : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1021 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1023 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_out(mbstate_t &_State, const char16_t *_First1, const char16_t *_Last1, const char16_t *&
#line 1024 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1026 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 1027 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 1028 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 1030 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1031 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned long _Ch; 
#line 1032 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const unsigned short _Ch1 = static_cast< unsigned short>(*_Mid1); 
#line 1033 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
bool _Save = false; 
#line 1035 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (1 < (*_Pstate)) { 
#line 1036 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Ch1 < 56320U) || (57344U <= _Ch1)) { 
#line 1037 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 1038 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1040 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(((*_Pstate) << 10) | (_Ch1 - 56320))); 
#line 1041 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if ((55296U <= _Ch1) && (_Ch1 < 56320U)) { 
#line 1042 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(((_Ch1 - 55296) + 64) << 10)); 
#line 1043 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Save = true; 
#line 1044 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 1045 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = _Ch1; 
#line 1046 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  
#line 1048 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _By; 
#line 1049 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Nextra; 
#line 1051 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ch < (128U)) { 
#line 1052 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>(_Ch)); 
#line 1053 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 0; 
#line 1054 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_Ch < (2048U)) { 
#line 1055 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>((192) | (_Ch >> 6))); 
#line 1056 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 1; 
#line 1057 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_Ch < (65536U)) { 
#line 1058 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>((224) | (_Ch >> 12))); 
#line 1059 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 2; 
#line 1060 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 1061 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>((240) | (_Ch >> 18))); 
#line 1062 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 3; 
#line 1063 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  }  
#line 1065 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Nput = (_Nextra < 3) ? _Nextra + 1 : (_Save ? 1 : 3); 
#line 1067 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Last2 - _Mid2) < _Nput) { 
#line 1068 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 1069 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (((*_Pstate) == 0U) && (((_Mode) & (_Generate_header)) != 0)) { 
#line 1072 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Last2 - _Mid2) < (3 + _Nput)) { 
#line 1073 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 1074 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1077 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = '\357'; 
#line 1078 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = '\273'; 
#line 1079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = '\277'; 
#line 1080 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1082 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 1083 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Save || (_Nextra < 3)) { 
#line 1084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = _By; 
#line 1085 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
--_Nput; 
#line 1086 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1088 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; 0 < _Nput; --_Nput) { 
#line 1089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = (static_cast< char>(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); 
#line 1090 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1092 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Pstate) = (static_cast< unsigned short>(_Save ? _Ch >> 10 : (1))); 
#line 1093 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1095 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_First1 == _Mid1) ? codecvt< char16_t, char, _Mbstatet> ::partial : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1096 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1098 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_unshift(mbstate_t &_State, char *_First2, char *, char *&_Mid2) const { 
#line 1100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 1101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 1103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (1U < (*_Pstate)) ? codecvt< char16_t, char, _Mbstatet> ::error : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
friend int _Codecvt_do_length<> (const std::codecvt< char16_t, char, _Mbstatet>  &, mbstate_t &, const char *, const char *, size_t); 
#line 1108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_length(mbstate_t &
#line 1109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Codecvt_do_length(*this, _State, _First1, _Last1, _Count); 
#line 1111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual bool do_always_noconv() const noexcept override { 
#line 1115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return false; 
#line 1116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_max_length() const noexcept override { 
#line 1121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (((_Mode) & (_Consume_header)) != 0) { 
#line 1122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 9; 
#line 1123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (((_Mode) & (_Generate_header)) != 0) { 
#line 1126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 7; 
#line 1127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 6; 
#line 1130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_encoding() const noexcept override { 
#line 1133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 0; 
#line 1134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: unsigned long _Maxcode; 
#line 1138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Codecvt_mode _Mode; 
#line 1139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 1143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> class codecvt< char32_t, char, _Mbstatet>  : public codecvt_base { 
#line 1146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: using intern_type = char32_t; 
#line 1147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using extern_type = char; 
#line 1148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using state_type = mbstate_t; 
#line 1150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, char32_t *
#line 1151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First2, char32_t *_Last2, char32_t *&_Mid2) const { 
#line 1153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result out(mbstate_t &_State, const char32_t *_First1, const char32_t *_Last1, const char32_t *&
#line 1157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale::id id; 
#line 1175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 1177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 1179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 1184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 1185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
codecvt(const _Locinfo &
#line 1188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode _Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 1190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 1191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 1195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ppf && (!(*_Ppf))) { 
#line 1196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__pragma(warning(push)) __pragma(warning(disable : 4996)) 
#line 1197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ppf) = (new std::codecvt< char32_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 1198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__pragma(warning(pop)) 
#line 1199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 2; 
#line 1202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual ~codecvt() noexcept override { } 
#line 1207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Init(const _Locinfo &) { } 
#line 1209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&
#line 1210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char32_t *_First2, char32_t *_Last2, char32_t *&_Mid2) const { 
#line 1212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char *_Pstate = reinterpret_cast< char *>(&_State); 
#line 1213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 1214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 1216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned char _By = static_cast< unsigned char>(*_Mid1); 
#line 1218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned long _Ch; 
#line 1219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Nextra; 
#line 1221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_By < 128U) { 
#line 1222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = _By; 
#line 1223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 0; 
#line 1224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_By < 192U) { 
#line 1225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 1226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_By < 224U) { 
#line 1228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 31)); 
#line 1229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 1; 
#line 1230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_By < 240U) { 
#line 1231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 15)); 
#line 1232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 2; 
#line 1233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_By < 248U) { 
#line 1234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 7)); 
#line 1235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 3; 
#line 1236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 1237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = (static_cast< unsigned long>(_By & 3)); 
#line 1238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = ((_By < 252) ? 4 : 5); 
#line 1239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  }  }  }  
#line 1241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Nextra == 0) { 
#line 1242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 1243 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if ((_Last1 - _Mid1) < (_Nextra + 1)) { 
#line 1244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 1245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 1246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (++_Mid1; 0 < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (((_By = (static_cast< unsigned char>(*_Mid1))) < 128U) || (192U <= _By)) { 
#line 1248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 1250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ch = ((_Ch << 6) | (_By & 63)); 
#line 1251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  
#line 1255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((*_Pstate) == 0) { 
#line 1256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Pstate) = (1); 
#line 1258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279U))) { 
#line 1259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ans == (codecvt< char32_t, char, _Mbstatet> ::partial)) { 
#line 1262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Pstate) = (0); 
#line 1263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 1264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Ans; 
#line 1266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Maxcode) < _Ch) { 
#line 1270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = (static_cast< char32_t>(_Ch)); 
#line 1274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_First1 == _Mid1) ? codecvt< char32_t, char, _Mbstatet> ::partial : codecvt< char32_t, char, _Mbstatet> ::ok; 
#line 1277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_out(mbstate_t &_State, const char32_t *_First1, const char32_t *_Last1, const char32_t *&
#line 1280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char *_Pstate = reinterpret_cast< char *>(&_State); 
#line 1283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 1284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 1286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _By; 
#line 1288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Nextra; 
#line 1289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned long _Ch = static_cast< unsigned long>(*_Mid1); 
#line 1291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Maxcode) < _Ch) { 
#line 1292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ch < (128U)) { 
#line 1296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>(_Ch)); 
#line 1297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 0; 
#line 1298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_Ch < (2048U)) { 
#line 1299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>((192) | (_Ch >> 6))); 
#line 1300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 1; 
#line 1301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_Ch < (65536U)) { 
#line 1302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>((224) | (_Ch >> 12))); 
#line 1303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 2; 
#line 1304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_Ch < (2097152U)) { 
#line 1305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>((240) | (_Ch >> 18))); 
#line 1306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 3; 
#line 1307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (_Ch < (67108864U)) { 
#line 1308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>((248) | (_Ch >> 24))); 
#line 1309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 4; 
#line 1310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 1311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_By = (static_cast< char>((252) | ((_Ch >> 30) & (3)))); 
#line 1312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Nextra = 5; 
#line 1313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  }  }  }  
#line 1315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((*_Pstate) == 0) { 
#line 1316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Pstate) = (1); 
#line 1317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (((_Mode) & (_Generate_header)) != 0) { 
#line 1318 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Last2 - _Mid2) < ((3 + 1) + _Nextra)) { 
#line 1319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char32_t, char, _Mbstatet> ::partial; 
#line 1320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = '\357'; 
#line 1324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = '\273'; 
#line 1325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = '\277'; 
#line 1326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Last2 - _Mid2) < (1 + _Nextra)) { 
#line 1330 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 1331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 1334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for ((*(_Mid2++)) = _By; 0 < _Nextra;) { 
#line 1335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*(_Mid2++)) = (static_cast< char>(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); 
#line 1336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_First1 == _Mid1) ? codecvt< char32_t, char, _Mbstatet> ::partial : codecvt< char32_t, char, _Mbstatet> ::ok; 
#line 1339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1341 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_unshift(mbstate_t &, char *_First2, char *, char *&_Mid2) const { 
#line 1343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 1344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return codecvt< char32_t, char, _Mbstatet> ::noconv; 
#line 1345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1347 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
friend int _Codecvt_do_length<> (const std::codecvt< char32_t, char, _Mbstatet>  &, mbstate_t &, const char *, const char *, size_t); 
#line 1349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_length(mbstate_t &
#line 1350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Codecvt_do_length(*this, _State, _First1, _Last1, _Count); 
#line 1352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1354 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual bool do_always_noconv() const noexcept override { 
#line 1356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return false; 
#line 1357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_max_length() const noexcept override { 
#line 1361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? 9 : 6; 
#line 1362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_encoding() const noexcept override { 
#line 1366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? -1 : 0; 
#line 1368 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: unsigned long _Maxcode; 
#line 1372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Codecvt_mode _Mode; 
#line 1373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 1920 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> class codecvt< __wchar_t, char, _Mbstatet>  : public codecvt_base { 
#line 1923 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: using intern_type = __wchar_t; 
#line 1924 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using extern_type = char; 
#line 1925 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using state_type = mbstate_t; 
#line 1927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, __wchar_t *
#line 1928 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First2, __wchar_t *_Last2, __wchar_t *&_Mid2) const { 
#line 1930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1931 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1933 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result out(mbstate_t &_State, const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *&
#line 1934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1936 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1937 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1941 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1942 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1944 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1947 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1948 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1950 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale::id id; 
#line 1952 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 1953 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 1954 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 1955 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1958 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 1959 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 1960 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1962 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 1964 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ppf && (!(*_Ppf))) { 
#line 1965 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ppf) = (new std::codecvt< __wchar_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 1966 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1968 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 2; 
#line 1969 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1972 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual ~codecvt() noexcept override { } 
#line 1974 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) { 
#line 1975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 1976 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 1978 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_in(mbstate_t &, const char *_First1, const char *_Last1, const char *&_Mid1, __wchar_t *
#line 1979 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First2, __wchar_t *_Last2, __wchar_t *&_Mid2) const { 
#line 1981 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mystate{}; 
#line 1982 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 1983 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 1984 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 1985 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 1986 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; ;) { 
#line 1987 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Mid1 == _Last1) { 
#line 1988 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ok; 
#line 1989 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1991 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Mid2 == _Last2) { 
#line 1992 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return partial; 
#line 1993 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 1995 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast< size_t>(_Last1 - _Mid1), &_Mystate, &(_Cvt)); 
#line 1996 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
switch (_Bytes) { 
#line 1997 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
case -2:  
#line 1998 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return partial; 
#line 2000 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
case -1:  
#line 2001 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return error; 
#line 2003 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
case 0:  
#line 2004 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Bytes = 1; 
#line 2005 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
; 
#line 2007 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
default:  
#line 2008 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 += _Bytes; 
#line 2009 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid2; 
#line 2010 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 2011 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2012 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2013 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2015 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_out(mbstate_t &_State, const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *&
#line 2016 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2018 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 2019 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 2020 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 2021 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 2022 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes; 
#line 2024 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 2025 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((5) <= (_Last2 - _Mid2)) { 
#line 2026 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2027 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return error; 
#line 2028 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 2029 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 2030 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2031 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2032 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 2033 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Buf[5]; 
#line 2034 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Stsave = _State; 
#line 2036 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2037 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return error; 
#line 2038 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if ((_Last2 - _Mid2) < _Bytes) { 
#line 2039 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_State = _Stsave; 
#line 2040 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 2041 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 2042 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2043 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 2044 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2045 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  
#line 2046 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2047 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2049 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_Mid1 == _Last1) ? ok : partial; 
#line 2050 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2052 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2054 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 2055 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 2056 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result _Ans = (ok); 
#line 2057 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes; 
#line 2058 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Buf[5]; 
#line 2059 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Stsave = _State; 
#line 2061 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 2062 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ans = (error); 
#line 2063 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if ((_Last2 - _Mid2) < (--_Bytes)) { 
#line 2064 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_State = _Stsave; 
#line 2065 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ans = (partial); 
#line 2066 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (0 < _Bytes) { 
#line 2067 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2068 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2069 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  }  
#line 2070 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Ans; 
#line 2071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2073 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_length(mbstate_t &
#line 2074 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2077 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 2078 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const auto _Old_first1 = _First1; 
#line 2080 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; (_Count > (0U)) && (_First1 != _Last1); --_Count) { 
#line 2081 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t _Ch; 
#line 2082 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast< size_t>(_Last1 - _First1), &_State, &(_Cvt)); 
#line 2083 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Bytes < 0) { 
#line 2084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 2085 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2087 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Bytes == 0) { 
#line 2088 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Bytes = 1; 
#line 2089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2092 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First1 += _Bytes; 
#line 2093 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2095 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return static_cast< int>((::std::min)(_First1 - _Old_first1, (ptrdiff_t)2147483647)); 
#line 2096 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2098 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual bool do_always_noconv() const noexcept override { 
#line 2100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return false; 
#line 2101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_max_length() const noexcept override { 
#line 2105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return static_cast< int>((_Cvt)._Mbcurmax); 
#line 2106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_encoding() const noexcept override { 
#line 2110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ((_Cvt)._Mbcurmax) == (1); 
#line 2111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: _Locinfo::_Cvtvec _Cvt; 
#line 2115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 2119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> class codecvt< unsigned short, char, _Mbstatet>  : public codecvt_base { 
#line 2122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: using intern_type = unsigned short; 
#line 2123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using extern_type = char; 
#line 2124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using state_type = mbstate_t; 
#line 2126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, unsigned short *
#line 2127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First2, unsigned short *_Last2, unsigned short *&_Mid2) const { 
#line 2129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 2130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result out(mbstate_t &_State, const unsigned short *_First1, const unsigned short *_Last1, const unsigned short *&
#line 2133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 2136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 2141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_length(_State, _First1, _Last1, _Count); 
#line 2147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale::id id; 
#line 2151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 2152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 2154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 2158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 2159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ppf && (!(*_Ppf))) { 
#line 2164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ppf) = (new std::codecvt< unsigned short, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 2; 
#line 2168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual ~codecvt() noexcept override { } 
#line 2173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) { 
#line 2174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 2175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_in(mbstate_t &, const char *_First1, const char *_Last1, const char *&_Mid1, unsigned short *
#line 2178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First2, unsigned short *_Last2, unsigned short *&_Mid2) const { 
#line 2180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mystate{}; 
#line 2181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 2182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 2183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 2184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 2185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; ;) { 
#line 2186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Mid1 == _Last1) { 
#line 2187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ok; 
#line 2188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Mid2 == _Last2) { 
#line 2191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return partial; 
#line 2192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes = _Mbrtowc(reinterpret_cast< __wchar_t *>(_Mid2), _Mid1, static_cast< size_t>(_Last1 - _Mid1), &_Mystate, &(_Cvt)); 
#line 2196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
switch (_Bytes) { 
#line 2197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
case -2:  
#line 2198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return partial; 
#line 2200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
case -1:  
#line 2201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return error; 
#line 2203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
case 0:  
#line 2204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Bytes = 1; 
#line 2205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
; 
#line 2207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
default:  
#line 2208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 += _Bytes; 
#line 2209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid2; 
#line 2210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 2211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_out(mbstate_t &_State, const unsigned short *_First1, const unsigned short *
#line 2216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last1, const unsigned short *&_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 2219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 2220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid1 = _First1; 
#line 2221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 2222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes; 
#line 2224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 2225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((5) <= (_Last2 - _Mid2)) { 
#line 2226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return error; 
#line 2228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 2229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 2230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 2233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Buf[5]; 
#line 2234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Stsave = _State; 
#line 2236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return error; 
#line 2238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if ((_Last2 - _Mid2) < _Bytes) { 
#line 2239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_State = _Stsave; 
#line 2240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 2241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 2242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2243 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_Mid1; 
#line 2244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  
#line 2246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_Mid1 == _Last1) ? ok : partial; 
#line 2250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual result do_unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First2, _Last2); 
#line 2255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 = _First2; 
#line 2256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
result _Ans = (ok); 
#line 2257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes; 
#line 2258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Buf[5]; 
#line 2259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Stsave = _State; 
#line 2261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 2262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ans = (error); 
#line 2263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if ((_Last2 - _Mid2) < (--_Bytes)) { 
#line 2264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_State = _Stsave; 
#line 2265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Ans = (partial); 
#line 2266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (0 < _Bytes) { 
#line 2267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Mid2 += _Bytes; 
#line 2269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  }  
#line 2271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Ans; 
#line 2272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_length(mbstate_t &
#line 2275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2278 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First1, _Last1); 
#line 2279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const auto _Old_first1 = _First1; 
#line 2281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; (_Count > (0U)) && (_First1 != _Last1); --_Count) { 
#line 2282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t _Ch; 
#line 2283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast< size_t>(_Last1 - _First1), &_State, &(_Cvt)); 
#line 2284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Bytes < 0) { 
#line 2285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
break; 
#line 2286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Bytes == 0) { 
#line 2289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Bytes = 1; 
#line 2290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First1 += _Bytes; 
#line 2294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return static_cast< int>((::std::min)(_First1 - _Old_first1, (ptrdiff_t)2147483647)); 
#line 2297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual bool do_always_noconv() const noexcept override { 
#line 2301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return false; 
#line 2302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_max_length() const noexcept override { 
#line 2306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return static_cast< int>((_Cvt)._Mbcurmax); 
#line 2307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual int do_encoding() const noexcept override { 
#line 2311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ((_Cvt)._Mbcurmax) == 1U; 
#line 2312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: _Locinfo::_Cvtvec _Cvt; 
#line 2316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 2319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Elem, class _Byte, class _Statype >
class codecvt_byname : public codecvt < _Elem, _Byte, _Statype > {
public :
    static_assert ( ! 0
                      || _Is_any_of_v < codecvt_byname,



                          codecvt_byname < char, char, mbstate_t >, codecvt_byname < wchar_t, char, mbstate_t >>,
        "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    explicit codecvt_byname ( const char * _Locname, size_t _Refs = 0 )
        : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Locname ), _Refs ) { }

    explicit codecvt_byname ( const string & _Str, size_t _Refs = 0 )
        : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Str . c_str ( ) ), _Refs ) { }

protected :
     ~ codecvt_byname ( ) noexcept override { }
};
#line 2350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
struct ctype_base : public locale::facet { 
#line 2353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
enum { 
#line 2354 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
alnum = (((4 | 2) | 1) | 256), 
#line 2355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
alpha = ((2 | 1) | 256), 
#line 2356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
cntrl = 32, 
#line 2357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
digit = 4, 
#line 2358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
graph = ((((4 | 2) | 16) | 1) | 256), 
#line 2359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
lower = 2, 
#line 2360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
print = ((((((4 | 2) | 16) | 64) | 1) | 256) | 128), 
#line 2361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
punct = 16, 
#line 2362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
space = (8 | 64), 
#line 2363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
upper = 1, 
#line 2364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
xdigit = 128, 
#line 2365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
blank = (8 | 64)
#line 2366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 2367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using mask = short; 
#line 2369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
ctype_base(size_t _Refs = 0) noexcept : locale::facet(_Refs) 
#line 2370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ } 
#line 2372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual ~ctype_base() noexcept override { } 
#line 2373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 2385 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Elem >
class ctype : public ctype_base {
public :

    static_assert ( ! 0 || _Always_false < _Elem >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    using char_type = _Elem;

    bool is ( mask _Maskval, _Elem _Ch ) const {
        return do_is ( _Maskval, _Ch );
    }

    const _Elem * is ( const _Elem * _First, const _Elem * _Last,
        mask * _Dest ) const {
        return do_is ( _First, _Last, _Dest );
    }

    const _Elem * scan_is ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        return do_scan_is ( _Maskval, _First, _Last );
    }

    const _Elem * scan_not ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        return do_scan_not ( _Maskval, _First, _Last );
    }

    _Elem tolower ( _Elem _Ch ) const {
        return do_tolower ( _Ch );
    }

    const _Elem * tolower (
        _Elem * _First, const _Elem * _Last ) const {
        return do_tolower ( _First, _Last );
    }

    _Elem toupper ( _Elem _Ch ) const {
        return do_toupper ( _Ch );
    }

    const _Elem * toupper (
        _Elem * _First, const _Elem * _Last ) const {
        return do_toupper ( _First, _Last );
    }

    _Elem widen ( char _Byte ) const {
        return do_widen ( _Byte );
    }

    const char * widen ( const char * _First, const char * _Last,
        _Elem * _Dest ) const {
        return do_widen ( _First, _Last, _Dest );
    }

    char narrow ( _Elem _Ch, char _Dflt = '\000' ) const {
        return do_narrow ( _Ch, _Dflt );
    }

    const _Elem * narrow ( const _Elem * _First, const _Elem * _Last, char _Dflt,
        char * _Dest ) const {
        return do_narrow ( _First, _Last, _Dflt, _Dest );
    }

     static locale :: id id;

    explicit ctype ( size_t _Refs = 0 ) : ctype_base ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     ctype ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : ctype_base ( _Refs ) {
        _Init ( _Lobj );
    }

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {
        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new ctype < _Elem > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 2;
    }

protected :
     ~ ctype ( ) noexcept override {
        if ( _Ctype . _Delfl ) {
            :: free ( const_cast < short * > ( _Ctype . _Table ) );
        }

        :: free ( _Ctype . _LocaleName );
    }

    void _Init ( const _Locinfo & _Lobj ) {
        _Ctype = _Lobj . _Getctype ( );
        _Cvt = _Lobj . _Getcvt ( );
    }

    virtual bool do_is (
        mask _Maskval, _Elem _Ch ) const {
        return ( _Ctype . _Table [ static_cast < unsigned char > ( narrow ( _Ch ) ) ] & _Maskval ) != 0;
    }

    virtual const _Elem * do_is ( const _Elem * _First, const _Elem * _Last,
        mask * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Ctype . _Table [ static_cast < unsigned char > ( narrow ( * _First ) ) ];
        }

        return _First;
    }

    virtual const _Elem * do_scan_is ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        while ( _First != _Last && ! is ( _Maskval, * _First ) ) {
            ++ _First;
        }

        return _First;
    }

    virtual const _Elem * do_scan_not ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        while ( _First != _Last && is ( _Maskval, * _First ) ) {
            ++ _First;
        }

        return _First;
    }

    virtual _Elem do_tolower ( _Elem _Ch ) const {
        unsigned char _Byte = static_cast < unsigned char > ( narrow ( _Ch, '\000' ) );
        if ( _Byte == '\000' ) {
            return _Ch;
        }

        return widen ( static_cast < char > ( _Tolower ( _Byte, & _Ctype ) ) );
    }

    virtual const _Elem * do_tolower ( _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First ) {
            unsigned char _Byte = static_cast < unsigned char > ( narrow ( * _First, '\000' ) );
            if ( _Byte != '\000' ) {
                * _First = ( widen ( static_cast < char > ( _Tolower ( _Byte, & _Ctype ) ) ) );
            }
        }
        return _First;
    }

    virtual _Elem do_toupper ( _Elem _Ch ) const {
        unsigned char _Byte = static_cast < unsigned char > ( narrow ( _Ch, '\000' ) );
        if ( _Byte == '\000' ) {
            return _Ch;
        }

        return widen ( static_cast < char > ( _Toupper ( _Byte, & _Ctype ) ) );
    }

    virtual const _Elem * do_toupper ( _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First ) {
            unsigned char _Byte = static_cast < unsigned char > ( narrow ( * _First, '\000' ) );
            if ( _Byte != '\000' ) {
                * _First = ( widen ( static_cast < char > ( _Toupper ( _Byte, & _Ctype ) ) ) );
            }
        }

        return _First;
    }

    virtual _Elem do_widen ( char _Byte ) const {
        return _Maklocchr ( _Byte, static_cast < _Elem * > ( nullptr ), _Cvt );
    }

    virtual const char * do_widen (
        const char * _First, const char * _Last, _Elem * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Maklocchr ( * _First, static_cast < _Elem * > ( nullptr ), _Cvt );
        }

        return _First;
    }

    char _Donarrow ( _Elem _Ch, char _Dflt ) const {
        char _Byte;
        if ( _Ch == _Elem { } ) {
            return '\000';
        }

        if ( ( _Byte = _Maklocbyte ( _Ch, _Cvt ) ) == '\000' ) {
            return _Dflt;
        }

        return _Byte;
    }

    virtual char do_narrow ( _Elem _Ch, char _Dflt ) const {
        return _Donarrow ( _Ch, _Dflt );
    }

    virtual const _Elem * do_narrow ( const _Elem * _First, const _Elem * _Last, char _Dflt,
        char * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Donarrow ( * _First, _Dflt );
        }

        return _First;
    }

private :
    _Locinfo :: _Ctypevec _Ctype;
    _Locinfo :: _Cvtvec _Cvt;
};
#line 2611 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template< class _Elem> locale::id 
#line 2612 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
ctype< _Elem> ::id; 
#line 2619 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> class ctype< char>  : public ctype_base { 
#line 2621 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: using _Elem = char; 
#line 2622 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using char_type = _Elem; 
#line 2624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const { 
#line 2625 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ((((_Ctype)._Table)[static_cast< unsigned char>(_Ch)]) & _Maskval) != 0; 
#line 2626 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2628 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2629 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2630 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2631 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2632 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Dest) = (((_Ctype)._Table)[static_cast< unsigned char>(*_First)]); 
#line 2633 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2635 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2636 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2638 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2639 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2640 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2641 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 2642 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_First; 
#line 2643 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2645 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2646 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2648 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2649 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2650 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2651 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 2652 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_First; 
#line 2653 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2655 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2656 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2658 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem tolower(_Elem _Ch) const { 
#line 2659 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2660 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2662 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *tolower(_Elem *
#line 2663 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const _Elem *_Last) const { 
#line 2664 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2665 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2667 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem toupper(_Elem _Ch) const { 
#line 2668 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2669 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2671 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *toupper(_Elem *
#line 2672 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const _Elem *_Last) const { 
#line 2673 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2676 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem widen(char _Byte) const { 
#line 2677 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2678 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2680 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *widen(const char *_First, const char *_Last, _Elem *
#line 2681 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2682 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2683 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2685 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 2686 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2687 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2689 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 2690 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2691 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2692 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2694 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale::id id; 
#line 2696 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit ctype(const mask *_Table = 0, bool _Deletetable = false, size_t 
#line 2697 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Refs = 0) : ctype_base(_Refs) 
#line 2698 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ 
#line 2699 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2700 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 2701 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2703 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Tidy(); 
#line 2704 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Table) { 
#line 2705 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
((_Ctype)._Table) = _Table; 
#line 2706 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
((_Ctype)._Delfl) = (_Deletetable ? -1 : 0); 
#line 2707 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { 
#line 2708 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
((_Ctype)._Table) = classic_table(); 
#line 2709 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
((_Ctype)._Delfl) = 0; 
#line 2710 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2711 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2713 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2714 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 2715 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2717 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2718 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ppf && (!(*_Ppf))) { 
#line 2719 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ppf) = (new std::ctype< char> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2720 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2722 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 2; 
#line 2723 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2725 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const mask *table() const noexcept { 
#line 2726 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_Ctype)._Table; 
#line 2727 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2729 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static const mask *__cdecl classic_table() noexcept { 
#line 2730 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ::std::use_facet< std::ctype< char> > (locale::classic()).table(); 
#line 2731 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2733 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static const size_t table_size = (1 << 8); 
#line 2736 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual ~ctype() noexcept override { 
#line 2737 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Tidy(); 
#line 2738 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2740 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) { 
#line 2741 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2742 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2744 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Tidy() noexcept { 
#line 2745 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (0 < ((_Ctype)._Delfl)) { 
#line 2746 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::free(const_cast< short *>((_Ctype)._Table)); 
#line 2747 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} else { if (((_Ctype)._Delfl) < 0) { 
#line 2748 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
delete [] ((_Ctype)._Table); 
#line 2749 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  }  
#line 2751 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2752 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2754 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 2755 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return static_cast< _Elem>(_Tolower(static_cast< unsigned char>(_Ch), &(_Ctype))); 
#line 2756 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2758 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2759 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2760 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2761 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2762 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_First) = (static_cast< _Elem>(_Tolower(static_cast< unsigned char>(*_First), &(_Ctype)))); 
#line 2763 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2765 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2766 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2768 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 2769 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return static_cast< _Elem>(_Toupper(static_cast< unsigned char>(_Ch), &(_Ctype))); 
#line 2770 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2772 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2773 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2774 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2776 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_First) = (static_cast< _Elem>(_Toupper(static_cast< unsigned char>(*_First), &(_Ctype)))); 
#line 2777 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2779 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2780 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2782 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const { 
#line 2783 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Byte; 
#line 2784 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2786 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_widen(const char *
#line 2787 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const char *_Last, _Elem *_Dest) const { 
#line 2788 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2789 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::memcpy(_Dest, _First, static_cast< size_t>(_Last - _First)); 
#line 2790 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Last; 
#line 2791 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2793 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_narrow(_Elem _Ch, char) const { 
#line 2794 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Ch; 
#line 2795 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2797 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char, char *
#line 2798 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2799 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2800 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::memcpy(_Dest, _First, static_cast< size_t>(_Last - _First)); 
#line 2801 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Last; 
#line 2802 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2805 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 2806 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 2809 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> class ctype< __wchar_t>  : public ctype_base { 
#line 2812 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: using _Elem = __wchar_t; 
#line 2813 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using char_type = _Elem; 
#line 2815 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const { 
#line 2816 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_is(_Maskval, _Ch); 
#line 2817 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2819 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2820 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2821 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_is(_First, _Last, _Dest); 
#line 2822 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2824 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2825 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2826 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2827 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2829 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2830 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2831 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2832 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2834 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem tolower(_Elem _Ch) const { 
#line 2835 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 2836 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2838 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *tolower(_Elem *
#line 2839 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const _Elem *_Last) const { 
#line 2840 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 2841 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2843 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem toupper(_Elem _Ch) const { 
#line 2844 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 2845 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2847 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *toupper(_Elem *
#line 2848 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const _Elem *_Last) const { 
#line 2849 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 2850 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem widen(char _Byte) const { 
#line 2853 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_widen(_Byte); 
#line 2854 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2856 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2857 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2858 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 2859 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2861 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 2862 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 2863 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2865 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 2866 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2867 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2868 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2870 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale::id id; 
#line 2872 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2873 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 2874 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 2875 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2876 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2879 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 2880 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2882 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2883 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ppf && (!(*_Ppf))) { 
#line 2884 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ppf) = (new std::ctype< __wchar_t> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2885 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2887 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 2; 
#line 2888 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2891 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual ~ctype() noexcept override { 
#line 2892 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Ctype)._Delfl) { 
#line 2893 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::free(const_cast< short *>((_Ctype)._Table)); 
#line 2894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2896 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 2897 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2899 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) { 
#line 2900 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 2901 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 2902 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2904 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual bool do_is(mask 
#line 2905 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Maskval, _Elem _Ch) const { 
#line 2906 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2907 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2909 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_is(const _Elem *_First, const _Elem *_Last, mask *
#line 2910 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2911 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2912 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ::_Getwctypes(_First, _Last, _Dest, &(_Ctype)); 
#line 2913 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2915 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2916 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2917 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2918 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 2919 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_First; 
#line 2920 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2922 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2923 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2925 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2926 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2928 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 2929 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_First; 
#line 2930 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2932 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2933 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2935 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 2936 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Towlower(_Ch, &(_Ctype)); 
#line 2937 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2939 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2940 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2941 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2942 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2943 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_First) = _Towlower(*_First, &(_Ctype)); 
#line 2944 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2946 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2947 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2949 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 2950 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Towupper(_Ch, &(_Ctype)); 
#line 2951 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2953 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2954 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 2955 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 2957 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_First) = _Towupper(*_First, &(_Ctype)); 
#line 2958 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2960 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2961 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2963 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem _Dowiden(char _Byte) const { 
#line 2964 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2965 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
__wchar_t _Wc; 
#line 2966 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? static_cast< __wchar_t>((wint_t)65535) : _Wc; 
#line 2967 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2969 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const { 
#line 2970 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->_Dowiden(_Byte); 
#line 2971 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2973 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const char *do_widen(const char *
#line 2974 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const char *_Last, _Elem *_Dest) const { 
#line 2975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2976 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2977 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Dest) = this->_Dowiden(*_First); 
#line 2978 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 2980 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 2981 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2983 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Donarrow(_Elem _Ch, char _Dflt) const { 
#line 2984 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Buf[5]; 
#line 2985 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 2986 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : (_Buf[0]); 
#line 2987 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2989 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual char do_narrow(_Elem _Ch, char _Dflt) const { 
#line 2990 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->_Donarrow(_Ch, _Dflt); 
#line 2991 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 2993 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 2994 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 2995 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 2996 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2997 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Dest) = this->_Donarrow(*_First, _Dflt); 
#line 2998 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3000 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 3001 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3004 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 3005 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locinfo::_Cvtvec _Cvt; 
#line 3006 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 3010 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template<> class ctype< unsigned short>  : public ctype_base { 
#line 3013 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
public: using _Elem = unsigned short; 
#line 3014 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
using char_type = _Elem; 
#line 3016 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
bool is(mask _Maskval, _Elem _Ch) const { 
#line 3017 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_is(_Maskval, _Ch); 
#line 3018 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3020 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 3021 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 3022 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_is(_First, _Last, _Dest); 
#line 3023 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3025 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 3026 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 3027 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_scan_is(_Maskval, _First, _Last); 
#line 3028 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3030 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 3031 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 3032 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_scan_not(_Maskval, _First, _Last); 
#line 3033 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3035 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem tolower(_Elem _Ch) const { 
#line 3036 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_tolower(_Ch); 
#line 3037 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3039 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *tolower(_Elem *
#line 3040 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const _Elem *_Last) const { 
#line 3041 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_tolower(_First, _Last); 
#line 3042 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3044 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem toupper(_Elem _Ch) const { 
#line 3045 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_toupper(_Ch); 
#line 3046 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3048 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *toupper(_Elem *
#line 3049 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const _Elem *_Last) const { 
#line 3050 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_toupper(_First, _Last); 
#line 3051 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3053 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem widen(char _Byte) const { 
#line 3054 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_widen(_Byte); 
#line 3055 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3057 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const char *widen(const char *_First, const char *_Last, _Elem *
#line 3058 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 3059 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_widen(_First, _Last, _Dest); 
#line 3060 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3062 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 3063 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_narrow(_Ch, _Dflt); 
#line 3064 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3066 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 3067 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 3068 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 3069 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static locale::id id; 
#line 3073 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) { 
#line 3074 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
{ _Locinfo _Lobj; 
#line 3075 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 3076 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3077 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 3080 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
this->_Init(_Lobj); 
#line 3081 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3083 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 3084 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Ppf && (!(*_Ppf))) { 
#line 3085 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Ppf) = (new std::ctype< unsigned short> (((_Locinfo)(_Ploc->_C_str())))); 
#line 3086 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3088 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return 2; 
#line 3089 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3092 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
protected: virtual ~ctype() noexcept override { 
#line 3093 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if ((_Ctype)._Delfl) { 
#line 3094 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::free(const_cast< short *>((_Ctype)._Table)); 
#line 3095 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3097 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
::free((_Ctype)._LocaleName); 
#line 3098 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
void _Init(const _Locinfo &_Lobj) { 
#line 3101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Ctype) = _Lobj._Getctype(); 
#line 3102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(_Cvt) = _Lobj._Getcvt(); 
#line 3103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual bool do_is(mask 
#line 3106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Maskval, _Elem _Ch) const { 
#line 3107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 3108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_is(const _Elem *_First, const _Elem *_Last, mask *
#line 3111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 3112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return reinterpret_cast< const _Elem *>(::_Getwctypes(reinterpret_cast< const __wchar_t *>(_First), reinterpret_cast< const __wchar_t *>(_Last), _Dest, &(_Ctype))); 
#line 3115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 3118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 3119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 3121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_First; 
#line 3122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 3125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 3128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 3129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 3131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
++_First; 
#line 3132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 3135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 3138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Towlower(_Ch, &(_Ctype)); 
#line 3139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 3142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 3143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 3145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_First) = (_Towlower(*_First, &(_Ctype))); 
#line 3146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 3149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 3152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Towupper(_Ch, &(_Ctype)); 
#line 3153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 3156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Last) const { 
#line 3157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; ++_First) { 
#line 3159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_First) = (_Towupper(*_First, &(_Ctype))); 
#line 3160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 3163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Elem _Dowiden(char _Byte) const { 
#line 3166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 3167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
unsigned short _Wc; 
#line 3169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
if (_Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), &_Byte, 1, &_Mbst, &(_Cvt)) < 0) { 
#line 3170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return static_cast< unsigned short>((wint_t)65535); 
#line 3171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _Wc; 
#line 3174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual _Elem do_widen(char _Byte) const { 
#line 3177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->_Dowiden(_Byte); 
#line 3178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const char *do_widen(const char *
#line 3181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_First, const char *_Last, _Elem *_Dest) const { 
#line 3182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Dest) = this->_Dowiden(*_First); 
#line 3185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 3188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Donarrow(_Elem _Ch, char _Dflt) const { 
#line 3191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
char _Buf[5]; 
#line 3192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
mbstate_t _Mbst = {}; 
#line 3193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : (_Buf[0]); 
#line 3194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual char do_narrow(_Elem _Ch, char _Dflt) const { 
#line 3197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return this->_Donarrow(_Ch, _Dflt); 
#line 3198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 3201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Dest) const { 
#line 3202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Adl_verify_range(_First, _Last); 
#line 3203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
(*_Dest) = this->_Donarrow(*_First, _Dflt); 
#line 3205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}  
#line 3207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
return _First; 
#line 3208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
} 
#line 3211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
private: _Locinfo::_Ctypevec _Ctype; 
#line 3212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
_Locinfo::_Cvtvec _Cvt; 
#line 3213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}; 
#line 3216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _Elem >
class ctype_byname : public ctype < _Elem > {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    explicit ctype_byname ( const char * _Locname, size_t _Refs = 0 )
        : ctype < _Elem > ( _Locinfo ( _Locname ), _Refs ) { }

    explicit ctype_byname ( const string & _Str, size_t _Refs = 0 )
        : ctype < _Elem > ( _Locinfo ( _Str . c_str ( ) ), _Refs ) { }

protected :
     ~ ctype_byname ( ) noexcept override { }
};
#line 3231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
enum class _Case_sensitive: bool { _Nope, _Yes}; 
#line 3233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
template < class _InIt, class _Elem >
int __cdecl _Getloctxt (
    _InIt & _First, _InIt & _Last, size_t _Numfields, const _Elem * _Ptr, const _Case_sensitive _Matching ) {

    for ( size_t _Off = 0; _Ptr [ _Off ] != _Elem { }; ++ _Off ) {
        if ( _Ptr [ _Off ] == _Ptr [ 0 ] ) {
            ++ _Numfields;
        }
    }

    string _Str ( _Numfields, '\000' );
    const ctype < _Elem > & _CType = :: std :: use_facet < ctype < _Elem >> ( locale { } );

    int _Ans = - 2;
    for ( size_t _Column = 1;; ++ _Column, ( void ) ++ _First, _Ans = - 1 ) {
        bool _Prefix = false;
        size_t _Off = 0;
        size_t _Field = 0;

        for (; _Field < _Numfields; ++ _Field ) {
            while ( _Ptr [ _Off ] != _Elem { } && _Ptr [ _Off ] != _Ptr [ 0 ] ) {
                ++ _Off;
            }

            if ( _Str [ _Field ] != '\000' ) {
                _Off += _Str [ _Field ];
            } else if ( _Ptr [ _Off += _Column ] == _Ptr [ 0 ]
                       || _Ptr [ _Off ] == _Elem { } ) {
                _Str [ _Field ] = static_cast < char > ( _Column < 127 ? _Column : 127 );
                _Ans = static_cast < int > ( _Field );
            } else if ( _First == _Last
                       || ( _Matching == _Case_sensitive :: _Yes
                               ? _Ptr [ _Off ] != * _First
                               : _CType . tolower ( _Ptr [ _Off ] ) != _CType . tolower ( static_cast < _Elem > ( * _First ) ) ) ) {
                _Str [ _Field ] = static_cast < char > ( _Column < 127 ? _Column : 127 );
            } else {
                _Prefix = true;
            }
        }

        if ( ! _Prefix || _First == _Last ) {
            break;
        }
    }
    return _Ans;
}
#line 3285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
}
#line 3288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocale"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
namespace std { 
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
template< class _Dummy> 
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
class _Iosb { 
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
public: enum _Fmtflags { 
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Fmtmask = 65535, 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Fmtzero = 0
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int skipws = 1; 
#line 31 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int unitbuf = 2; 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int uppercase = 4; 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int showbase = 8; 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int showpoint = 16; 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int showpos = 32; 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int left = 64; 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int right = 128; 
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int internal = 256; 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int dec = 512; 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int oct = 1024; 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int hex = 2048; 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int scientific = 4096; 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int fixed = 8192; 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int hexfloat = 12288; 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int boolalpha = 16384; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int adjustfield = ((left | right) | internal); 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int basefield = ((dec | oct) | hex); 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int floatfield = (scientific | fixed); 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
enum _Iostate { 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Statmask = 23
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int goodbit = 0; 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int eofbit = 1; 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int failbit = 2; 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int badbit = 4; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int in = 1; 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int out = 2; 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int ate = 4; 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int app = 8; 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int trunc = 16; 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int _Nocreate = 64; 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int _Noreplace = 128; 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int binary = 32; 
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int beg = 0; 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int cur = 1; 
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int end = 2; 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static constexpr int _Default_open_prot = 64; 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
enum _Dummy_enum { _Dummy_enum_val = 1}; 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
enum _Openmode { _Openmask = 255}; 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
enum _Seekdir { _Seekbeg, _Seekcur, _Seekend}; 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
enum { _Openprot = 64}; 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
class ios_base : public _Iosb< int>  { 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
public: using fmtflags = int; 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using iostate = int; 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using openmode = int; 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using seekdir = int; 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using streamoff = std::streamoff; 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using streampos = std::streampos; 
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
enum event { 
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
erase_event, 
#line 101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
imbue_event, 
#line 102 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
copyfmt_event
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using event_callback = void (__cdecl *)(event, ios_base &, int); 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using io_state = unsigned; 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using open_mode = unsigned; 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
using seek_dir = unsigned; 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
class failure : public system_error { 
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
public: explicit failure(const string &_Message, const error_code &_Errcode = ::std::make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 116 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
{ } 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
explicit failure(const char *_Message, const error_code &_Errcode = ::std::make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
{ } 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
class Init { 
#line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
public: Init() { 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Init_ctor(this); 
#line 133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
~Init() noexcept { 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Init_dtor(this); 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
private: static void __cdecl _Init_ctor(Init *); 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static void __cdecl _Init_dtor(Init *); 
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static int _Init_cnt; 
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static int &__cdecl _Init_cnt_func(); 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
explicit operator bool() const noexcept { 
#line 149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return !this->fail(); 
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] bool operator!() const noexcept { 
#line 153 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return this->fail(); 
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void clear(iostate _State, bool _Reraise) { 
#line 157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_State &= (_Statmask); 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Mystate) = _State; 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
const auto _Filtered = _State & (_Except); 
#line 160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
if (_Filtered) { 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
if (_Reraise) { 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
throw; 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
const char *_Msg; 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
if (_Filtered & ios_base::badbit) { 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Msg = ("ios_base::badbit set"); 
#line 168 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} else { if (_Filtered & ios_base::failbit) { 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Msg = ("ios_base::failbit set"); 
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} else { 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Msg = ("ios_base::eofbit set"); 
#line 172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  }  
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
throw ((failure)(_Msg)); 
#line 175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void clear(iostate _State = goodbit) { 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->clear(_State, false); 
#line 180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void clear(io_state _State) { 
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->clear(static_cast< iostate>(_State)); 
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] iostate rdstate() const noexcept { 
#line 189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Mystate; 
#line 190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void setstate(iostate 
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_State, bool _Exreraise) { 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->clear(this->rdstate() | _State, _Exreraise); 
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void setstate(iostate _State) { 
#line 198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->clear(this->rdstate() | _State, false); 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void setstate(io_state _State) { 
#line 203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->setstate(static_cast< iostate>(_State)); 
#line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] bool good() const noexcept { 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return this->rdstate() == ios_base::goodbit; 
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] bool eof() const noexcept { 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return this->rdstate() & ios_base::eofbit; 
#line 213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] bool fail() const noexcept { 
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return this->rdstate() & (ios_base::badbit | ios_base::failbit); 
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] bool bad() const noexcept { 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return this->rdstate() & ios_base::badbit; 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] iostate exceptions() const noexcept { 
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Except; 
#line 225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void exceptions(iostate _Newexcept) { 
#line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Except) = (_Newexcept & (_Statmask)); 
#line 229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->clear(this->rdstate()); 
#line 230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void exceptions(io_state _State) { 
#line 234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->exceptions(static_cast< iostate>(_State)); 
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 238 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] fmtflags flags() const noexcept { 
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Fmtfl; 
#line 240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
fmtflags flags(fmtflags _Newfmtflags) noexcept { 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Fmtfl) = (_Newfmtflags & (_Fmtmask)); 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Oldfmtflags; 
#line 247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
fmtflags setf(fmtflags _Newfmtflags) noexcept { 
#line 251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Fmtfl) |= (_Newfmtflags & (_Fmtmask)); 
#line 253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Oldfmtflags; 
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask) noexcept { 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Fmtfl) = ((_Oldfmtflags & (~_Mask)) | ((_Newfmtflags & _Mask) & (_Fmtmask))); 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Oldfmtflags; 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 263 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void unsetf(fmtflags _Mask) noexcept { 
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Fmtfl) &= (~_Mask); 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] streamsize precision() const noexcept { 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Prec; 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
streamsize precision(streamsize _Newprecision) noexcept { 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
const streamsize _Oldprecision = _Prec; 
#line 275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Prec) = _Newprecision; 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Oldprecision; 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] streamsize width() const noexcept { 
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Wide; 
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
streamsize width(streamsize _Newwidth) noexcept { 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
const streamsize _Oldwidth = _Wide; 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Wide) = _Newwidth; 
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Oldwidth; 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] locale getloc() const noexcept { 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return *(_Ploc); 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
locale imbue(const locale &_Loc) { 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
locale _Oldlocale = *(_Ploc); 
#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
((*(_Ploc)) = _Loc); 
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->_Callfns(imbue_event); 
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Oldlocale; 
#line 299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] static int __cdecl xalloc() { 
#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
{ _Lockit _Lock(2); 
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Index++; 
#line 304 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] long &iword(int _Idx) { 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return this->_Findarr(_Idx)._Lo; 
#line 309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
[[nodiscard]] void *&pword(int _Idx) { 
#line 312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return this->_Findarr(_Idx)._Vp; 
#line 313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void register_callback(event_callback _Pfn, int _Idx) { 
#line 317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Calls) = (new _Fnarray(_Idx, _Pfn, _Calls)); 
#line 318 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
ios_base &copyfmt(const ios_base &_Other) { 
#line 321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
if (this != ::std::addressof(_Other)) { 
#line 322 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->_Tidy(); 
#line 323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
((*(_Ploc)) = (*(_Other._Ploc))); 
#line 324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Fmtfl) = (_Other._Fmtfl); 
#line 325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Prec) = (_Other._Prec); 
#line 326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Wide) = (_Other._Wide); 
#line 327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray *_Ptr = _Other._Arr; 
#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
for ((_Arr) = (nullptr); _Ptr; _Ptr = (_Ptr->_Next)) { 
#line 330 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
if (((_Ptr->_Lo) != (0)) || (_Ptr->_Vp)) { 
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->iword(_Ptr->_Index) = (_Ptr->_Lo); 
#line 332 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->pword(_Ptr->_Index) = (_Ptr->_Vp); 
#line 333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
for (_Fnarray *_Pfa = _Other._Calls; _Pfa; _Pfa = (_Pfa->_Next)) { 
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->register_callback(_Pfa->_Pfn, _Pfa->_Index); 
#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->_Callfns(copyfmt_event); 
#line 341 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->exceptions(_Other._Except); 
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return *this; 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static bool __cdecl sync_with_stdio(bool _Newsync = true) { 
#line 348 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
{ _Lockit _Lock(2); 
#line 349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
const bool _Oldsync = _Sync; 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Sync = _Newsync; 
#line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return _Oldsync; 
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void swap(ios_base &_Right) noexcept { 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
if (this != ::std::addressof(_Right)) { 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
::std::swap(_Mystate, _Right._Mystate); 
#line 358 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
::std::swap(_Except, _Right._Except); 
#line 359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
::std::swap(_Fmtfl, _Right._Fmtfl); 
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
::std::swap(_Prec, _Right._Prec); 
#line 361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
::std::swap(_Wide, _Right._Wide); 
#line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
::std::swap(_Arr, _Right._Arr); 
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
::std::swap(_Calls, _Right._Calls); 
#line 365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
::std::swap(_Ploc, _Right._Ploc); 
#line 366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
virtual ~ios_base() noexcept { 
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Ios_base_dtor(this); 
#line 371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static void __cdecl _Addstd(ios_base *); 
#line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
size_t _Stdstr{(0)}; 
#line 378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
protected: ios_base() { } 
#line 380 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void _Init() { 
#line 381 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Ploc) = (nullptr); 
#line 382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Stdstr) = (0); 
#line 383 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Except) = goodbit; 
#line 384 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Fmtfl) = (skipws | dec); 
#line 385 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Prec) = (6); 
#line 386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Wide) = (0); 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Arr) = (nullptr); 
#line 388 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Calls) = (nullptr); 
#line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->clear(goodbit); 
#line 390 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Ploc) = (new locale); 
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
private: struct _Iosarray : public _Crt_new_delete { 
#line 396 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray(int _Idx, _Iosarray *_Link) : _Next(_Link), _Index(_Idx), _Lo((0)), _Vp((nullptr)) 
#line 397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
{ } 
#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray *_Next; 
#line 400 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
int _Index; 
#line 401 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
long _Lo; 
#line 402 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void *_Vp; 
#line 403 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
struct _Fnarray : public _Crt_new_delete { 
#line 406 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link) : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) 
#line 407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
{ } 
#line 409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Fnarray *_Next; 
#line 410 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
int _Index; 
#line 411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
event_callback _Pfn; 
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 414 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void _Callfns(event _Ev) { 
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
for (_Fnarray *_Pfa = _Calls; _Pfa; _Pfa = (_Pfa->_Next)) { 
#line 416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(*(_Pfa->_Pfn))(_Ev, *this, _Pfa->_Index); 
#line 417 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 418 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray &_Findarr(int _Idx) { 
#line 421 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray *_Ptr1; 
#line 422 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray *_Ptr2; 
#line 424 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
for ((_Ptr1 = (_Arr)), (_Ptr2 = (nullptr)); _Ptr1; _Ptr1 = (_Ptr1->_Next)) { 
#line 425 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
if ((_Ptr1->_Index) == _Idx) { 
#line 426 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return *_Ptr1; 
#line 427 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} else { if (((!_Ptr2) && ((_Ptr1->_Lo) == (0))) && (!(_Ptr1->_Vp))) { 
#line 428 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Ptr2 = _Ptr1; 
#line 429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  }  
#line 430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 432 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
if (_Ptr2) { 
#line 433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Ptr2->_Index) = _Idx; 
#line 434 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return *_Ptr2; 
#line 435 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Arr) = (new _Iosarray(_Idx, _Arr)); 
#line 438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
return *(_Arr); 
#line 439 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 441 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
void _Tidy() noexcept { 
#line 442 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
this->_Callfns(erase_event); 
#line 443 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray *_Ptr1; 
#line 444 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray *_Ptr2; 
#line 446 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
for (_Ptr1 = (_Arr); _Ptr1; _Ptr1 = _Ptr2) { 
#line 447 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Ptr2 = (_Ptr1->_Next); 
#line 448 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
delete _Ptr1; 
#line 449 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 450 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Arr) = (nullptr); 
#line 452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Fnarray *_Pfa1; 
#line 453 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Fnarray *_Pfa2; 
#line 454 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
for (_Pfa1 = (_Calls); _Pfa1; _Pfa1 = _Pfa2) { 
#line 455 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Pfa2 = (_Pfa1->_Next); 
#line 456 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
delete _Pfa1; 
#line 457 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}  
#line 458 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
(_Calls) = (nullptr); 
#line 459 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
} 
#line 461 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
iostate _Mystate{0}; 
#line 462 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
iostate _Except{0}; 
#line 463 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
fmtflags _Fmtfl{0}; 
#line 464 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
streamsize _Prec{0i64}; 
#line 465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
streamsize _Wide{0i64}; 
#line 466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Iosarray *_Arr{(nullptr)}; 
#line 467 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
_Fnarray *_Calls{(nullptr)}; 
#line 468 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
locale *_Ploc{(nullptr)}; 
#line 470 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static int _Index; 
#line 471 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static bool _Sync; 
#line 473 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
static void __cdecl _Ios_base_dtor(ios_base *); 
#line 476 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
public: ios_base(const ios_base &) = delete;
#line 477 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
ios_base &operator=(const ios_base &) = delete;
#line 478 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}; 
#line 479 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
}
#line 482 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xiosbase"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\streambuf"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\streambuf"
namespace std { 
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\streambuf"
template < class _Elem, class _Traits >
class basic_streambuf {
protected :
     basic_streambuf ( ) : _Plocale ( new locale ) {
        _Init ( );
    }

     basic_streambuf ( _Uninitialized ) noexcept { }

     basic_streambuf ( const basic_streambuf & _Right ) : _Plocale ( new locale { _Right . getloc ( ) } ) {
        _Init ( );
        setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
        setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
    }

    basic_streambuf & operator = ( const basic_streambuf & _Right ) {
        if ( this != :: std :: addressof ( _Right ) ) {
            setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
            setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
            pubimbue ( _Right . getloc ( ) );
        }
        return * this;
    }

    void swap ( basic_streambuf & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Elem * _Pfirst0 = pbase ( );
            _Elem * _Pnext0 = pptr ( );
            _Elem * _Pend = epptr ( );
            _Elem * _Gfirst0 = eback ( );
            _Elem * _Gnext0 = gptr ( );
            _Elem * _Gend = egptr ( );

            setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
            _Right . setp ( _Pfirst0, _Pnext0, _Pend );

            setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
            _Right . setg ( _Gfirst0, _Gnext0, _Gend );

            :: std :: swap ( _Plocale, _Right . _Plocale );
        }
    }

public :
    using char_type = _Elem;
    using traits_type = _Traits;

    virtual ~ basic_streambuf ( ) noexcept {
        delete _Plocale;
    }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    pos_type pubseekoff ( off_type _Off, ios_base :: seekdir _Way,
        ios_base :: openmode _Mode = ios_base :: in | ios_base :: out ) {
        return seekoff ( _Off, _Way, _Mode );
    }


    pos_type pubseekoff ( off_type _Off, ios_base :: seek_dir _Way,
        ios_base :: open_mode _Mode ) {
        return pubseekoff ( _Off, static_cast < ios_base :: seekdir > ( _Way ), static_cast < ios_base :: openmode > ( _Mode ) );
    }


    pos_type pubseekpos ( pos_type _Pos,
        ios_base :: openmode _Mode = ios_base :: in | ios_base :: out ) {
        return seekpos ( _Pos, _Mode );
    }


    pos_type pubseekpos ( pos_type _Pos,
        ios_base :: open_mode _Mode ) {
        return seekpos ( _Pos, static_cast < ios_base :: openmode > ( _Mode ) );
    }


    basic_streambuf * pubsetbuf ( _Elem * _Buffer,
        streamsize _Count ) {
        return setbuf ( _Buffer, _Count );
    }

    locale pubimbue ( const locale & _Newlocale ) {
        locale _Oldlocale = * _Plocale;
        imbue ( _Newlocale );
        * _Plocale = _Newlocale;
        return _Oldlocale;
    }

    locale getloc ( ) const noexcept {
        return * _Plocale;
    }

    streamsize in_avail ( ) {
        streamsize _Res = _Gnavail ( );
        return 0 < _Res ? _Res : showmanyc ( );
    }

    int pubsync ( ) {
        return sync ( );
    }

    int_type sbumpc ( ) {
        return 0 < _Gnavail ( ) ? _Traits :: to_int_type ( * _Gninc ( ) ) : uflow ( );
    }

    int_type sgetc ( ) {
        return 0 < _Gnavail ( ) ? _Traits :: to_int_type ( * gptr ( ) ) : underflow ( );
    }

    streamsize sgetn ( _Elem * _Ptr,
        streamsize _Count ) {
        return xsgetn ( _Ptr, _Count );
    }

    int_type snextc ( ) {
        return 1 < _Gnavail ( ) ? _Traits :: to_int_type ( * _Gnpreinc ( ) )
             : _Traits :: eq_int_type ( _Traits :: eof ( ), sbumpc ( ) ) ? _Traits :: eof ( )
                                                              : sgetc ( );
    }

    int_type sputbackc ( _Elem _Ch ) {
        if ( gptr ( ) && eback ( ) < gptr ( ) && _Traits :: eq ( _Ch, gptr ( ) [ - 1 ] ) ) {
            return _Traits :: to_int_type ( * _Gndec ( ) );
        }

        return pbackfail ( _Traits :: to_int_type ( _Ch ) );
    }


    void stossc ( ) {
        if ( 0 < _Gnavail ( ) ) {
            _Gninc ( );
        } else {
            uflow ( );
        }
    }


    int_type sungetc ( ) {
        return gptr ( ) && eback ( ) < gptr ( ) ? _Traits :: to_int_type ( * _Gndec ( ) ) : pbackfail ( );
    }

    int_type sputc ( _Elem _Ch ) {
        return 0 < _Pnavail ( ) ? _Traits :: to_int_type ( * _Pninc ( ) = _Ch ) : overflow ( _Traits :: to_int_type ( _Ch ) );
    }

    streamsize sputn ( const _Elem * _Ptr,
        streamsize _Count ) {
        return xsputn ( _Ptr, _Count );
    }

    virtual void _Lock ( ) { }

    virtual void _Unlock ( ) { }

protected :
    _Elem * eback ( ) const noexcept {
        return * _IGfirst;
    }

    _Elem * gptr ( ) const noexcept {
        return * _IGnext;
    }

    _Elem * pbase ( ) const noexcept {
        return * _IPfirst;
    }

    _Elem * pptr ( ) const noexcept {
        return * _IPnext;
    }

    _Elem * egptr ( ) const noexcept {
        return * _IGnext + * _IGcount;
    }

    void gbump ( int _Off ) noexcept {

        * _IGcount -= _Off;
        * _IGnext += _Off;
    }

    void setg ( _Elem * _First, _Elem * _Next, _Elem * _Last ) noexcept {

        * _IGfirst = _First;
        * _IGnext = _Next;
        * _IGcount = static_cast < int > ( _Last - _Next );
    }

    _Elem * epptr ( ) const noexcept {
        return * _IPnext + * _IPcount;
    }

    _Elem * _Gndec ( ) noexcept {
        ++ * _IGcount;
        return -- * _IGnext;
    }

    _Elem * _Gninc ( ) noexcept {
        -- * _IGcount;
        return ( * _IGnext ) ++;
    }

    _Elem * _Gnpreinc ( ) noexcept {
        -- * _IGcount;
        return ++ ( * _IGnext );
    }

    streamsize _Gnavail ( ) const noexcept {
        return * _IGnext ? * _IGcount : 0;
    }

    void pbump ( int _Off ) noexcept {

        * _IPcount -= _Off;
        * _IPnext += _Off;
    }

    void setp ( _Elem * _First, _Elem * _Last ) noexcept {

        * _IPfirst = _First;
        * _IPnext = _First;
        * _IPcount = static_cast < int > ( _Last - _First );
    }

    void setp ( _Elem * _First, _Elem * _Next, _Elem * _Last ) noexcept {

        * _IPfirst = _First;
        * _IPnext = _Next;
        * _IPcount = static_cast < int > ( _Last - _Next );
    }

    _Elem * _Pninc ( ) noexcept {
        -- * _IPcount;
        return ( * _IPnext ) ++;
    }

    streamsize _Pnavail ( ) const noexcept {
        return * _IPnext ? * _IPcount : 0;
    }

    void _Init ( ) noexcept {
        _IGfirst = & _Gfirst;
        _IPfirst = & _Pfirst;
        _IGnext = & _Gnext;
        _IPnext = & _Pnext;
        _IGcount = & _Gcount;
        _IPcount = & _Pcount;
        setp ( nullptr, nullptr );
        setg ( nullptr, nullptr, nullptr );
    }

    void _Init ( _Elem * * _Gf, _Elem * * _Gn, int * _Gc, _Elem * * _Pf, _Elem * * _Pn, int * _Pc ) noexcept {

        _IGfirst = _Gf;
        _IPfirst = _Pf;
        _IGnext = _Gn;
        _IPnext = _Pn;
        _IGcount = _Gc;
        _IPcount = _Pc;
    }

    virtual int_type overflow ( int_type = _Traits :: eof ( ) ) {
        return _Traits :: eof ( );
    }

    virtual int_type pbackfail ( int_type = _Traits :: eof ( ) ) {

        return _Traits :: eof ( );
    }

    virtual streamsize showmanyc ( ) {
        return 0;
    }

    virtual int_type underflow ( ) {
        return _Traits :: eof ( );
    }

    virtual int_type uflow ( ) {
        return _Traits :: eq_int_type ( _Traits :: eof ( ), underflow ( ) ) ? _Traits :: eof ( ) : _Traits :: to_int_type ( * _Gninc ( ) );
    }

    virtual streamsize xsgetn ( _Elem * _Ptr, streamsize _Count ) {
        const streamsize _Start_count = _Count;

        while ( 0 < _Count ) {
            streamsize _Size = _Gnavail ( );
            if ( 0 < _Size ) {
                if ( _Count < _Size ) {
                    _Size = _Count;
                }

                _Traits :: copy ( _Ptr, gptr ( ), static_cast < size_t > ( _Size ) );
                _Ptr += _Size;
                _Count -= _Size;
                gbump ( static_cast < int > ( _Size ) );
            } else {
                const int_type _Meta = uflow ( );
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    break;
                }


                * _Ptr ++ = _Traits :: to_char_type ( _Meta );
                -- _Count;
            }
        }

        return _Start_count - _Count;
    }

    virtual streamsize xsputn ( const _Elem * _Ptr, streamsize _Count ) {

        const streamsize _Start_count = _Count;
        while ( 0 < _Count ) {
            streamsize _Size = _Pnavail ( );
            if ( 0 < _Size ) {
                if ( _Count < _Size ) {
                    _Size = _Count;
                }

                _Traits :: copy ( pptr ( ), _Ptr, static_cast < size_t > ( _Size ) );
                _Ptr += _Size;
                _Count -= _Size;
                pbump ( static_cast < int > ( _Size ) );
            } else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( _Traits :: to_int_type ( * _Ptr ) ) ) ) {
                break;
            } else {
                ++ _Ptr;
                -- _Count;
            }
        }

        return _Start_count - _Count;
    }

    virtual pos_type seekoff (
        off_type, ios_base :: seekdir, ios_base :: openmode = ios_base :: in | ios_base :: out ) {

        return pos_type { off_type { - 1 } };
    }

    virtual pos_type seekpos ( pos_type, ios_base :: openmode = ios_base :: in | ios_base :: out ) {

        return pos_type { off_type { - 1 } };
    }

    virtual basic_streambuf * setbuf ( _Elem *, streamsize ) {

        return this;
    }

    virtual int sync ( ) {
        return 0;
    }

    virtual void imbue ( const locale & ) { }

private :
    _Elem * _Gfirst { };
    _Elem * _Pfirst { };
    _Elem * * _IGfirst { };
    _Elem * * _IPfirst { };
    _Elem * _Gnext { };
    _Elem * _Pnext { };
    _Elem * * _IGnext { };
    _Elem * * _IPnext { };

    int _Gcount { };
    int _Pcount { };
    int * _IGcount { };
    int * _IPcount { };

protected :
    locale * _Plocale { };
};
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\streambuf"
}
#line 416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\streambuf"
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
extern "C" {
#line 26 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
long __cdecl _Stolx(const char *, char **, int, int *) noexcept; 
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
unsigned long __cdecl _Stoulx(const char *, char **, int, int *) noexcept; 
#line 30 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
__int64 __cdecl _Stollx(const char *, char **, int, int *) noexcept; 
#line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
unsigned __int64 __cdecl _Stoullx(const char *, char **, int, int *) noexcept; 
#line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
}
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
namespace std { 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
constexpr size_t _Max_int_dig = (32); 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
inline double _Stodx_v3(const char *_Str, char **_Endptr, int *_Perr) noexcept { 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
int &_Errno_ref = *_errno(); 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
const int _Orig = _Errno_ref; 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
_Errno_ref = 0; 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
double _Val = ::strtod(_Str, _Endptr); 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
(*_Perr) = _Errno_ref; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
_Errno_ref = _Orig; 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
return _Val; 
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
} 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
inline float _Stofx_v3(const char *_Str, char **_Endptr, int *_Perr) noexcept { 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
int &_Errno_ref = *_errno(); 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
const int _Orig = _Errno_ref; 
#line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
_Errno_ref = 0; 
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
float _Val = ::strtof(_Str, _Endptr); 
#line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
(*_Perr) = _Errno_ref; 
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
_Errno_ref = _Orig; 
#line 62 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
return _Val; 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
} 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template < class _Elem, size_t _Base_size >
size_t _Find_elem ( const _Elem ( & _Base ) [ _Base_size ], const _Elem _Ch ) {


    return static_cast < size_t > ( :: std :: _Find_unchecked ( _Base, _Base + ( _Base_size - 1 ), _Ch ) - _Base );
}
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
inline __wchar_t *_Maklocwcs(const __wchar_t *_Ptr) { 
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
const size_t _Count = ::wcslen(_Ptr) + (1); 
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(calloc(_Count, sizeof(__wchar_t))); 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
if (!_Ptrdest) { 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
_Xbad_alloc(); 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
}  
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
::wmemcpy(_Ptrdest, _Ptr, _Count); 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
return _Ptrdest; 
#line 83 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
} 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template < class _Elem >
class numpunct : public locale :: facet {
private :
    friend _Tidy_guard < numpunct >;

public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    using string_type = basic_string < _Elem, char_traits < _Elem >, allocator < _Elem >>;
    using char_type = _Elem;

      static locale :: id id;

    _Elem decimal_point ( ) const {
        return do_decimal_point ( );
    }

    _Elem thousands_sep ( ) const {
        return do_thousands_sep ( );
    }

    string grouping ( ) const {
        return do_grouping ( );
    }

    string_type falsename ( ) const {
        return do_falsename ( );
    }

    string_type truename ( ) const {
        return do_truename ( );
    }

    explicit numpunct ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        if ( _Kseparator == 0 ) {
            _Kseparator =
                _Maklocchr ( ',', static_cast < _Elem * > ( nullptr ), _Lobj . _Getcvt ( ) );
        }
        }
    }

    numpunct ( const _Locinfo & _Lobj, size_t _Refs = 0, bool _Isdef = false ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj, _Isdef );
    }

    static size_t _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new numpunct < _Elem > ( _Locinfo ( _Ploc -> _C_str ( ) ), 0, true );
        }
        return 4;
    }

protected :
     ~ numpunct ( ) noexcept override {
        _Tidy ( );
    }

    numpunct ( const char * _Locname, size_t _Refs = 0, bool _Isdef = false ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj ( _Locname );
        _Init ( _Lobj, _Isdef );
        }
    }

    template < class _Elem2 >
    void _Getvals ( _Elem2, const lconv * _Ptr, _Locinfo :: _Cvtvec _Cvt ) {
        _Dp = _Maklocchr ( _Ptr -> decimal_point [ 0 ], static_cast < _Elem2 * > ( nullptr ), _Cvt );
        _Kseparator = _Maklocchr ( _Ptr -> thousands_sep [ 0 ], static_cast < _Elem2 * > ( nullptr ), _Cvt );
    }

    void _Getvals ( wchar_t, const lconv * _Ptr, _Locinfo :: _Cvtvec ) {
        _Dp = static_cast < _Elem > ( _Ptr -> _W_decimal_point [ 0 ] );
        _Kseparator = static_cast < _Elem > ( _Ptr -> _W_thousands_sep [ 0 ] );
    }

    void _Init ( const _Locinfo & _Lobj, bool _Isdef = false ) {
        const lconv * _Ptr = _Lobj . _Getlconv ( );
        _Locinfo :: _Cvtvec _Cvt = _Lobj . _Getcvt ( );

        _Grouping = nullptr;
        _Falsename = nullptr;
        _Truename = nullptr;

        _Tidy_guard < numpunct > _Guard { this };
        _Grouping = _Maklocstr ( _Isdef ? "" : _Ptr -> grouping, static_cast < char * > ( nullptr ), _Lobj . _Getcvt ( ) );
        _Falsename = _Maklocstr ( _Lobj . _Getfalse ( ), static_cast < _Elem * > ( nullptr ), _Cvt );
        _Truename = _Maklocstr ( _Lobj . _Gettrue ( ), static_cast < _Elem * > ( nullptr ), _Cvt );
        _Guard . _Target = nullptr;

        if ( _Isdef ) {

            _Dp = _Maklocchr ( '.', static_cast < _Elem * > ( nullptr ), _Cvt );
            _Kseparator = _Maklocchr ( ',', static_cast < _Elem * > ( nullptr ), _Cvt );
        } else {
            _Getvals ( _Elem { }, _Ptr, _Cvt );
        }
    }

    virtual _Elem do_decimal_point ( ) const {
        return _Dp;
    }

    virtual _Elem do_thousands_sep ( ) const {
        return _Kseparator;
    }

    virtual string do_grouping ( ) const {
        return string { _Grouping };
    }

    virtual string_type do_falsename ( ) const {
        return string_type { _Falsename };
    }

    virtual string_type do_truename ( ) const {
        return string_type { _Truename };
    }

private :
    void _Tidy ( ) noexcept {
        :: free ( const_cast < char * > ( _Grouping ) );
        :: free ( const_cast < _Elem * > ( _Falsename ) );
        :: free ( const_cast < _Elem * > ( _Truename ) );
    }

    const char * _Grouping;
    _Elem _Dp;
    _Elem _Kseparator;
    const _Elem * _Falsename;
    const _Elem * _Truename;
};
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template < class _Elem >
class numpunct_byname : public numpunct < _Elem > {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    explicit numpunct_byname ( const char * _Locname, size_t _Refs = 0 )
        : numpunct < _Elem > ( _Locname, _Refs ) { }

    explicit numpunct_byname ( const string & _Str, size_t _Refs = 0 )
        : numpunct < _Elem > ( _Str . c_str ( ), _Refs ) { }

protected :
     ~ numpunct_byname ( ) noexcept override { }
};
#line 240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template< class _Elem> locale::id 
#line 241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
numpunct< _Elem> ::id; 
#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
struct _Num_get_parse_result { 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
int8_t _Base; 
#line 253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
bool _Bad_grouping; 
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
}; 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template < class _Elem, class _InIt = istreambuf_iterator < _Elem, char_traits < _Elem > > >
class num_get : public locale :: facet {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new num_get < _Elem, _InIt > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 4;
    }

     static locale :: id id;

protected :
     ~ num_get ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

public :
    explicit num_get ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     num_get ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj );
    }

    using char_type = _Elem;
    using iter_type = _InIt;

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        bool & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned short & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned int & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        float & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        double & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long double & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        void * & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

protected :
    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        bool & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        if ( _Iosbase . flags ( ) & ios_base :: boolalpha ) {
            const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
            basic_string < _Elem > _Str ( static_cast < size_t > ( 1 ), _Elem { } );
            _Str += _Punct_fac . falsename ( );
            _Str . push_back ( _Elem { } );
            _Str += _Punct_fac . truename ( );
            switch ( _Getloctxt ( _First, _Last, 2, _Str . c_str ( ), _Case_sensitive :: _Yes ) ) {
            case 0 :
                _Val = false;
                break;
            case 1 :
                _Val = true;
                break;
            default :
                _Val = false;
                _State = ios_base :: failbit;
                break;
            }
        } else {
            char _Ac [ _Max_int_dig ];
            const auto _Parse_result =
                _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
            if ( _Parse_result . _Base < 0 ) {


                _Val = false;
                _State = ios_base :: failbit;
            } else {
                char * _Ep;
                int _Errno;
                const long _Ans = :: _Stolx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
                if ( _Ep == _Ac || _Errno != 0
                    || _Parse_result . _Bad_grouping ) {
                    _Val = true;
                    _State = ios_base :: failbit;
                } else {
                    _Val = _Ans != 0;
                    if ( _Ans != 0 && _Ans != 1 ) {
                        _State = ios_base :: failbit;
                    }
                }
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned short & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            const bool _Minus = _Ac [ 0 ] == '-';
            const char * _Digits = _Ac;


            if ( _Minus ) {
                ++ _Digits;
            }

            char * _Ep;
            int _Errno;
            const unsigned long _Tmp = :: _Stoulx ( _Digits, & _Ep, _Parse_result . _Base, & _Errno );
            _Val = static_cast < unsigned short > ( _Tmp );
            if ( _Ep == _Digits || _Errno != 0 || _Tmp > 65535 ) {
                _State = ios_base :: failbit;
                _Val = 65535;
            } else if ( _Minus ) {

                _Val = static_cast < unsigned short > ( 0 - _Val );
            }

            if ( _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned int & _Val ) const {
        static_assert ( sizeof ( unsigned int ) == sizeof ( unsigned long ),
            "Bad overflow assumptions due to sizeof(unsigned int) != sizeof(unsigned long)" );
        unsigned long _Tmp;
        _First = num_get :: do_get ( _First, _Last, _Iosbase, _State, _Tmp );
        _Val = _Tmp;
        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stolx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stoulx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stollx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            int _Errno;
            char * _Ep;
            _Val = :: _Stoullx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }






    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        float & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ ( 8 + 768 + 16 ) ];
        const auto _Parse_result =
            _Parse_fp_with_locale ( _Ac, 768, _First, _Last, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base == 0 ) {
            _State = ios_base :: failbit;
            _Val = (0.0F);
        } else {
            int _Errno;
            char * _Ep;
            _Val = :: std :: _Stofx_v3 ( _Ac, & _Ep, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        double & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ ( 8 + 768 + 16 ) ];
        const auto _Parse_result =
            _Parse_fp_with_locale ( _Ac, 768, _First, _Last, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base == 0 ) {
            _State = ios_base :: failbit;
            _Val = (0.0);
        } else {
            int _Errno;
            char * _Ep;
            _Val = :: std :: _Stodx_v3 ( _Ac, & _Ep, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }



    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long double & _Val ) const {



        double _Result;
        _First = num_get :: do_get ( _First, _Last, _Iosbase, _State, _Result );
        _Val = _Result;
        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        void * & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, ios_base :: hex, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = nullptr;
        } else {
            int _Errno;
            char * _Ep;

            _Val = reinterpret_cast < void * > ( :: _Stoullx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno ) );



            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
                _Val = nullptr;
            }

            if ( _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

private :
    template < int = 0 >
    static _Num_get_parse_result _Parse_int_with_locale (
        char * const _Ac, _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield, const locale & _Loc ) {

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Loc );
        const string _Grouping = _Punct_fac . grouping ( );
        const _Elem _Kseparator = _Grouping . empty ( ) ? _Elem { } : _Punct_fac . thousands_sep ( );

        constexpr int _Numget_signoff = 22;
        constexpr int _Numget_xoff = 24;
        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+Xx";
        _Elem _Atoms [ sizeof ( _Src ) ];
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Loc );
        _Ctype_fac . widen ( :: std :: begin ( _Src ), :: std :: end ( _Src ), _Atoms );

        bool _Bad_grouping = false;


        if ( _Kseparator != _Elem { } ) {
            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }
        }

        char * _Ptr = _Ac;

        if ( _First != _Last ) {
            if ( * _First == _Atoms [ _Numget_signoff + 1 ] ) {
                * _Ptr ++ = '+';
                ++ _First;
            } else if ( * _First == _Atoms [ _Numget_signoff ] ) {
                * _Ptr ++ = '-';
                ++ _First;
            }
        }


        if ( _Kseparator != _Elem { } ) {
            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }
        }

        _Basefield &= ios_base :: basefield;

        int8_t _Base;
        if ( _Basefield == ios_base :: oct ) {
            _Base = 8;
        } else if ( _Basefield == ios_base :: hex ) {
            _Base = 16;
        } else if ( _Basefield == ios_base :: _Fmtzero ) {
            _Base = 0;
        } else {
            _Base = 10;
        }

        bool _Seendigit = false;
        bool _Nonzero = false;

        if ( _First != _Last && * _First == _Atoms [ 0 ] ) {
            _Seendigit = true;
            ++ _First;
            if ( _First != _Last && ( * _First == _Atoms [ _Numget_xoff + 1 ] || * _First == _Atoms [ _Numget_xoff ] )
                && ( _Base == 0 || _Base == 16 ) ) {
                _Base = 16;
                _Seendigit = false;
                ++ _First;
            } else if ( _Base == 0 ) {
                _Base = 8;
            }
        }

        const auto _Dlen = static_cast < size_t > ( _Base == 0 || _Base == 10 ? 10 : _Base == 8 ? 8 : 16 + 6 );
        string _Groups ( 1, static_cast < char > ( _Seendigit ) );
        size_t _Groups_arr_idx = 0;

        for ( char * const _Pe = & _Ac [ _Max_int_dig - 1 ]; _First != _Last; ++ _First ) {
            size_t _Idx = :: std :: _Find_elem ( _Atoms, * _First );
            if ( _Idx < _Dlen ) {
                * _Ptr = _Src [ _Idx ];
                if ( ( _Nonzero || * _Ptr != '0' ) && _Ptr < _Pe ) {
                    ++ _Ptr;
                    _Nonzero = true;
                }

                _Seendigit = true;
                if ( _Groups [ _Groups_arr_idx ] != 127 ) {
                    ++ _Groups [ _Groups_arr_idx ];
                }
            } else if ( _Kseparator == _Elem { } || * _First != _Kseparator ) {
                break;
            } else if ( _Groups [ _Groups_arr_idx ] == '\000' ) {
                _Bad_grouping = true;
            } else {
                _Groups . push_back ( '\000' );
                ++ _Groups_arr_idx;
            }
        }

        if ( _Groups_arr_idx != 0 ) {
            if ( _Groups [ _Groups_arr_idx ] > '\000' ) {
                ++ _Groups_arr_idx;
            } else {
                _Bad_grouping = true;
            }
        }


        if ( _Kseparator != _Elem { } ) {
            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }
        }

        const char * _Grouping_iter = _Grouping . data ( );
        const char * const _Grouping_end = _Grouping_iter + _Grouping . size ( );
        for ( char _Current_grouping_count = '\000'; _Seendigit && ! _Bad_grouping && _Groups_arr_idx > 0; ) {
            if ( _Grouping_iter != _Grouping_end ) {
                _Current_grouping_count = * _Grouping_iter;
                ++ _Grouping_iter;
            }

            -- _Groups_arr_idx;
            if ( ( _Current_grouping_count > '\000' && _Current_grouping_count != 127 )
                && ( ( _Groups_arr_idx > 0 && _Groups [ _Groups_arr_idx ] != _Current_grouping_count )
                    || ( _Groups_arr_idx == 0 && _Groups [ _Groups_arr_idx ] > _Current_grouping_count ) ) ) {
                _Bad_grouping = true;
            }

        }

        if ( ! _Seendigit ) {
            return { static_cast < int8_t > ( ~ _Base ), false };
        }

        if ( ! _Nonzero ) {
            * _Ptr ++ = '0';
        }

        * _Ptr = '\000';
        return { _Base, _Bad_grouping };
    }

    template < int = 0 >
    static _Num_get_parse_result _Parse_fp_with_locale (
        char * const _Ac, const int _Max_sig_dig, _InIt & _First, _InIt & _Last, const locale & _Loc ) {

        char * _Ptr = _Ac;

        constexpr size_t _Offset_dec_digit_end = 10;
        constexpr size_t _Offset_hex_digit_end = 22;
        constexpr size_t _Offset_neg_sign = 22;
        constexpr size_t _Offset_pos_sign = 23;
        constexpr size_t _Offset_upper_x = 24;
        constexpr size_t _Offset_lower_x = 25;
        constexpr size_t _Offset_upper_p = 26;
        constexpr size_t _Offset_lower_p = 27;
        constexpr size_t _Offset_upper_e = 14;
        constexpr size_t _Offset_lower_e = 20;
        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+XxPp";
        _Elem _Atoms [ sizeof ( _Src ) ];
        const auto & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Loc );
        _Ctype_fac . widen ( :: std :: begin ( _Src ), :: std :: end ( _Src ), _Atoms );

        const _Elem _Positive_sign = _Atoms [ _Offset_pos_sign ];
        const _Elem _Negative_sign = _Atoms [ _Offset_neg_sign ];
        const _Elem _Zero_wc = _Atoms [ 0 ];

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Loc );
        const string _Grouping = _Punct_fac . grouping ( );
        const _Elem _Kseparator = _Grouping . empty ( ) ? _Elem { } : _Punct_fac . thousands_sep ( );

        bool _Bad_grouping = false;


        if ( ! _Grouping . empty ( ) ) {
            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }
        }

        if ( _First != _Last ) {
            if ( * _First == _Positive_sign ) {
                * _Ptr ++ = '+';
                ++ _First;
            } else if ( * _First == _Negative_sign ) {
                * _Ptr ++ = '-';
                ++ _First;
            }
        }

        * _Ptr ++ = '0';

        bool _Parse_hex = false;
        bool _Seendigit = false;
        char _Initial_dec_leading_zero = '\000';
        if ( _First != _Last && * _First == _Zero_wc ) {
            ++ _First;
            if ( _First == _Last ) {
                * _Ptr = '\000';
                return { 10, _Bad_grouping };
            }

            if ( * _First == _Atoms [ _Offset_lower_x ] || * _First == _Atoms [ _Offset_upper_x ] ) {
                _Parse_hex = true;
                ++ _First;
                * _Ptr ++ = 'x';
            } else {
                _Seendigit = true;
                ++ _Initial_dec_leading_zero;
            }
        }

        bool _Has_unaccumulated_digits = false;
        int _Significant = 0;
        ptrdiff_t _Power_of_rep_base = 0;

        const size_t _Offset_digit_end = _Parse_hex ? _Offset_hex_digit_end : _Offset_dec_digit_end;
        if ( _Grouping . empty ( ) ) {
            for ( size_t _Idx; _First != _Last && ( _Idx = :: std :: _Find_elem ( _Atoms, * _First ) ) < _Offset_digit_end;
                 _Seendigit = true, ( void ) ++ _First ) {
                if ( _Significant >= _Max_sig_dig ) {
                    ++ _Power_of_rep_base;
                    if ( _Idx > 0 ) {
                        _Has_unaccumulated_digits = true;
                    }
                } else if ( _Idx != 0 || _Significant != 0 ) {
                    * _Ptr ++ = _Src [ _Idx ];
                    ++ _Significant;
                }
            }
        } else {

            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }

            string _Groups ( 1, _Initial_dec_leading_zero );
            size_t _Groups_arr_idx = 0;

            for (; _First != _Last; ++ _First ) {
                const size_t _Idx = :: std :: _Find_elem ( _Atoms, * _First );
                if ( _Idx < _Offset_digit_end ) {
                    _Seendigit = true;
                    if ( _Significant >= _Max_sig_dig ) {
                        ++ _Power_of_rep_base;
                        if ( _Idx > 0 ) {
                            _Has_unaccumulated_digits = true;
                        }
                    } else if ( _Idx != 0 || _Significant != 0 ) {
                        * _Ptr ++ = _Src [ _Idx ];
                        ++ _Significant;
                    }

                    if ( _Groups [ _Groups_arr_idx ] != 127 ) {
                        ++ _Groups [ _Groups_arr_idx ];
                    }
                } else if ( * _First != _Kseparator ) {
                    break;
                } else if ( _Groups [ _Groups_arr_idx ] == '\000' ) {
                    _Bad_grouping = true;
                } else {
                    _Groups . push_back ( '\000' );
                    ++ _Groups_arr_idx;
                }
            }

            if ( _Groups_arr_idx != 0 ) {
                if ( _Groups [ _Groups_arr_idx ] > '\000' ) {
                    ++ _Groups_arr_idx;
                } else {
                    _Bad_grouping = true;
                }
            }


            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }

            const char * _Grouping_iter = _Grouping . data ( );
            const char * const _Grouping_end = _Grouping_iter + _Grouping . size ( );
            char _Current_grouping_count = '\000';
            while ( ! _Bad_grouping && _Groups_arr_idx > 0 ) {
                if ( _Grouping_iter != _Grouping_end ) {
                    _Current_grouping_count = * _Grouping_iter;
                    ++ _Grouping_iter;
                }

                -- _Groups_arr_idx;
                if ( ( _Current_grouping_count > '\000' && _Current_grouping_count != 127 )
                    && ( ( _Groups_arr_idx > 0 && _Groups [ _Groups_arr_idx ] != _Current_grouping_count )
                        || ( _Groups_arr_idx == 0 && _Groups [ _Groups_arr_idx ] > _Current_grouping_count ) ) ) {
                    _Bad_grouping = true;
                }

            }
        }

        if ( _Parse_hex && _Seendigit && _Significant == 0 ) {

            * _Ptr ++ = '0';
        }

        const char _Decimal_point = :: localeconv ( ) -> decimal_point [ 0 ];
        if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) ) {
            * _Ptr ++ = _Decimal_point;
            ++ _First;
        }

        if ( _Significant == 0 ) {
            for (; _First != _Last && * _First == _Zero_wc; _Seendigit = true, ( void ) ++ _First ) {
                -- _Power_of_rep_base;
            }
        }

        for ( size_t _Idx; _First != _Last && ( _Idx = :: std :: _Find_elem ( _Atoms, * _First ) ) < _Offset_digit_end;
             _Seendigit = true, ( void ) ++ _First ) {
            if ( _Significant < _Max_sig_dig ) {
                * _Ptr ++ = _Src [ _Idx ];
                ++ _Significant;
            } else if ( _Idx > 0 ) {
                _Has_unaccumulated_digits = true;
            }
        }

        if ( _Has_unaccumulated_digits ) {
            char & _Last_got_digit = _Ptr [ - 1 ] == _Decimal_point ? _Ptr [ - 2 ] : _Ptr [ - 1 ];
            if ( _Last_got_digit == '0' || _Last_got_digit == ( _Parse_hex ? '8' : '5' ) ) {
                ++ _Last_got_digit;
            }
        }

        const _Elem _Lower_exp_wc = _Atoms [ _Parse_hex ? _Offset_lower_p : _Offset_lower_e ];
        const _Elem _Upper_exp_wc = _Atoms [ _Parse_hex ? _Offset_upper_p : _Offset_upper_e ];

        bool _Exponent_part_negative = false;
        ptrdiff_t _Exponent_part = 0;
        if ( _Seendigit && _First != _Last
            && ( * _First == _Lower_exp_wc || * _First == _Upper_exp_wc ) ) {
            ++ _First;
            _Seendigit = false;
            _Significant = 0;

            if ( _First != _Last ) {
                if ( * _First == _Positive_sign ) {
                    ++ _First;
                } else if ( * _First == _Negative_sign ) {
                    _Exponent_part_negative = true;
                    ++ _First;
                }
            }

            for (; _First != _Last && * _First == _Zero_wc; ++ _First ) {
                _Seendigit = true;
            }

            for ( size_t _Idx; _First != _Last && ( _Idx = :: std :: _Find_elem ( _Atoms, * _First ) ) < _Offset_dec_digit_end;
                 _Seendigit = true, ( void ) ++ _First ) {
                if ( _Exponent_part < 9223372036854775807i64 / 10
                    || ( _Exponent_part == 9223372036854775807i64 / 10
                        && static_cast < ptrdiff_t > ( _Idx ) <= 9223372036854775807i64 % 10 ) ) {
                    _Exponent_part = _Exponent_part * 10 + static_cast < ptrdiff_t > ( _Idx );
                } else {
                    _Exponent_part = 9223372036854775807i64;
                }
            }

            if ( _Exponent_part_negative ) {
                _Exponent_part = - _Exponent_part;
            }
        }

        if ( ! _Seendigit ) {
            return { 0, false };
        }

        constexpr int _Dec_exp_abs_bound = 1100;
        constexpr int _Hex_exp_abs_bound = 4200;

        const ptrdiff_t _Exp_abs_bound = _Parse_hex ? _Hex_exp_abs_bound : _Dec_exp_abs_bound;
        const ptrdiff_t _Exp_rep_abs_bound = _Parse_hex ? _Hex_exp_abs_bound / 4 : _Dec_exp_abs_bound;




        for ( ptrdiff_t _Power_of_rep_adjusted = _Power_of_rep_base;; ) {
            if ( _Exponent_part >= 0 && _Power_of_rep_adjusted >= 0
                && ( _Exponent_part >= _Exp_abs_bound || _Power_of_rep_adjusted >= _Exp_rep_abs_bound ) ) {
                _Exponent_part = _Exp_abs_bound;
                break;
            } else if ( _Exponent_part <= 0 && _Power_of_rep_adjusted <= 0
                       && ( _Exponent_part <= - _Exp_abs_bound || _Power_of_rep_adjusted <= - _Exp_rep_abs_bound ) ) {
                _Exponent_part = - _Exp_abs_bound;
                break;
            } else if ( :: std :: abs ( _Exponent_part ) <= _Exp_abs_bound
                       && :: std :: abs ( _Power_of_rep_adjusted ) <= _Exp_rep_abs_bound ) {

                _Exponent_part += _Parse_hex ? _Power_of_rep_adjusted * 4 : _Power_of_rep_adjusted;
                if ( _Exponent_part > _Exp_abs_bound ) {
                    _Exponent_part = _Exp_abs_bound;
                } else if ( _Exponent_part < - _Exp_abs_bound ) {
                    _Exponent_part = - _Exp_abs_bound;
                }
                break;
            } else {


                const ptrdiff_t _Exponent_part_preadjustment_round_up =
                    _Parse_hex ? ( :: std :: abs ( _Exponent_part ) - 1 ) / 4 + 1 : :: std :: abs ( _Exponent_part );
                const ptrdiff_t _Exp_rep_adjustment =
                    ( :: std :: min ) ( _Exponent_part_preadjustment_round_up, :: std :: abs ( _Power_of_rep_base ) );

                if ( _Exponent_part >= 0 ) {
                    _Exponent_part -= _Parse_hex ? _Exp_rep_adjustment * 4 : _Exp_rep_adjustment;
                    _Power_of_rep_adjusted += _Exp_rep_adjustment;
                } else {
                    _Exponent_part += _Parse_hex ? _Exp_rep_adjustment * 4 : _Exp_rep_adjustment;
                    _Power_of_rep_adjusted -= _Exp_rep_adjustment;
                }
            }
        }

        if ( _Exponent_part != 0 ) {
            * _Ptr ++ = _Parse_hex ? 'p' : 'e';
            if ( _Exponent_part < 0 ) {
                * _Ptr ++ = '-';
            }

            char * const _Rev_begin = _Ptr;
            for ( ptrdiff_t _Exponent_part_abs = :: std :: abs ( _Exponent_part ); _Exponent_part_abs != 0;
                 _Exponent_part_abs /= 10 ) {
                * _Ptr ++ = static_cast < char > ( '0' + _Exponent_part_abs % 10 );
            }
            :: std :: reverse ( _Rev_begin, _Ptr );
        }

        * _Ptr = '\000';
        return { static_cast < int8_t > ( _Parse_hex ? 16 : 10 ), _Bad_grouping };
    }


    int __cdecl _Getifld (
        char * _Ac, _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield, const locale & _Loc ) const {

        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+Xx";
        const char * volatile _Ptr = _Src;
        ( void ) _Ptr;

        const auto _Parse_result = _Parse_int_with_locale ( _Ac, _First, _Last, _Basefield, _Loc );
        if ( _Parse_result . _Base < 0 || _Parse_result . _Bad_grouping ) {
            * _Ac = '\000';
        }
        return _Parse_result . _Base < 0 ? ~ _Parse_result . _Base : _Parse_result . _Base;
    }







    int __cdecl _Getffld ( char * _Ac, _InIt & _First, _InIt & _Last, ios_base & _Iosbase, int * _Phexexp ) const {

        static constexpr char _Src [ ] = "0123456789-+Ee";
        const char * volatile _Ptr = & _Src [ 0 ];
        ( void ) _Ptr;
        const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );
        const auto _Parse_result = _Parse_fp_with_locale ( _Ac, _Max_sig_dig, _First, _Last, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base == 0 || _Parse_result . _Bad_grouping ) {
            * _Ac = '\000';
        }

        if ( _Parse_result . _Base == 16 ) {
            * _Phexexp = 0;
        }
        return 0;
    }


    int __cdecl _Getffldx ( char * _Ac, _InIt & _First, _InIt & _Last, ios_base & _Iosbase, int * _Phexexp ) const {

        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+XxPp";
        const char * volatile _Ptr = & _Src [ 0 ];
        ( void ) _Ptr;
        const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );
        const auto _Parse_result = _Parse_fp_with_locale ( _Ac, _Max_sig_dig, _First, _Last, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base == 0 || _Parse_result . _Bad_grouping ) {
            * _Ac = '\000';
        }

        if ( _Parse_result . _Base == 16 ) {
            * _Phexexp = 0;
        }
        return 0;
    }




};
#line 1175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template< class _Elem, class _InIt> locale::id 
#line 1176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
num_get< _Elem, _InIt> ::id; 
#line 1182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template < class _Ty >
int _Float_put_desired_precision ( const streamsize _Precision, const ios_base :: fmtflags _Float_flags ) {

    const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
    if ( _Is_hex ) {

        if constexpr ( is_same_v < _Ty, double > ) {
            return ( ( 53 - 1 ) + 3 ) / 4;
        } else if constexpr ( is_same_v < _Ty, long double > ) {
            return ( ( 53 - 1 ) + 3 ) / 4;
        } else {
            static_assert ( _Always_false < _Ty >, "Expected only double or long double here (not float)." );
        }
    }

    if ( _Precision > 0 ) {
        return static_cast < int > ( _Precision );
    } else if ( _Precision == 0 ) {
        const bool _Is_default_float = _Float_flags == 0;
        if ( _Is_default_float ) {
            return 1;
        } else {
            return 0;
        }
    } else {
        constexpr int _Default_precision = 6;
        return _Default_precision;
    }
}
#line 1212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template < class _Elem, class _OutIt = ostreambuf_iterator < _Elem, char_traits < _Elem > > >
class num_put : public locale :: facet {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new num_put < _Elem, _OutIt > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 4;
    }

     static locale :: id id;

protected :
     ~ num_put ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

public :
    explicit num_put ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     num_put ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj );
    }

    using char_type = _Elem;
    using iter_type = _OutIt;

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, bool _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, double _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long double _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

protected :
    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, bool _Val ) const {
        if ( ! ( _Iosbase . flags ( ) & ios_base :: boolalpha ) ) {
            return do_put ( _Dest, _Iosbase, _Fill, static_cast < long > ( _Val ) );
        } else {
            const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
            basic_string < _Elem > _Str;
            if ( _Val ) {
                _Str . assign ( _Punct_fac . truename ( ) );
            } else {
                _Str . assign ( _Punct_fac . falsename ( ) );
            }

            size_t _Fillcount;
            if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Str . size ( ) ) {
                _Fillcount = 0;
            } else {
                _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Str . size ( );
            }

            if ( ( _Iosbase . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
                _Dest = _Rep ( _Dest, _Fill, _Fillcount );
                _Fillcount = 0;
            }
            _Dest = _Put ( _Dest, _Str . c_str ( ), _Str . size ( ) );
            _Iosbase . width ( 0 );
            return _Rep ( _Dest, _Fill, _Fillcount );
        }
    }

#pragma warning(push)
#pragma warning(disable : 4774)
    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];
        char _Fmt [ 6 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "ld", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];
        char _Fmt [ 6 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "lu", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long long _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];
        char _Fmt [ 8 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Ld", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long long _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];
        char _Fmt [ 8 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Lu", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, double _Val ) const {
        string _Buf;
        char _Fmt [ 8 ];
        const auto _Float_flags = _Iosbase . flags ( ) & ios_base :: floatfield;
        const bool _Is_fixed = _Float_flags == ios_base :: fixed;
        const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
        const streamsize _Precision = _Is_hex ? - 1 : _Iosbase . precision ( );
        const int _Desired_precision =
            _Float_put_desired_precision < double > ( _Precision, _Float_flags );
        size_t _Bufsize = static_cast < size_t > ( _Desired_precision );
        if ( _Is_fixed && (10000000000.0) < :: fabs ( _Val ) ) {
            int _Ptwo;
            ( void ) :: frexp ( _Val, & _Ptwo );
            _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
        }

        _Buf . resize ( _Bufsize + 50 );
        const auto _Ngen = static_cast < size_t > ( :: sprintf_s (
            & _Buf [ 0 ], _Buf . size ( ), _Ffmt ( _Fmt, 0, _Iosbase . flags ( ) ), static_cast < int > ( _Precision ), _Val ) );

        return _Fput_v3 ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen, ( :: std :: isfinite ) ( _Val ) );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long double _Val ) const {
        string _Buf;
        char _Fmt [ 8 ];
        const auto _Float_flags = _Iosbase . flags ( ) & ios_base :: floatfield;
        const bool _Is_fixed = _Float_flags == ios_base :: fixed;
        const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
        const streamsize _Precision = _Is_hex ? - 1 : _Iosbase . precision ( );
        const int _Desired_precision =
            _Float_put_desired_precision < long double > ( _Precision, _Float_flags );
        size_t _Bufsize = static_cast < size_t > ( _Desired_precision );
        if ( _Is_fixed && (10000000000.0) < :: fabsl ( _Val ) ) {
            int _Ptwo;
            ( void ) :: frexpl ( _Val, & _Ptwo );
            _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
        }

        _Buf . resize ( _Bufsize + 50 );
        const auto _Ngen = static_cast < size_t > ( :: sprintf_s (
            & _Buf [ 0 ], _Buf . size ( ), _Ffmt ( _Fmt, 'L', _Iosbase . flags ( ) ), static_cast < int > ( _Precision ), _Val ) );

        return _Fput_v3 ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen, ( :: std :: isfinite ) ( _Val ) );
    }
#pragma warning(pop)

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];

        return _Iput (
            _Dest, _Iosbase, _Fill, _Buf, static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), "%p", _Val ) ) );
    }

private :
    char * __cdecl _Ffmt (
        char * _Fmt, char _Spec, ios_base :: fmtflags _Flags ) const {
        char * _Ptr = _Fmt;
        * _Ptr ++ = '%';

        if ( _Flags & ios_base :: showpos ) {
            * _Ptr ++ = '+';
        }

        if ( _Flags & ios_base :: showpoint ) {
            * _Ptr ++ = '#';
        }

        * _Ptr ++ = '.';
        * _Ptr ++ = '*';
        if ( _Spec != '\000' ) {
            * _Ptr ++ = _Spec;
        }

        char _Ch;
        ios_base :: fmtflags _Ffl = _Flags & ios_base :: floatfield;
        if ( _Flags & ios_base :: uppercase ) {
            if ( _Ffl == ios_base :: fixed ) {
                _Ch = 'f';
            } else if ( _Ffl == ios_base :: hexfloat ) {
                _Ch = 'A';
            } else if ( _Ffl == ios_base :: scientific ) {
                _Ch = 'E';
            } else {
                _Ch = 'G';
            }
        } else {
            if ( _Ffl == ios_base :: fixed ) {
                _Ch = 'f';
            } else if ( _Ffl == ios_base :: hexfloat ) {
                _Ch = 'a';
            } else if ( _Ffl == ios_base :: scientific ) {
                _Ch = 'e';
            } else {
                _Ch = 'g';
            }
        }
        * _Ptr ++ = _Ch;

        * _Ptr = '\000';
        return _Fmt;
    }

    _OutIt __cdecl _Fput ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const char * _Buf,
        size_t _Count ) const {
        return _Fput_v3 ( _Dest, _Iosbase, _Fill, _Buf, _Count, true );
    }

    template < int = 0 >
    _OutIt _Fput_v3 ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const char * _Buf, size_t _Count,
        bool _Is_finite_val ) const {
        auto _Prefix = static_cast < size_t > ( 0 < _Count && ( * _Buf == '+' || * _Buf == '-' ) );
        const char * _Exps;
        if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) != ios_base :: hexfloat ) {
            _Exps = "eE";
        } else {
            _Exps = "pP";
            if ( _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
                && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) ) {
                _Prefix += 2;
            }
        }
        const size_t _Eoff = :: strcspn ( & _Buf [ 0 ], _Exps );
        char _Dp [ 2 ] = { "." };
        _Dp [ 0 ] = :: localeconv ( ) -> decimal_point [ 0 ];
        const size_t _Poff = :: strcspn ( & _Buf [ 0 ], & _Dp [ 0 ] );

        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
        basic_string < _Elem > _Groupstring ( _Count, _Elem ( 0 ) );
        _Ctype_fac . widen ( _Buf, _Buf + _Count, & _Groupstring [ 0 ] );

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
        const string _Grouping = _Punct_fac . grouping ( );
        const _Elem _Kseparator = _Punct_fac . thousands_sep ( );

        if ( _Poff != _Count ) {
            _Groupstring [ _Poff ] = _Punct_fac . decimal_point ( );
        }

        if ( _Is_finite_val ) {
            size_t _Off = _Poff == _Count ? _Eoff : _Poff;
            const char * _Pg = & _Grouping [ 0 ];
            while ( * _Pg != 127 && '\000' < * _Pg && static_cast < size_t > ( * _Pg ) < _Off - _Prefix ) {

                _Groupstring . insert ( _Off -= * _Pg, 1, _Kseparator );
                if ( '\000' < _Pg [ 1 ] ) {
                    ++ _Pg;
                }
            }
        }

        _Count = _Groupstring . size ( );

        size_t _Fillcount;
        if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Count ) {
            _Fillcount = 0;
        } else {
            _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Count;
        }

        ios_base :: fmtflags _Adjustfield = _Iosbase . flags ( ) & ios_base :: adjustfield;
        if ( _Adjustfield != ios_base :: left && _Adjustfield != ios_base :: internal ) {
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        } else if ( _Adjustfield == ios_base :: internal ) {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
        } else {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        }

        _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
        _Iosbase . width ( 0 );
        return _Rep ( _Dest, _Fill, _Fillcount );
    }

    char * __cdecl _Ifmt (
        char * _Fmt, const char * _Spec, ios_base :: fmtflags _Flags ) const {
        char * _Ptr = _Fmt;
        * _Ptr ++ = '%';

        if ( _Flags & ios_base :: showpos ) {
            * _Ptr ++ = '+';
        }

        if ( _Flags & ios_base :: showbase ) {
            * _Ptr ++ = '#';
        }

        if ( _Spec [ 0 ] != 'L' ) {
            * _Ptr ++ = _Spec [ 0 ];
        } else {
            * _Ptr ++ = 'I';
            * _Ptr ++ = '6';
            * _Ptr ++ = '4';
        }

        ios_base :: fmtflags _Basefield = _Flags & ios_base :: basefield;
        * _Ptr ++ = _Basefield == ios_base :: oct ? 'o'
                                      : _Basefield != ios_base :: hex ? _Spec [ 1 ]
                                      : _Flags & ios_base :: uppercase ? 'X'
                                                                     : 'x';
        * _Ptr = '\000';
        return _Fmt;
    }

    _OutIt __cdecl _Iput ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, char * _Buf,
        size_t _Count ) const {
        auto _Prefix = static_cast < size_t > ( 0 < _Count && ( * _Buf == '+' || * _Buf == '-' ) );
        if ( ( _Iosbase . flags ( ) & ios_base :: basefield ) == ios_base :: hex && _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
            && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) ) {
            _Prefix += 2;
        }

        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
        basic_string < _Elem > _Groupstring ( _Count, _Elem ( 0 ) );
        _Ctype_fac . widen ( _Buf, _Buf + _Count, & _Groupstring [ 0 ] );

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
        const string _Grouping = _Punct_fac . grouping ( );
        const char * _Pg = & _Grouping [ 0 ];
        if ( * _Pg != 127 && '\000' < * _Pg ) {
            const _Elem _Kseparator = _Punct_fac . thousands_sep ( );
            while ( * _Pg != 127 && '\000' < * _Pg && static_cast < size_t > ( * _Pg ) < _Count - _Prefix ) {

                _Count -= * _Pg;
                _Groupstring . insert ( _Count, 1, _Kseparator );
                if ( '\000' < _Pg [ 1 ] ) {
                    ++ _Pg;
                }
            }
        }

        _Count = _Groupstring . size ( );

        size_t _Fillcount;
        if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Count ) {
            _Fillcount = 0;
        } else {
            _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Count;
        }

        ios_base :: fmtflags _Adjustfield = _Iosbase . flags ( ) & ios_base :: adjustfield;
        if ( _Adjustfield != ios_base :: left && _Adjustfield != ios_base :: internal ) {
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        } else if ( _Adjustfield == ios_base :: internal ) {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
        } else {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        }

        _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
        _Iosbase . width ( 0 );
        return _Rep ( _Dest, _Fill, _Fillcount );
    }

    _OutIt __cdecl _Put (
        _OutIt _Dest, const _Elem * _Ptr, size_t _Count ) const {
        for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _Ptr ) {
            * _Dest = * _Ptr;
        }

        return _Dest;
    }

    _OutIt __cdecl _Rep ( _OutIt _Dest, _Elem _Ch, size_t _Count ) const {
        for (; 0 < _Count; -- _Count, ( void ) ++ _Dest ) {
            * _Dest = _Ch;
        }

        return _Dest;
    }
};
#line 1644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
template< class _Elem, class _OutIt> locale::id 
#line 1645 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
num_put< _Elem, _OutIt> ::id; 
#line 1671 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
}
#line 1674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\xlocnum"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
namespace std { 
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
template < class _Elem, class _Traits >
class basic_ios : public ios_base {
public :
    using _Myos = basic_ostream < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    explicit basic_ios ( _Mysb * _Strbuf ) {
        init ( _Strbuf );
    }

     ~ basic_ios ( ) noexcept override { }

    void clear ( iostate _State = goodbit, bool _Reraise = false ) {

        ios_base :: clear ( _State | ( _Mystrbuf ? ios_base :: goodbit : ios_base :: badbit ), _Reraise );
    }


    void clear ( io_state _State ) {
        clear ( static_cast < iostate > ( _State ) );
    }


    void setstate ( iostate _State, bool _Reraise = false ) {

        clear ( rdstate ( ) | _State, _Reraise );
    }


    void setstate ( io_state _State ) {
        setstate ( static_cast < iostate > ( _State ) );
    }


    basic_ios & copyfmt ( const basic_ios & _Right ) {
        _Tiestr = _Right . tie ( );
        _Fillch = _Right . fill ( );
        ios_base :: copyfmt ( _Right );
        return * this;
    }

    _Myos * tie ( ) const noexcept {
        return _Tiestr;
    }

    _Myos * tie ( _Myos * _Newtie ) noexcept {
        _Myos * _Oldtie = _Tiestr;
        _Tiestr = _Newtie;
        return _Oldtie;
    }

    [ [ nodiscard ] ] _Mysb * rdbuf ( ) const noexcept {
        return _Mystrbuf;
    }

    _Mysb * rdbuf ( _Mysb * _Strbuf ) {
        _Mysb * _Oldstrbuf = _Mystrbuf;
        _Mystrbuf = _Strbuf;
        clear ( );
        return _Oldstrbuf;
    }

    locale imbue ( const locale & _Loc ) {
        locale _Oldlocale = ios_base :: imbue ( _Loc );
        const auto _Rdbuf = rdbuf ( );
        if ( _Rdbuf ) {
            _Rdbuf -> pubimbue ( _Loc );
        }

        return _Oldlocale;
    }

    _Elem fill ( ) const noexcept {
        return _Fillch;
    }

    _Elem fill ( _Elem _Newfill ) noexcept {
        _Elem _Oldfill = _Fillch;
        _Fillch = _Newfill;
        return _Oldfill;
    }

    char narrow ( _Elem _Ch, char _Dflt = '\000' ) const {
        return :: std :: use_facet < _Ctype > ( getloc ( ) ) . narrow ( _Ch, _Dflt );
    }

    _Elem widen ( char _Byte ) const {
        return :: std :: use_facet < _Ctype > ( getloc ( ) ) . widen ( _Byte );
    }

    void move ( basic_ios & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mystrbuf = nullptr;
            _Tiestr = nullptr;
            this -> swap ( _Right );
        }
    }

    void move ( basic_ios && _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mystrbuf = nullptr;
            _Tiestr = nullptr;
            this -> swap ( _Right );
        }
    }

    void swap ( basic_ios & _Right ) noexcept {
        ios_base :: swap ( _Right );
        :: std :: swap ( _Fillch, _Right . _Fillch );
        :: std :: swap ( _Tiestr, _Right . _Tiestr );
    }

    void set_rdbuf ( _Mysb * _Strbuf ) noexcept {

        _Mystrbuf = _Strbuf;
    }

protected :
    void init ( _Mysb * _Strbuf = nullptr, bool _Isstd = false ) {

        _Init ( );
        _Mystrbuf = _Strbuf;
        _Tiestr = nullptr;
        _Fillch = widen ( ' ' );

        if ( ! _Mystrbuf ) {
            setstate ( badbit );
        }

        if ( _Isstd ) {
            _Addstd ( this );
        }
    }

     basic_ios ( ) { }

private :
    _Mysb * _Mystrbuf { };
    _Myos * _Tiestr { };
    _Elem _Fillch { };

public :
     basic_ios ( const basic_ios & ) = delete;
    basic_ios & operator = ( const basic_ios & ) = delete;
};
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl boolalpha(ios_base &_Iosbase) { 
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::boolalpha); 
#line 186 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl dec(ios_base &_Iosbase) { 
#line 190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::dec, ios_base::basefield); 
#line 191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 194 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl defaultfloat(ios_base &_Iosbase) { 
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.unsetf(ios_base::floatfield); 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl fixed(ios_base &_Iosbase) { 
#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::fixed, ios_base::floatfield); 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl hex(ios_base &_Iosbase) { 
#line 205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::hex, ios_base::basefield); 
#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl hexfloat(ios_base &_Iosbase) { 
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::hexfloat, ios_base::floatfield); 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl internal(ios_base &_Iosbase) { 
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::internal, ios_base::adjustfield); 
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl left(ios_base &_Iosbase) { 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::left, ios_base::adjustfield); 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl noboolalpha(ios_base &_Iosbase) { 
#line 225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.unsetf(ios_base::boolalpha); 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl noshowbase(ios_base &_Iosbase) { 
#line 230 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.unsetf(ios_base::showbase); 
#line 231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl noshowpoint(ios_base &_Iosbase) { 
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.unsetf(ios_base::showpoint); 
#line 236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl noshowpos(ios_base &_Iosbase) { 
#line 240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.unsetf(ios_base::showpos); 
#line 241 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl noskipws(ios_base &_Iosbase) { 
#line 245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.unsetf(ios_base::skipws); 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl nounitbuf(ios_base &_Iosbase) { 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.unsetf(ios_base::unitbuf); 
#line 251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl nouppercase(ios_base &_Iosbase) { 
#line 255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.unsetf(ios_base::uppercase); 
#line 256 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl oct(ios_base &_Iosbase) { 
#line 260 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::oct, ios_base::basefield); 
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl right(ios_base &_Iosbase) { 
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::right, ios_base::adjustfield); 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl scientific(ios_base &_Iosbase) { 
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::scientific, ios_base::floatfield); 
#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl showbase(ios_base &_Iosbase) { 
#line 275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::showbase); 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl showpoint(ios_base &_Iosbase) { 
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::showpoint); 
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl showpos(ios_base &_Iosbase) { 
#line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::showpos); 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl skipws(ios_base &_Iosbase) { 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::skipws); 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl unitbuf(ios_base &_Iosbase) { 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::unitbuf); 
#line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
inline ios_base &__cdecl uppercase(ios_base &_Iosbase) { 
#line 300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
_Iosbase.setf(ios_base::uppercase); 
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
return _Iosbase; 
#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
} 
#line 305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
using std::hexfloat;
#line 307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
}
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
}
#line 314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ios"
#pragma warning(pop)
#pragma pack ( pop )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
namespace std { 
#pragma vtordisp(push, 2)
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
class basic_ostream : virtual public basic_ios < _Elem, _Traits > {
public :
    using _Myios = basic_ios < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Iter = ostreambuf_iterator < _Elem, _Traits >;
    using _Nput = num_put < _Elem, _Iter >;

    explicit basic_ostream ( basic_streambuf < _Elem, _Traits > * _Strbuf, bool _Isstd = false ) {
        _Myios :: init ( _Strbuf, _Isstd );
    }

     basic_ostream ( _Uninitialized, bool _Addit = true ) {
        if ( _Addit ) {
            this -> _Addstd ( this );
        }
    }

protected :
     basic_ostream ( basic_ostream && _Right ) noexcept ( false ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
    }

    basic_ostream & operator = ( basic_ostream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_ostream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Myios :: swap ( _Right );
        }
    }

public :
     basic_ostream ( const basic_ostream & ) = delete;
    basic_ostream & operator = ( const basic_ostream & ) = delete;

     ~ basic_ostream ( ) noexcept override { }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    class _Sentry_base {
    public :
         _Sentry_base ( basic_ostream & _Ostr ) : _Myostr ( _Ostr ) {
            const auto _Rdbuf = _Myostr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Lock ( );
            }
        }

         ~ _Sentry_base ( ) noexcept {
            const auto _Rdbuf = _Myostr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Unlock ( );
            }
        }

        basic_ostream & _Myostr;

        _Sentry_base & operator = ( const _Sentry_base & ) = delete;
    };

    class sentry : public _Sentry_base {
    public :
        explicit sentry ( basic_ostream & _Ostr ) : _Sentry_base ( _Ostr ) {
            if ( ! _Ostr . good ( ) ) {
                _Ok = false;
                return;
            }

            const auto _Tied = _Ostr . tie ( );
            if ( ! _Tied || _Tied == & _Ostr ) {
                _Ok = true;
                return;
            }

            _Tied -> flush ( );
            _Ok = _Ostr . good ( );
        }

        __pragma(warning(push))                                __pragma(warning(disable : 4996))
         ~ sentry ( ) noexcept {



            const bool _Zero_uncaught_exceptions = ! :: std :: uncaught_exception ( );




            if ( _Zero_uncaught_exceptions ) {
                this -> _Myostr . _Osfx ( );
            }
        }
        __pragma(warning(pop))

        explicit operator bool ( ) const {
            return _Ok;
        }

         sentry ( const sentry & ) = delete;
        sentry & operator = ( const sentry & ) = delete;

    private :
        bool _Ok;
    };


     bool opfx ( ) {
        if ( ! this -> good ( ) ) {
            return false;
        }

        const auto _Tied = _Myios :: tie ( );
        if ( ! _Tied || _Myios :: tie ( ) == this ) {
            return true;
        }

        _Tied -> flush ( );
        return this -> good ( );
    }


     void osfx ( ) noexcept {
        _Osfx ( );
    }

    void _Osfx ( ) noexcept {
        try {
        if ( this -> good ( ) && this -> flags ( ) & ios_base :: unitbuf ) {
            if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 ) {
                _Myios :: setstate ( ios_base :: badbit );
            }
        }
        } catch ( ... ) {
        }
    }




















    basic_ostream & operator << ( basic_ostream & ( __cdecl * _Pfn ) ( basic_ostream & ) ) {

        return _Pfn ( * this );
    }

    basic_ostream & operator << ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) ) {

        _Pfn ( * this );
        return * this;
    }

    basic_ostream & operator << ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) ) {

        _Pfn ( * this );
        return * this;
    }

    basic_ostream & operator << ( bool _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( short _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );
            ios_base :: fmtflags _Bfl = this -> flags ( ) & ios_base :: basefield;

            long _Tmp;
            if ( _Bfl == ios_base :: oct || _Bfl == ios_base :: hex ) {
                _Tmp = static_cast < long > ( static_cast < unsigned short > ( _Val ) );
            } else {
                _Tmp = static_cast < long > ( _Val );
            }

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Tmp ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }









    basic_ostream & operator << ( unsigned short _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < unsigned long > ( _Val ) )
                    . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( int _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );
            ios_base :: fmtflags _Bfl = this -> flags ( ) & ios_base :: basefield;

            long _Tmp;
            if ( _Bfl == ios_base :: oct || _Bfl == ios_base :: hex ) {
                _Tmp = static_cast < long > ( static_cast < unsigned int > ( _Val ) );
            } else {
                _Tmp = static_cast < long > ( _Val );
            }

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Tmp ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned int _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < unsigned long > ( _Val ) )
                    . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned long long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( float _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < double > ( _Val ) ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( double _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long double _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( const void * _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }















    basic_ostream & operator << ( _Mysb * _Strbuf ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        bool _Copied = false;
        const sentry _Ok ( * this );

        if ( _Ok && _Strbuf ) {
            for ( int_type _Meta = _Traits :: eof ( );; _Copied = true ) {
                try {
                _Meta = _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ? _Strbuf -> sgetc ( ) : _Strbuf -> snextc ( );
                } catch ( ... ) {
                _Myios :: setstate ( ios_base :: failbit );
                throw;
                }

                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    break;
                }

                try {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
                } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            }
        }

        this -> width ( 0 );
        int _Setstate_with;
        if ( _Strbuf ) {
            if ( _Copied ) {
                _Setstate_with = _State;
            } else {
                _Setstate_with = _State | ios_base :: failbit;
            }
        } else {
            _Setstate_with = ios_base :: badbit;
        }

        _Myios :: setstate ( _Setstate_with );
        return * this;
    }

    basic_ostream & put ( _Elem _Ch ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( ! _Ok ) {
            _State |= ios_base :: badbit;
        } else {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputc ( _Ch ) ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & write ( const _Elem * _Str, streamsize _Count ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( ! _Ok ) {
            _State |= ios_base :: badbit;
        } else if ( 0 < _Count ) {
            try {
            if ( _Myios :: rdbuf ( ) -> sputn ( _Str, _Count ) != _Count ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & flush ( ) {
        const auto _Rdbuf = _Myios :: rdbuf ( );
        if ( _Rdbuf ) {
            const sentry _Ok ( * this );

            if ( _Ok ) {
                ios_base :: iostate _State = ios_base :: goodbit;
                try {
                if ( _Rdbuf -> pubsync ( ) == - 1 ) {
                    _State |= ios_base :: badbit;
                }
                } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
                _Myios :: setstate ( _State );
            }
        }
        return * this;
    }

    basic_ostream & seekp ( pos_type _Pos ) {
        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            ios_base :: iostate _State = ios_base :: goodbit;
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekpos ( _Pos, ios_base :: out ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            _Myios :: setstate ( _State );
        }

        return * this;
    }

    basic_ostream & seekp ( off_type _Off, ios_base :: seekdir _Way ) {

        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            ios_base :: iostate _State = ios_base :: goodbit;
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way, ios_base :: out ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            _Myios :: setstate ( _State );
        }

        return * this;
    }

    pos_type tellp ( ) {
        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            try {
            return _Myios :: rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: out );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        return pos_type { off_type { - 1 } };
    }
};
#line 624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
#pragma vtordisp(pop)
#line 685 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const char * _Val ) {
    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( :: strlen ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Ostr . getloc ( ) );
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        for (; _State == ios_base :: goodbit && 0 < _Count; -- _Count, ++ _Val ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( * _Val ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 729 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, char _Ch ) {
    ios_base :: iostate _State = ios_base :: goodbit;
    const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Ostr . getloc ( ) );
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit
            && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( _Ch ) ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 765 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const char * _Val ) {

    using _Elem = char;
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( _Traits :: length ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count ) {
            _State |= ios_base :: badbit;
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 810 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, char _Ch ) {

    using _Elem = char;
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 848 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * _Val ) {
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( _Traits :: length ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count ) {
            _State |= ios_base :: badbit;
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 891 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, _Elem _Ch ) {
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 927 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const signed char * _Val ) {

    return _Ostr << reinterpret_cast < const char * > ( _Val );
}
#line 933 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, signed char _Ch ) {
    return _Ostr << static_cast < char > ( _Ch );
}
#line 938 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const unsigned char * _Val ) {

    return _Ostr << reinterpret_cast < const char * > ( _Val );
}
#line 944 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, unsigned char _Ch ) {

    return _Ostr << static_cast < char > ( _Ch );
}
#line 994 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template< class _Ostr, class _Ty, class  = void> 
#line 995 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
struct _Can_stream_out : public false_type { }; 
#line 997 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template< class _Ostr, class _Ty> 
#line 998 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
struct _Can_stream_out< _Ostr, _Ty, void_t< decltype(std::declval< _Ostr &> () << std::declval< const _Ty &> ())> >  : public true_type { 
#line 999 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
}; 
#line 1001 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Ostr, class _Ty,
    enable_if_t < conjunction_v < is_convertible < _Ostr *, ios_base * >, _Can_stream_out < _Ostr, _Ty > >, int > = 0 >
_Ostr && operator << ( _Ostr && _Os, const _Ty & _Val ) {
    _Os << _Val;
    return :: std :: move ( _Os );
}
#line 1008 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl endl (
    basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . put ( _Ostr . widen ( '\n' ) );
    _Ostr . flush ( );
    return _Ostr;
}
#line 1016 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl ends ( basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . put ( _Elem ( ) );
    return _Ostr;
}
#line 1022 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl flush ( basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . flush ( );
    return _Ostr;
}
#line 1079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const error_code & _Errcode ) {

    return _Ostr << _Errcode . category ( ) . name ( ) << ':' << _Errcode . value ( );
}
#line 1290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
}
#line 1294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\ostream"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 19 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
namespace std { 
#pragma vtordisp(push, 2)
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Elem, class _Traits >
class basic_istream : virtual public basic_ios < _Elem, _Traits > {
public :
    using _Myios = basic_ios < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Iter = istreambuf_iterator < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    using _Nget = num_get < _Elem, _Iter >;









    explicit basic_istream ( _Mysb * _Strbuf, bool _Isstd = false ) : _Chcount ( 0 ) {
        _Myios :: init ( _Strbuf, _Isstd );
    }

     basic_istream ( _Uninitialized ) {
        this -> _Addstd ( this );
    }

protected :
     basic_istream ( basic_istream && _Right ) noexcept ( false ) : _Chcount ( _Right . _Chcount ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
        _Right . _Chcount = 0;
    }

    basic_istream & operator = ( basic_istream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_istream & _Right ) noexcept {
        _Myios :: swap ( _Right );
        :: std :: swap ( _Chcount, _Right . _Chcount );
    }

public :
     basic_istream ( const basic_istream & ) = delete;
    basic_istream & operator = ( const basic_istream & ) = delete;

     ~ basic_istream ( ) noexcept override { }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    class _Sentry_base {
    public :
         _Sentry_base ( basic_istream & _Istr ) : _Myistr ( _Istr ) {
            const auto _Rdbuf = _Myistr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Lock ( );
            }
        }

         ~ _Sentry_base ( ) noexcept {
            const auto _Rdbuf = _Myistr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Unlock ( );
            }
        }

        basic_istream & _Myistr;

        _Sentry_base & operator = ( const _Sentry_base & ) = delete;
    };

    class sentry : public _Sentry_base {
    public :
        explicit sentry ( basic_istream & _Istr, bool _Noskip = false )
            : _Sentry_base ( _Istr ), _Ok ( _Sentry_base :: _Myistr . _Ipfx ( _Noskip ) ) { }

        explicit operator bool ( ) const {
            return _Ok;
        }

         sentry ( const sentry & ) = delete;
        sentry & operator = ( const sentry & ) = delete;

    private :
        bool _Ok;
    };

    bool _Ipfx ( bool _Noskip = false ) {
        if ( ! this -> good ( ) ) {
            _Myios :: setstate ( ios_base :: failbit );
            return false;
        }


        const auto _Tied = _Myios :: tie ( );
        if ( _Tied ) {
            _Tied -> flush ( );
        }

        bool _Eof = false;
        if ( ! _Noskip && this -> flags ( ) & ios_base :: skipws ) {
            const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( this -> getloc ( ) );

            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _Eof = true;
                    break;
                } else if ( ! _Ctype_fac . is ( _Ctype :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                    break;
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Eof ) {
            _Myios :: setstate ( ios_base :: eofbit | ios_base :: failbit );
        }

        return this -> good ( );
    }


     bool ipfx ( bool _Noskip = false ) {

        return _Ipfx ( _Noskip );
    }


     void isfx ( ) { }


















    basic_istream & operator >> ( basic_istream & ( __cdecl * _Pfn ) ( basic_istream & ) ) {

        return _Pfn ( * this );
    }

    basic_istream & operator >> ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) ) {
        _Pfn ( * this );
        return * this;
    }

    basic_istream & operator >> ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) ) {
        _Pfn ( * this );
        return * this;
    }

private :
    template < class _Ty >
    basic_istream & _Common_extract_with_num_get ( _Ty & _Val ) {
        ios_base :: iostate _Err = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            try {
            :: std :: use_facet < _Nget > ( this -> getloc ( ) ) . get ( * this, { }, * this, _Err, _Val );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Err );
        return * this;
    }

    template < class = void >
    void _Increment_gcount ( ) noexcept {
        if ( _Chcount != ( numeric_limits < streamsize > :: max ) ( ) ) {
            ++ _Chcount;
        }
    }

public :
    basic_istream & operator >> ( bool & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( short & _Val ) {
        ios_base :: iostate _Err = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            try {
            long _Lval;
            :: std :: use_facet < _Nget > ( this -> getloc ( ) ) . get ( * this, { }, * this, _Err, _Lval );
            if ( _Lval < ( - 32768 ) ) {
                _Err |= ios_base :: failbit;
                _Val = ( - 32768 );
            } else if ( _Lval > 32767 ) {
                _Err |= ios_base :: failbit;
                _Val = 32767;
            } else {
                _Val = static_cast < short > ( _Lval );
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Err );
        return * this;
    }









    basic_istream & operator >> ( unsigned short & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( int & _Val ) {
        static_assert ( sizeof ( int ) == sizeof ( long ), "Bad overflow assumptions due to sizeof(int) != sizeof(long)" );
        long _Result = _Val;
        _Common_extract_with_num_get ( _Result );
        _Val = _Result;
        return * this;
    }

    basic_istream & operator >> ( unsigned int & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( unsigned long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( unsigned long long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( float & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( double & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long double & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( void * & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( _Mysb * _Strbuf ) {
        _Chcount = 0;
        const sentry _Ok ( * this, true );
        ios_base :: iostate _State = ios_base :: goodbit;
        if ( _Ok && _Strbuf ) {
            try {
            for ( int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                }

                try {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Strbuf -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) ) {
                    break;
                }

                } catch ( ... ) {
                break;
                }

                _Increment_gcount ( );
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Chcount == 0 ) {
            _State |= ios_base :: failbit;
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    int_type get ( ) {
        int_type _Meta = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( ! _Ok ) {
            _Meta = _Traits :: eof ( );
        } else {
            try {
            _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit | ios_base :: failbit;
            } else {
                _Myios :: rdbuf ( ) -> sbumpc ( );
                _Chcount = 1;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return _Meta;
    }

    basic_istream & get ( _Elem * _Str, streamsize _Count ) {
        return get ( _Str, _Count, _Myios :: widen ( '\n' ) );
    }

    basic_istream & get ( _Elem * _Str, streamsize _Count, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (; 0 < -- _Count; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else if ( _Traits :: to_char_type ( _Meta ) == _Delim ) {
                    break;
                } else {
                    * _Str ++ = _Traits :: to_char_type ( _Meta );
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
        * _Str = _Elem ( );
        return * this;
    }

    basic_istream & get ( _Elem & _Ch ) {
        int_type _Meta = get ( );
        if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
            _Ch = _Traits :: to_char_type ( _Meta );
        }

        return * this;
    }

    basic_istream & get ( _Mysb & _Strbuf ) {
        return get ( _Strbuf, _Myios :: widen ( '\n' ) );
    }

    basic_istream & get ( _Mysb & _Strbuf, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else {
                    try {
                    _Elem _Ch = _Traits :: to_char_type ( _Meta );
                    if ( _Ch == _Delim || _Traits :: eq_int_type ( _Traits :: eof ( ), _Strbuf . sputc ( _Ch ) ) ) {
                        break;
                    }
                    } catch ( ... ) {
                    break;
                    }
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Chcount == 0 ) {
            _State |= ios_base :: failbit;
        }
        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & getline ( _Elem * _Str, streamsize _Count ) {

        return getline ( _Str, _Count, _Myios :: widen ( '\n' ) );
    }

    basic_istream & getline ( _Elem * _Str, streamsize _Count, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            int_type _Metadelim = _Traits :: to_int_type ( _Delim );

            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else if ( _Meta == _Metadelim ) {
                    _Increment_gcount ( );
                    _Myios :: rdbuf ( ) -> sbumpc ( );
                    break;
                } else if ( -- _Count <= 0 ) {
                    _State |= ios_base :: failbit;
                    break;
                } else {
                    * _Str ++ = _Traits :: to_char_type ( _Meta );
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        * _Str = _Elem ( );
        _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
        return * this;
    }

    basic_istream & ignore ( streamsize _Count = 1, int_type _Metadelim = _Traits :: eof ( ) ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            for (;; ) {
                int_type _Meta;
                if ( _Count != ( numeric_limits < streamsize > :: max ) ( ) && -- _Count < 0 ) {
                    break;
                } else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
                               _Meta = _Myios :: rdbuf ( ) -> sbumpc ( ) ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else {
                    _Increment_gcount ( );
                    if ( _Meta == _Metadelim ) {
                        break;
                    }
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & read ( _Elem * _Str, streamsize _Count ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            const streamsize _Num = _Myios :: rdbuf ( ) -> sgetn ( _Str, _Count );
            _Chcount = _Num;

            if ( _Num != _Count ) {
                _State |= ios_base :: eofbit | ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    streamsize readsome ( _Elem * _Str, streamsize _Count ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );
        streamsize _Num;

        if ( ! _Ok ) {
            _State |= ios_base :: failbit;
        } else if ( ( _Num = _Myios :: rdbuf ( ) -> in_avail ( ) ) < 0 ) {
            _State |= ios_base :: eofbit;
        } else if ( 0 < _Count && 0 < _Num ) {
            read ( _Str, _Num < _Count ? _Num : _Count );
        }

        _Myios :: setstate ( _State );
        return gcount ( );
    }

    int_type peek ( ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        int_type _Meta = 0;
        const sentry _Ok ( * this, true );

        if ( ! _Ok ) {
            _Meta = _Traits :: eof ( );
        } else {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = _Myios :: rdbuf ( ) -> sgetc ( ) ) ) {
                _State |= ios_base :: eofbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return _Meta;
    }

    basic_istream & putback ( _Elem _Ch ) {
        _Chcount = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputbackc ( _Ch ) ) ) {
                _State |= ios_base :: badbit | _Oldstate;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & unget ( ) {
        _Chcount = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sungetc ( ) ) ) {
                _State |= ios_base :: badbit | _Oldstate;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    [ [ nodiscard ] ] streamsize gcount ( ) const noexcept {

        return _Chcount;
    }

    int sync ( ) {
        const sentry _Ok ( * this, true );

        const auto _Rdbuf = _Myios :: rdbuf ( );
        if ( ! _Rdbuf ) {
            return - 1;
        }

        ios_base :: iostate _State = ios_base :: goodbit;
        try {
        if ( _Rdbuf -> pubsync ( ) == - 1 ) {
            _State |= ios_base :: badbit;
        }
        } catch ( ... ) {
        _Myios :: setstate ( ios_base :: badbit, true );
        return - 1;
        }

        if ( _State & ios_base :: badbit ) {
            _Myios :: setstate ( ios_base :: badbit );
            return - 1;
        }

        return 0;
    }

    basic_istream & seekg ( pos_type _Pos ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekpos ( _Pos, ios_base :: in ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & seekg ( off_type _Off, ios_base :: seekdir _Way ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way, ios_base :: in ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    pos_type tellg ( ) {
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            return _Myios :: rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: in );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        return pos_type { off_type { - 1 } };
    }

private :
    streamsize _Chcount { };
};
#line 690 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
#pragma vtordisp(pop)
#line 723 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Elem, class _Traits >
class basic_iostream : public basic_istream < _Elem, _Traits >,
                       public basic_ostream < _Elem, _Traits > {
public :
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Myos = basic_ostream < _Elem, _Traits >;
    using _Myios = basic_ios < _Elem, _Traits >;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    explicit basic_iostream ( basic_streambuf < _Elem, _Traits > * _Strbuf )
        : _Myis ( _Strbuf, false ), _Myos ( _Noinit, false ) { }

protected :
     basic_iostream ( basic_iostream && _Right ) noexcept ( false )
        : _Myis ( _Right . rdbuf ( ), false ), _Myos ( _Noinit, false ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
    }

    basic_iostream & operator = ( basic_iostream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_iostream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Myios :: swap ( _Right );
        }
    }

public :
     basic_iostream ( const basic_iostream & ) = delete;
    basic_iostream & operator = ( const basic_iostream & ) = delete;

     ~ basic_iostream ( ) noexcept override { }
};
#line 776 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & _Istream_extract_into_buffer (
    basic_istream < _Elem, _Traits > & _Istr, size_t _Size, _Elem * _Str ) {
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    ios_base :: iostate _State = ios_base :: goodbit;
    size_t _Current = 0;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( _Istr . getloc ( ) );

        try {
        size_t _Count = _Size;
        const size_t _Width = static_cast < size_t > ( _Istr . width ( ) );
        if ( _Width > 0 && _Width < _Size ) {
            _Count = _Width;
        }

        typename _Myis :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );
        _Elem _Ch;

        for (; _Current < _Count - 1; _Meta = _Istr . rdbuf ( ) -> snextc ( ), ( void ) ++ _Current ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit;
                break;
            } else if ( _Ctype_fac . is ( _Ctype :: space, _Ch = _Traits :: to_char_type ( _Meta ) ) || _Ch == _Elem ( ) ) {
                break;
            } else {
                _Str [ _Current ] = _Traits :: to_char_type ( _Meta );
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
    }
    ;
    _Str [ _Current ] = _Elem ( );
    _Istr . width ( 0 );
    if ( _Current == 0 ) {
        _State |= ios_base :: failbit;
    }
    _Istr . setstate ( _State );
    return _Istr;
}
#line 842 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & operator >> ( basic_istream < _Elem, _Traits > & _Istr, _Elem * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, _Str );
}
#line 847 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, signed char * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, reinterpret_cast < char * > ( _Str ) );
}
#line 852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, unsigned char * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, reinterpret_cast < char * > ( _Str ) );
}
#line 858 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & operator >> ( basic_istream < _Elem, _Traits > & _Istr, _Elem & _Ch ) {
    using _Myis = basic_istream < _Elem, _Traits >;

    typename _Myis :: int_type _Meta;
    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        try {
        _Meta = _Istr . rdbuf ( ) -> sbumpc ( );
        if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
            _State |= ios_base :: eofbit | ios_base :: failbit;
        } else {
            _Ch = _Traits :: to_char_type ( _Meta );
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Istr . setstate ( _State );
    return _Istr;
}
#line 881 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, signed char & _Ch ) {

    return _Istr >> reinterpret_cast < char & > ( _Ch );
}
#line 887 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, unsigned char & _Ch ) {

    return _Istr >> reinterpret_cast < char & > ( _Ch );
}
#line 893 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template< class _Istr, class _Ty, class  = void> 
#line 894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
struct _Can_stream_in : public false_type { }; 
#line 896 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template< class _Istr, class _Ty> 
#line 897 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
struct _Can_stream_in< _Istr, _Ty, void_t< decltype(std::declval< _Istr &> () >> std::declval< _Ty> ())> >  : public true_type { }; 
#line 899 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Istr, class _Ty,
    enable_if_t < conjunction_v < is_convertible < _Istr *, ios_base * >, _Can_stream_in < _Istr, _Ty > >, int > = 0 >
_Istr && operator >> ( _Istr && _Is, _Ty && _Val ) {
    _Is >> :: std :: forward < _Ty > ( _Val );
    return :: std :: move ( _Is );
}
#line 906 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & __cdecl ws ( basic_istream < _Elem, _Traits > & _Istr ) {
    const typename basic_istream < _Elem, _Traits > :: sentry _Ok ( _Istr, true );

    if ( _Ok ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const auto & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Istr . getloc ( ) );

        try {
        for ( typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );; _Meta = _Istr . rdbuf ( ) -> snextc ( ) ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit;
                break;
            } else if ( ! _Ctype_fac . is ( ctype < _Elem > :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                break;
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
        _Istr . setstate ( _State );
    }

    return _Istr;
}
#line 929 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
}
#line 933 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\istream"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
namespace std { 
#line 38 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern istream cin; 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern ostream cout; 
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern ostream cerr; 
#line 41 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern ostream clog; 
#line 42 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern istream *_Ptr_cin; 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern ostream *_Ptr_cout; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern ostream *_Ptr_cerr; 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern ostream *_Ptr_clog; 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern wistream wcin; 
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern wostream wcout; 
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern wostream wcerr; 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern wostream wclog; 
#line 51 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern wistream *_Ptr_wcin; 
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern wostream *_Ptr_wcout; 
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern wostream *_Ptr_wcerr; 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
extern wostream *_Ptr_wclog; 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
}
#line 71 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\iostream"
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
namespace std { 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
namespace experimental { 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
namespace filesystem { 
#line 45 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
inline namespace v1 { 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
class path; 
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
}
#line 48 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
}
#line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
}
#line 53 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template< class _Ty> constexpr bool 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
_Is_any_path = _Is_any_of_v< _Ty, experimental::filesystem::v1::path> ; 
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
FILE *__cdecl _Fiopen(const char *, ios_base::openmode, int); 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
FILE *__cdecl _Fiopen(const __wchar_t *, ios_base::openmode, int); 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template < class _Elem >
bool _Fgetc ( _Elem & _Ch, FILE * _File ) {
    return :: fread ( & _Ch, sizeof ( _Elem ), 1, _File ) == 1;
}
#line 73 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template<> inline bool _Fgetc(char &_Byte, FILE *_File) { 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
int _Meta; 
#line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
if ((_Meta = ::fgetc(_File)) == (-1)) { 
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return false; 
#line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} else { 
#line 78 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
_Byte = (static_cast< char>(_Meta)); 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return true; 
#line 80 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
}  
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template<> inline bool _Fgetc(__wchar_t &_Wchar, FILE *_File) { 
#line 85 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
wint_t _Meta; 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
if ((_Meta = ::fgetwc(_File)) == ((wint_t)65535)) { 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return false; 
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} else { 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
_Wchar = (static_cast< __wchar_t>(_Meta)); 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return true; 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
}  
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} 
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template < class _Elem >
bool _Fputc ( _Elem _Ch, FILE * _File ) {
    return :: fwrite ( & _Ch, 1, sizeof ( _Elem ), _File ) == sizeof ( _Elem );
}
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template<> inline bool _Fputc(char _Byte, FILE *_File) { 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return ::fputc(_Byte, _File) != (-1); 
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template<> inline bool _Fputc(__wchar_t _Wchar, FILE *_File) { 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return (::fputwc(_Wchar, _File)) != ((wint_t)65535); 
#line 120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} 
#line 129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template < class _Elem >
bool _Ungetc ( const _Elem &, FILE * ) {
    return false;
}
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template<> inline bool _Ungetc(const char &_Byte, FILE *_File) { 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return ::ungetc(static_cast< unsigned char>(_Byte), _File) != (-1); 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template<> inline bool _Ungetc(const signed char &_Byte, FILE *_File) { 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return ::ungetc(static_cast< unsigned char>(_Byte), _File) != (-1); 
#line 142 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} 
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template<> inline bool _Ungetc(const unsigned char &_Byte, FILE *_File) { 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return ::ungetc(_Byte, _File) != (-1); 
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} 
#line 150 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template<> inline bool _Ungetc(const __wchar_t &_Wchar, FILE *_File) { 
#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
return (::ungetwc(_Wchar, _File)) != ((wint_t)65535); 
#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
} 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template < class _Elem, class _Traits >
class basic_filebuf : public basic_streambuf < _Elem, _Traits > {
public :
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Cvt = codecvt < _Elem, char, typename _Traits :: state_type >;

    basic_filebuf ( ) : _Mysb ( ) {
        _Init ( nullptr, _Newfl );
    }

    explicit basic_filebuf ( FILE * const _File ) : _Mysb ( ) {
        _Init ( _File, _Newfl );
    }

     ~ basic_filebuf ( ) noexcept override {
        if ( _Myfile ) {
            _Reset_back ( );
        }

        if ( _Closef ) {
            close ( );
        }
    }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    basic_filebuf ( _Uninitialized ) noexcept : _Mysb ( _Noinit ) { }

    basic_filebuf ( basic_filebuf && _Right ) {
        _Init ( _Right . _Myfile, _Newfl );
        _Init ( static_cast < FILE * > ( nullptr ), _Closefl );
        _Assign_rv ( :: std :: move ( _Right ) );
    }

    basic_filebuf & operator = ( basic_filebuf && _Right ) {
        _Assign_rv ( :: std :: move ( _Right ) );
        return * this;
    }

    void _Assign_rv ( basic_filebuf && _Right ) {
        if ( this != :: std :: addressof ( _Right ) ) {
            close ( );
            this -> swap ( _Right );
        }
    }

    void swap ( basic_filebuf & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            FILE * _Myfile_sav = _Myfile;
            const _Cvt * _Pcvt_sav = _Pcvt;
            typename _Traits :: state_type _State_sav = _State;
            bool _Wrotesome_sav = _Wrotesome;
            bool _Closef_sav = _Closef;
            bool _Set_eback_sav = _Mysb :: eback ( ) == & _Mychar;
            bool _Set_eback_live = _Mysb :: gptr ( ) == & _Mychar;

            _Elem * _Pfirst0 = _Mysb :: pbase ( );
            _Elem * _Pnext0 = _Mysb :: pptr ( );
            _Elem * _Pend = _Mysb :: epptr ( );
            _Elem * _Gfirst0 = _Mysb :: eback ( );
            _Elem * _Gnext0 = _Mysb :: gptr ( );
            _Elem * _Gend = _Mysb :: egptr ( );


            _Init ( _Right . _Myfile, _Right . _Myfile ? _Openfl : _Newfl );
            _Mysb :: setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
            if ( _Right . eback ( ) != & _Right . _Mychar ) {
                _Mysb :: setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
            } else if ( _Right . gptr ( ) != & _Right . _Mychar ) {
                _Mysb :: setg ( & _Mychar, & _Mychar + 1, & _Mychar + 1 );
            } else {
                _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );
            }

            _Pcvt = _Right . _Pcvt;
            _State = _Right . _State;
            _Wrotesome = _Right . _Wrotesome;
            _Closef = _Right . _Closef;


            _Right . _Init ( _Myfile_sav, _Myfile_sav ? _Openfl : _Newfl );
            _Right . setp ( _Pfirst0, _Pnext0, _Pend );
            if ( ! _Set_eback_sav ) {
                _Right . setg ( _Gfirst0, _Gnext0, _Gend );
            } else if ( ! _Set_eback_live ) {
                _Right . setg ( & _Right . _Mychar, & _Right . _Mychar + 1, & _Right . _Mychar + 1 );
            } else {
                _Right . setg ( & _Right . _Mychar, & _Right . _Mychar, & _Right . _Mychar + 1 );
            }

            _Right . _Pcvt = _Pcvt_sav;
            _Right . _State = _State_sav;
            _Right . _Wrotesome = _Wrotesome_sav;
            _Right . _Closef = _Closef_sav;


            :: std :: swap ( _Set_eback, _Right . _Set_eback );
            :: std :: swap ( _Set_egptr, _Right . _Set_egptr );

            :: std :: swap ( _Mychar, _Right . _Mychar );
            :: std :: swap ( _Mysb :: _Plocale, _Right . _Plocale );
        }
    }

    basic_filebuf ( const basic_filebuf & ) = delete;
    basic_filebuf & operator = ( const basic_filebuf & ) = delete;

    enum _Initfl {
        _Newfl,
        _Openfl,
        _Closefl
    };

    [ [ nodiscard ] ] bool is_open ( ) const noexcept {
        return static_cast < bool > ( _Myfile );
    }

    basic_filebuf * open ( const char * _Filename, ios_base :: openmode _Mode, int _Prot = ios_base :: _Default_open_prot ) {

        if ( _Myfile ) {
            return nullptr;
        }

        const auto _File = _Fiopen ( _Filename, _Mode, _Prot );
        if ( ! _File ) {
            return nullptr;
        }

        _Init ( _File, _Openfl );
        _Initcvt ( :: std :: use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
        return this;
    }

    basic_filebuf * open ( const string & _Str, ios_base :: openmode _Mode, int _Prot = ios_base :: _Default_open_prot ) {

        return open ( _Str . c_str ( ), _Mode, _Prot );
    }


    basic_filebuf * open ( const char * _Filename, ios_base :: open_mode _Mode ) {
        return open ( _Filename, static_cast < ios_base :: openmode > ( _Mode ) );
    }


    basic_filebuf * open ( const wchar_t * _Filename, ios_base :: openmode _Mode, int _Prot = ios_base :: _Default_open_prot ) {

        if ( _Myfile ) {
            return nullptr;
        }

        const auto _File = _Fiopen ( _Filename, _Mode, _Prot );
        if ( ! _File ) {
            return nullptr;
        }

        _Init ( _File, _Openfl );
        _Initcvt ( :: std :: use_facet < _Cvt > ( _Mysb :: getloc ( ) ) );
        return this;
    }

    basic_filebuf * open ( const wstring & _Str, ios_base :: openmode _Mode, int _Prot = ios_base :: _Default_open_prot ) {

        return open ( _Str . c_str ( ), _Mode, _Prot );
    }


    template < class _Path_ish = experimental :: filesystem :: path >
    basic_filebuf * open (
        const _Identity_t < _Path_ish > & _Path, ios_base :: openmode _Mode, int _Prot = ios_base :: _Default_open_prot ) {

        return open ( _Path . c_str ( ), _Mode, _Prot );
    }












    basic_filebuf * open ( const wchar_t * _Filename, ios_base :: open_mode _Mode ) {

        return open ( _Filename, static_cast < ios_base :: openmode > ( _Mode ) );
    }


    basic_filebuf * close ( ) {
        basic_filebuf * _Ans;
        if ( _Myfile ) {
            _Reset_back ( );

            _Ans = this;
            if ( ! _Endwrite ( ) ) {
                _Ans = nullptr;
            }

            if ( :: fclose ( _Myfile ) != 0 ) {
                _Ans = nullptr;
            }
        } else {
            _Ans = nullptr;
        }

        _Init ( nullptr, _Closefl );
        return _Ans;
    }

    void _Lock ( ) override {
        if ( _Myfile ) {
            :: _lock_file ( _Myfile );
        }
    }

    void _Unlock ( ) override {
        if ( _Myfile ) {
            :: _unlock_file ( _Myfile );
        }
    }






protected :
    int_type overflow ( int_type _Meta = _Traits :: eof ( ) ) override {
        if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
            return _Traits :: not_eof ( _Meta );
        }

        if ( _Mysb :: pptr ( ) && _Mysb :: pptr ( ) < _Mysb :: epptr ( ) ) {
            * _Mysb :: _Pninc ( ) = _Traits :: to_char_type ( _Meta );
            return _Meta;
        }

        if ( ! _Myfile ) {
            return _Traits :: eof ( );
        }

        _Reset_back ( );
        if ( ! _Pcvt ) {
            return _Fputc ( _Traits :: to_char_type ( _Meta ), _Myfile ) ? _Meta : _Traits :: eof ( );
        }


        constexpr size_t _Codecvt_temp_buf = 32;
        char _Str [ _Codecvt_temp_buf ];
        const _Elem _Ch = _Traits :: to_char_type ( _Meta );
        const _Elem * _Src;
        char * _Dest;


        switch ( _Pcvt -> out ( _State, & _Ch, & _Ch + 1, _Src, _Str, _Str + _Codecvt_temp_buf, _Dest ) ) {
        case codecvt_base :: partial :
        case codecvt_base :: ok :
            {
                const auto _Count = static_cast < size_t > ( _Dest - _Str );
                if ( 0 < _Count && _Count != static_cast < size_t > ( :: fwrite ( _Str, 1, _Count, _Myfile ) ) ) {
                    return _Traits :: eof ( );
                }

                _Wrotesome = true;
                if ( _Src != & _Ch ) {
                    return _Meta;
                }

                return _Traits :: eof ( );
            }

        case codecvt_base :: noconv :

            return _Fputc ( _Ch, _Myfile ) ? _Meta : _Traits :: eof ( );

        default :
            return _Traits :: eof ( );
        }
    }

    int_type pbackfail ( int_type _Meta = _Traits :: eof ( ) ) override {

        if ( _Mysb :: gptr ( ) && _Mysb :: eback ( ) < _Mysb :: gptr ( )
            && ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta )
                || _Traits :: eq_int_type ( _Traits :: to_int_type ( _Mysb :: gptr ( ) [ - 1 ] ),
                    _Meta ) ) ) {
            _Mysb :: _Gndec ( );
            return _Traits :: not_eof ( _Meta );
        } else if ( ! _Myfile || _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
            return _Traits :: eof ( );
        } else if ( ! _Pcvt && _Ungetc ( _Traits :: to_char_type ( _Meta ), _Myfile ) ) {
            return _Meta;
        } else if ( _Mysb :: gptr ( ) != & _Mychar ) {
            _Mychar = _Traits :: to_char_type ( _Meta );
            _Set_back ( );
            return _Meta;
        } else {
            return _Traits :: eof ( );
        }
    }

    int_type underflow ( ) override {
        int_type _Meta;
        if ( _Mysb :: gptr ( ) && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) ) {
            return _Traits :: to_int_type ( * _Mysb :: gptr ( ) );
        } else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = uflow ( ) ) ) {
            return _Meta;
        } else {
            pbackfail ( _Meta );
            return _Meta;
        }
    }

    int_type uflow ( ) override {
        if ( _Mysb :: gptr ( ) && _Mysb :: gptr ( ) < _Mysb :: egptr ( ) ) {
            return _Traits :: to_int_type ( * _Mysb :: _Gninc ( ) );
        }

        if ( ! _Myfile ) {
            return _Traits :: eof ( );
        }

        _Reset_back ( );
        if ( ! _Pcvt ) {
            _Elem _Ch;
            return _Fgetc ( _Ch, _Myfile ) ? _Traits :: to_int_type ( _Ch ) : _Traits :: eof ( );
        }


        string _Str;

        for (;; ) {
            const char * _Src;
            int _Meta = :: fgetc ( _Myfile );

            if ( _Meta == ( - 1 ) ) {
                return _Traits :: eof ( );
            }

            _Str . push_back ( static_cast < char > ( _Meta ) );

            _Elem _Ch;
            _Elem * _Dest;


            switch ( _Pcvt -> in ( _State, _Str . data ( ), _Str . data ( ) + _Str . size ( ), _Src, & _Ch, & _Ch + 1, _Dest ) ) {
            case codecvt_base :: partial :
            case codecvt_base :: ok :
                if ( _Dest != & _Ch ) {
                    auto _Nleft = _Str . data ( ) + _Str . size ( ) - _Src;
                    while ( 0 < _Nleft ) {
                        :: ungetc ( _Src [ -- _Nleft ], _Myfile );
                    }

                    return _Traits :: to_int_type ( _Ch );
                }

                _Str . erase ( 0, static_cast < size_t > ( _Src - _Str . data ( ) ) );
                break;

            case codecvt_base :: noconv :

                return static_cast < int_type > ( _Str . front ( ) );

            default :
                return _Traits :: eof ( );
            }
        }
    }

    streamsize xsgetn ( _Elem * _Ptr, streamsize _Count ) override {

        if constexpr ( sizeof ( _Elem ) == 1 ) {
            if ( _Count <= 0 ) {
                return 0;
            }

            if ( _Pcvt ) {
                return _Mysb :: xsgetn ( _Ptr, _Count );
            }


            auto _Count_s = static_cast < size_t > ( _Count );
            const auto _Start_count = _Count;
            const auto _Available = static_cast < size_t > ( _Mysb :: _Gnavail ( ) );
            if ( 0 < _Available ) {
                const auto _Read_size = ( :: std :: min ) ( _Count_s, _Available );
                _Traits :: copy ( _Ptr, _Mysb :: gptr ( ), _Read_size );
                _Ptr += _Read_size;
                _Count_s -= _Read_size;
                _Mysb :: gbump ( static_cast < int > ( _Read_size ) );
            }

            if ( _Myfile ) {
                _Reset_back ( );


                constexpr size_t _Read_size = 4095;
                while ( _Read_size < _Count_s ) {
                    const auto _Actual_read = :: fread ( _Ptr, sizeof ( _Elem ), _Read_size, _Myfile );
                    _Ptr += _Actual_read;
                    _Count_s -= _Actual_read;
                    if ( _Actual_read != _Read_size ) {
                        return static_cast < streamsize > ( _Start_count - _Count_s );
                    }
                }

                if ( 0 < _Count_s ) {
                    _Count_s -= :: fread ( _Ptr, sizeof ( _Elem ), _Count_s, _Myfile );
                }
            }

            return static_cast < streamsize > ( _Start_count - _Count_s );
        } else {
            return _Mysb :: xsgetn ( _Ptr, _Count );
        }
    }

    streamsize xsputn ( const _Elem * _Ptr, streamsize _Count ) override {

        if constexpr ( sizeof ( _Elem ) == 1 ) {
            if ( _Pcvt ) {
                return _Mysb :: xsputn ( _Ptr, _Count );
            }

            const streamsize _Start_count = _Count;
            streamsize _Size = _Mysb :: _Pnavail ( );
            if ( 0 < _Count && 0 < _Size ) {
                if ( _Count < _Size ) {
                    _Size = _Count;
                }

                _Traits :: copy ( _Mysb :: pptr ( ), _Ptr, static_cast < size_t > ( _Size ) );
                _Ptr += _Size;
                _Count -= _Size;
                _Mysb :: pbump ( static_cast < int > ( _Size ) );
            }

            if ( 0 < _Count && _Myfile ) {
                _Count -= :: fwrite ( _Ptr, sizeof ( _Elem ), static_cast < size_t > ( _Count ), _Myfile );
            }

            return _Start_count - _Count;
        } else {
            return _Mysb :: xsputn ( _Ptr, _Count );
        }
    }

    pos_type seekoff ( off_type _Off, ios_base :: seekdir _Way,
        ios_base :: openmode = ios_base :: in | ios_base :: out ) override {
        fpos_t _Fileposition;

        if ( _Mysb :: gptr ( ) == & _Mychar
            && _Way == ios_base :: cur
            && ! _Pcvt ) {
            _Off -= static_cast < off_type > ( sizeof ( _Elem ) );
        }

        if ( ! _Myfile || ! _Endwrite ( )
            || ( ( _Off != 0 || _Way != ios_base :: cur ) && :: _fseeki64 ( _Myfile, _Off, _Way ) != 0 )
            || :: fgetpos ( _Myfile, & _Fileposition ) != 0 ) {
            return pos_type { off_type { - 1 } };
        }

        _Reset_back ( );
        return pos_type { _State, _Fileposition };
    }

    pos_type seekpos ( pos_type _Pos, ios_base :: openmode = ios_base :: in | ios_base :: out ) override {

        off_type _Off = static_cast < off_type > ( _Pos );

        if ( ! _Myfile || ! _Endwrite ( ) || :: fsetpos ( _Myfile, & _Off ) != 0 ) {
            return pos_type { off_type { - 1 } };
        }

        _State = _Pos . state ( );
        _Reset_back ( );
        return pos_type { _State, _Off };
    }

    _Mysb * setbuf ( _Elem * _Buffer, streamsize _Count ) override {
        int _Mode;
        if ( ! _Buffer && _Count == 0 ) {
            _Mode = 4;
        } else {
            _Mode = 0;
        }

        const size_t _Size = static_cast < size_t > ( _Count ) * sizeof ( _Elem );

        if ( ! _Myfile || :: setvbuf ( _Myfile, reinterpret_cast < char * > ( _Buffer ), _Mode, _Size ) != 0 ) {
            return nullptr;
        }


        _Init ( _Myfile, _Openfl );
        return this;
    }

    int sync ( ) override {
        if ( ! _Myfile || _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) ) || 0 <= :: fflush ( _Myfile ) ) {
            return 0;
        }

        return - 1;
    }

    void imbue ( const locale & _Loc ) override {

        _Initcvt ( :: std :: use_facet < _Cvt > ( _Loc ) );
    }

    void _Init ( FILE * _File, _Initfl _Which ) noexcept {
        using _State_type = typename _Traits :: state_type;

         static _State_type _Stinit;

        _Closef = _Which == _Openfl;
        _Wrotesome = false;

        _Mysb :: _Init ( );

        if ( _File && sizeof ( _Elem ) == 1 ) {
            _Elem * * _Pb = nullptr;
            _Elem * * _Pn = nullptr;
            int * _Nr = nullptr;

            :: _get_stream_buffer_pointers (
                _File, reinterpret_cast < char * * * > ( & _Pb ), reinterpret_cast < char * * * > ( & _Pn ), & _Nr );
            int * _Nw = _Nr;

            _Mysb :: _Init ( _Pb, _Pn, _Nr, _Pb, _Pn, _Nw );
        }

        _Myfile = _File;
        _State = _Stinit;
        _Pcvt = nullptr;
    }

    bool _Endwrite ( ) {
        if ( ! _Pcvt || ! _Wrotesome ) {
            return true;
        }


        if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( ) ) ) {
            return false;
        }

        constexpr size_t _Codecvt_temp_buf = 32;
        char _Str [ _Codecvt_temp_buf ];
        char * _Dest;
        switch ( _Pcvt -> unshift ( _State, _Str, _Str + _Codecvt_temp_buf, _Dest ) ) {
        case codecvt_base :: ok :
            _Wrotesome = false;
            ;

        case codecvt_base :: partial :
            {
                const auto _Count = static_cast < size_t > ( _Dest - _Str );
                if ( 0 < _Count && _Count != static_cast < size_t > ( :: fwrite ( _Str, 1, _Count, _Myfile ) ) ) {
                    return false;
                }

                return ! _Wrotesome;
            }

        case codecvt_base :: noconv :
            _Wrotesome = false;
            return true;

        default :
            return false;
        }
    }

    void _Initcvt ( const _Cvt & _Newcvt ) noexcept {
        if ( _Newcvt . always_noconv ( ) ) {
            _Pcvt = nullptr;
        } else {
            _Pcvt = :: std :: addressof ( _Newcvt );
            _Mysb :: _Init ( );
        }
    }

private :
    const _Cvt * _Pcvt;
    _Elem _Mychar;
    bool _Wrotesome;
    typename _Traits :: state_type _State;
    bool _Closef;
    FILE * _Myfile;

    void _Reset_back ( ) noexcept {
        if ( _Mysb :: eback ( ) == & _Mychar ) {
            _Mysb :: setg ( _Set_eback, _Set_eback, _Set_egptr );
        }
    }

    void _Set_back ( ) noexcept {
        if ( _Mysb :: eback ( ) != & _Mychar ) {
            _Set_eback = _Mysb :: eback ( );
            _Set_egptr = _Mysb :: egptr ( );
        }
        _Mysb :: setg ( & _Mychar, & _Mychar, & _Mychar + 1 );
    }

    _Elem * _Set_eback;
    _Elem * _Set_egptr;
};
#line 777 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
template < class _Elem, class _Traits >
void swap ( basic_filebuf < _Elem, _Traits > & _Left, basic_filebuf < _Elem, _Traits > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 782 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
}
#line 786 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\__msvc_filebuf.hpp"
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
namespace std { 
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
template < class _Elem, class _Traits >
class basic_ifstream : public basic_istream < _Elem, _Traits > {
public :
    using _Mybase = basic_istream < _Elem, _Traits >;
    using _Myfb = basic_filebuf < _Elem, _Traits >;
    using _Myios = basic_ios < _Elem, _Traits >;

    basic_ifstream ( ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ) { }

    explicit basic_ifstream (
        const char * _Filename, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot )
        : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {

        if ( ! _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    explicit basic_ifstream (
        const string & _Str, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot )
        : basic_ifstream ( _Str . c_str ( ), _Mode, _Prot ) { }

    explicit basic_ifstream (
        const wchar_t * _Filename, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot )
        : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {

        if ( ! _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    explicit basic_ifstream (
        const wstring & _Str, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot )
        : basic_ifstream ( _Str . c_str ( ), _Mode, _Prot ) { }

    template < class _Ty, enable_if_t < _Is_any_path < _Ty >, int > = 0 >
    explicit basic_ifstream (
        const _Ty & _Path, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot )
        : basic_ifstream ( _Path . c_str ( ), _Mode, _Prot ) { }

    explicit basic_ifstream ( FILE * _File ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ), _Filebuffer ( _File ) { }

    basic_ifstream ( basic_ifstream && _Right ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {
        _Assign_rv ( :: std :: move ( _Right ) );
    }

    basic_ifstream & operator = ( basic_ifstream && _Right ) {
        _Assign_rv ( :: std :: move ( _Right ) );
        return * this;
    }

    void _Assign_rv ( basic_ifstream && _Right ) {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Filebuffer . close ( );
            this -> swap ( _Right );
        }
    }

    void swap ( basic_ifstream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mybase :: swap ( _Right );
            _Filebuffer . swap ( _Right . _Filebuffer );
        }
    }

    basic_ifstream ( const basic_ifstream & ) = delete;
    basic_ifstream & operator = ( const basic_ifstream & ) = delete;

    void open (
        const wchar_t * _Filename, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot ) {

        if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) ) {
            _Myios :: clear ( );
        } else {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    void open ( const wstring & _Str, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Str . c_str ( ), _Mode, _Prot );
    }


    template < class _Path_ish = experimental :: filesystem :: path >
    void open ( const _Identity_t < _Path_ish > & _Path, ios_base :: openmode _Mode = ios_base :: in,
        int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Path . c_str ( ), _Mode, _Prot );
    }












    void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode ) {

        open ( _Filename, static_cast < ios_base :: openmode > ( _Mode ) );
    }


     ~ basic_ifstream ( ) noexcept override { }

    [ [ nodiscard ] ] _Myfb * rdbuf ( ) const noexcept {
        return const_cast < _Myfb * > ( :: std :: addressof ( _Filebuffer ) );
    }

    [ [ nodiscard ] ] bool is_open ( ) const noexcept {
        return _Filebuffer . is_open ( );
    }

    void open (
        const char * _Filename, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot ) {

        if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: in, _Prot ) ) {
            _Myios :: clear ( );
        } else {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    void open ( const string & _Str, ios_base :: openmode _Mode = ios_base :: in, int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Str . c_str ( ), _Mode, _Prot );
    }


    void open ( const char * _Filename, ios_base :: open_mode _Mode ) {
        open ( _Filename, static_cast < ios_base :: openmode > ( _Mode ) );
    }


    void close ( ) {
        if ( ! _Filebuffer . close ( ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

private :
    _Myfb _Filebuffer;
};
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
template < class _Elem, class _Traits >
void swap ( basic_ifstream < _Elem, _Traits > & _Left, basic_ifstream < _Elem, _Traits > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
template < class _Elem, class _Traits >
class basic_ofstream : public basic_ostream < _Elem, _Traits > {
public :
    using _Mybase = basic_ostream < _Elem, _Traits >;
    using _Myfb = basic_filebuf < _Elem, _Traits >;
    using _Myios = basic_ios < _Elem, _Traits >;

    basic_ofstream ( ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ) { }

    explicit basic_ofstream ( const char * _Filename, ios_base :: openmode _Mode = ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot )
        : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {
        if ( ! _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    explicit basic_ofstream (
        const string & _Str, ios_base :: openmode _Mode = ios_base :: out, int _Prot = ios_base :: _Default_open_prot )
        : basic_ofstream ( _Str . c_str ( ), _Mode, _Prot ) { }

    explicit basic_ofstream (
        const wchar_t * _Filename, ios_base :: openmode _Mode = ios_base :: out, int _Prot = ios_base :: _Default_open_prot )
        : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {

        if ( ! _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    explicit basic_ofstream (
        const wstring & _Str, ios_base :: openmode _Mode = ios_base :: out, int _Prot = ios_base :: _Default_open_prot )
        : basic_ofstream ( _Str . c_str ( ), _Mode, _Prot ) { }

    template < class _Ty, enable_if_t < _Is_any_path < _Ty >, int > = 0 >
    explicit basic_ofstream (
        const _Ty & _Path, ios_base :: openmode _Mode = ios_base :: out, int _Prot = ios_base :: _Default_open_prot )
        : basic_ofstream ( _Path . c_str ( ), _Mode, _Prot ) { }

    explicit basic_ofstream ( FILE * _File ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ), _Filebuffer ( _File ) { }

    basic_ofstream ( basic_ofstream && _Right ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {
        _Assign_rv ( :: std :: move ( _Right ) );
    }

    basic_ofstream & operator = ( basic_ofstream && _Right ) {
        _Assign_rv ( :: std :: move ( _Right ) );
        return * this;
    }

    void _Assign_rv ( basic_ofstream && _Right ) {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Filebuffer . close ( );
            this -> swap ( _Right );
        }
    }

    void swap ( basic_ofstream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mybase :: swap ( _Right );
            _Filebuffer . swap ( _Right . _Filebuffer );
        }
    }

    basic_ofstream ( const basic_ofstream & ) = delete;
    basic_ofstream & operator = ( const basic_ofstream & ) = delete;

    void open (
        const wchar_t * _Filename, ios_base :: openmode _Mode = ios_base :: out, int _Prot = ios_base :: _Default_open_prot ) {

        if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) ) {
            _Myios :: clear ( );
        } else {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    void open ( const wstring & _Str, ios_base :: openmode _Mode = ios_base :: out, int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Str . c_str ( ), _Mode, _Prot );
    }


    template < class _Path_ish = experimental :: filesystem :: path >
    void open ( const _Identity_t < _Path_ish > & _Path, ios_base :: openmode _Mode = ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Path . c_str ( ), _Mode, _Prot );
    }












    void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode ) {

        open ( _Filename, static_cast < ios_base :: openmode > ( _Mode ) );
    }


     ~ basic_ofstream ( ) noexcept override { }

    [ [ nodiscard ] ] _Myfb * rdbuf ( ) const noexcept {
        return const_cast < _Myfb * > ( :: std :: addressof ( _Filebuffer ) );
    }

    [ [ nodiscard ] ] bool is_open ( ) const noexcept {
        return _Filebuffer . is_open ( );
    }

    void open (
        const char * _Filename, ios_base :: openmode _Mode = ios_base :: out, int _Prot = ios_base :: _Default_open_prot ) {

        if ( _Filebuffer . open ( _Filename, _Mode | ios_base :: out, _Prot ) ) {
            _Myios :: clear ( );
        } else {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    void open ( const string & _Str, ios_base :: openmode _Mode = ios_base :: out, int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Str . c_str ( ), _Mode, _Prot );
    }


    void open ( const char * _Filename, ios_base :: open_mode _Mode ) {
        open ( _Filename, static_cast < ios_base :: openmode > ( _Mode ) );
    }


    void close ( ) {
        if ( ! _Filebuffer . close ( ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

private :
    _Myfb _Filebuffer;
};
#line 324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
template < class _Elem, class _Traits >
void swap ( basic_ofstream < _Elem, _Traits > & _Left, basic_ofstream < _Elem, _Traits > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
template < class _Elem, class _Traits >
class basic_fstream : public basic_iostream < _Elem, _Traits > {
public :
    using _Mybase = basic_iostream < _Elem, _Traits >;
    using _Myfb = basic_filebuf < _Elem, _Traits >;
    using _Myios = basic_ios < _Elem, _Traits >;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    basic_fstream ( ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ) { }

    explicit basic_fstream ( const char * _Filename, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot )
        : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {
        if ( ! _Filebuffer . open ( _Filename, _Mode, _Prot ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    explicit basic_fstream ( const string & _Str, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot )
        : basic_fstream ( _Str . c_str ( ), _Mode, _Prot ) { }

    explicit basic_fstream ( const wchar_t * _Filename, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot )
        : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {

        if ( ! _Filebuffer . open ( _Filename, _Mode, _Prot ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    explicit basic_fstream ( const wstring & _Str, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot )
        : basic_fstream ( _Str . c_str ( ), _Mode, _Prot ) { }

    template < class _Ty, enable_if_t < _Is_any_path < _Ty >, int > = 0 >
    explicit basic_fstream ( const _Ty & _Path, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot )
        : basic_fstream ( _Path . c_str ( ), _Mode, _Prot ) { }

    explicit basic_fstream ( FILE * _File ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ), _Filebuffer ( _File ) { }

    basic_fstream ( basic_fstream && _Right ) : _Mybase ( :: std :: addressof ( _Filebuffer ) ) {
        _Assign_rv ( :: std :: move ( _Right ) );
    }

    basic_fstream & operator = ( basic_fstream && _Right ) {
        _Assign_rv ( :: std :: move ( _Right ) );
        return * this;
    }

    void _Assign_rv ( basic_fstream && _Right ) {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Filebuffer . close ( );
            this -> swap ( _Right );
        }
    }

    void swap ( basic_fstream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mybase :: swap ( _Right );
            _Filebuffer . swap ( _Right . _Filebuffer );
        }
    }

    basic_fstream ( const basic_fstream & ) = delete;
    basic_fstream & operator = ( const basic_fstream & ) = delete;

    void open ( const wchar_t * _Filename, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot ) {

        if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) ) {
            _Myios :: clear ( );
        } else {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    void open ( const wstring & _Str, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Str . c_str ( ), _Mode, _Prot );
    }


    template < class _Path_ish = experimental :: filesystem :: path >
    void open ( const _Identity_t < _Path_ish > & _Path, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Path . c_str ( ), _Mode, _Prot );
    }












    void open ( const wchar_t * _Filename, ios_base :: open_mode _Mode ) {

        open ( _Filename, static_cast < ios_base :: openmode > ( _Mode ) );
    }


     ~ basic_fstream ( ) noexcept override { }

    [ [ nodiscard ] ] _Myfb * rdbuf ( ) const noexcept {
        return const_cast < _Myfb * > ( :: std :: addressof ( _Filebuffer ) );
    }

    [ [ nodiscard ] ] bool is_open ( ) const noexcept {
        return _Filebuffer . is_open ( );
    }

    void open ( const char * _Filename, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot ) {

        if ( _Filebuffer . open ( _Filename, _Mode, _Prot ) ) {
            _Myios :: clear ( );
        } else {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

    void open ( const string & _Str, ios_base :: openmode _Mode = ios_base :: in | ios_base :: out,
        int _Prot = ios_base :: _Default_open_prot ) {

        open ( _Str . c_str ( ), _Mode, _Prot );
    }


    void open ( const char * _Filename, ios_base :: open_mode _Mode ) {
        open ( _Filename, static_cast < ios_base :: openmode > ( _Mode ) );
    }


    void close ( ) {
        if ( ! _Filebuffer . close ( ) ) {
            _Myios :: setstate ( ios_base :: failbit );
        }
    }

private :
    _Myfb _Filebuffer;
};
#line 484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
template < class _Elem, class _Traits >
void swap ( basic_fstream < _Elem, _Traits > & _Left, basic_fstream < _Elem, _Traits > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 488 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
}
#line 494 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\fstream"
#pragma warning(pop)
#pragma pack ( pop )
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4868 4988 5026 5027 5045 5220 6294 4984 5053 )
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
namespace std { 
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & getline (
    basic_istream < _Elem, _Traits > && _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str, const _Elem _Delim ) {

    using _Myis = basic_istream < _Elem, _Traits >;

    typename _Myis :: iostate _State = _Myis :: goodbit;
    bool _Changed = false;
    const typename _Myis :: sentry _Ok ( _Istr, true );

    if ( _Ok ) {
        try {
        _Str . erase ( );
        const typename _Traits :: int_type _Metadelim = _Traits :: to_int_type ( _Delim );
        typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

        for (;; _Meta = _Istr . rdbuf ( ) -> snextc ( ) ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= _Myis :: eofbit;
                break;
            } else if ( _Traits :: eq_int_type ( _Meta, _Metadelim ) ) {
                _Changed = true;
                _Istr . rdbuf ( ) -> sbumpc ( );
                break;
            } else if ( _Str . max_size ( ) <= _Str . size ( ) ) {
                _State |= _Myis :: failbit;
                break;
            } else {
                _Str += _Traits :: to_char_type ( _Meta );
                _Changed = true;
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( _Myis :: badbit, true ); }
    }

    if ( ! _Changed ) {
        _State |= _Myis :: failbit;
    }

    _Istr . setstate ( _State );
    return static_cast < basic_istream < _Elem, _Traits > & > ( _Istr );
}
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & getline (
    basic_istream < _Elem, _Traits > && _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str ) {

    return :: std :: getline ( :: std :: move ( _Istr ), _Str, _Istr . widen ( '\n' ) );
}
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & getline (
    basic_istream < _Elem, _Traits > & _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str, const _Elem _Delim ) {

    return :: std :: getline ( :: std :: move ( _Istr ), _Str, _Delim );
}
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & getline (
    basic_istream < _Elem, _Traits > & _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str ) {

    return :: std :: getline ( :: std :: move ( _Istr ), _Str, _Istr . widen ( '\n' ) );
}
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline int stoi(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
char *_Eptr; 
#line 92 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stoi argument"); 
#line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 99 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 100 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stoi argument out of range"); 
#line 101 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return static_cast< int>(_Ans); 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline long stol(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 111 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
char *_Eptr; 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stol argument"); 
#line 119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 121 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stol argument out of range"); 
#line 123 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 129 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline unsigned long stoul(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 133 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
char *_Eptr; 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 137 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const unsigned long _Ans = ::strtoul(_Ptr, &_Eptr, _Base); 
#line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stoul argument"); 
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 144 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stoul argument out of range"); 
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 147 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 152 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline __int64 stoll(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 157 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
char *_Eptr; 
#line 158 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __int64 _Ans = ::strtoll(_Ptr, &_Eptr, _Base); 
#line 161 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stoll argument"); 
#line 163 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 166 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stoll argument out of range"); 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 170 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 174 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 176 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline unsigned __int64 stoull(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 178 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
char *_Eptr; 
#line 180 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const unsigned __int64 _Ans = ::strtoull(_Ptr, &_Eptr, _Base); 
#line 183 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stoull argument"); 
#line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stoull argument out of range"); 
#line 189 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 191 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 195 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 198 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline float stof(const string &_Str, size_t *_Idx = 0) { 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 201 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
char *_Eptr; 
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const float _Ans = ::strtof(_Ptr, &_Eptr); 
#line 205 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stof argument"); 
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 209 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 210 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stof argument out of range"); 
#line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 213 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 214 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 217 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 218 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline double stod(const string &_Str, size_t *_Idx = 0) { 
#line 221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 222 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 223 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
char *_Eptr; 
#line 224 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const double _Ans = ::strtod(_Ptr, &_Eptr); 
#line 227 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stod argument"); 
#line 229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stod argument out of range"); 
#line 233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 236 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 237 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 240 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 242 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline long double stold(const string &_Str, size_t *_Idx = 0) { 
#line 243 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const char *_Ptr = _Str.c_str(); 
#line 245 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
char *_Eptr; 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const long double _Ans = ::strtold(_Ptr, &_Eptr); 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stold argument"); 
#line 251 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 253 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 254 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stold argument out of range"); 
#line 255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 257 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 262 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline int stoi(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 265 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 267 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
__wchar_t *_Eptr; 
#line 268 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stoi argument"); 
#line 273 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 275 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stoi argument out of range"); 
#line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 279 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 281 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 283 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return static_cast< int>(_Ans); 
#line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline long stol(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 287 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
__wchar_t *_Eptr; 
#line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 291 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 294 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stol argument"); 
#line 295 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stol argument out of range"); 
#line 299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 301 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 302 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 305 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 306 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 308 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline unsigned long stoul(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 309 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 311 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
__wchar_t *_Eptr; 
#line 312 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const unsigned long _Ans = ::wcstoul(_Ptr, &_Eptr, _Base); 
#line 315 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 316 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stoul argument"); 
#line 317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stoul argument out of range"); 
#line 321 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 324 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 328 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 330 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline __int64 stoll(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 332 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 333 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
__wchar_t *_Eptr; 
#line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __int64 _Ans = ::wcstoll(_Ptr, &_Eptr, _Base); 
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 338 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stoll argument"); 
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 341 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stoll argument out of range"); 
#line 343 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 345 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 346 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 347 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 349 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 350 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline unsigned __int64 stoull(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 353 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 354 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
__wchar_t *_Eptr; 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const unsigned __int64 _Ans = ::wcstoull(_Ptr, &_Eptr, _Base); 
#line 359 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stoull argument"); 
#line 361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stoull argument out of range"); 
#line 365 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 368 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 371 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 374 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline float stof(const wstring &_Str, size_t *_Idx = 0) { 
#line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
__wchar_t *_Eptr; 
#line 378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const float _Ans = ::wcstof(_Ptr, &_Eptr); 
#line 381 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 382 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stof argument"); 
#line 383 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 385 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stof argument out of range"); 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 390 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 393 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 396 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline double stod(const wstring &_Str, size_t *_Idx = 0) { 
#line 397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 398 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
__wchar_t *_Eptr; 
#line 400 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 401 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const double _Ans = ::wcstod(_Ptr, &_Eptr); 
#line 403 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stod argument"); 
#line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 407 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 408 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stod argument out of range"); 
#line 409 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 413 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 418 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline long double stold(const wstring &_Str, size_t *_Idx = 0) { 
#line 419 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
int &_Errno_ref = *_errno(); 
#line 420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const __wchar_t *_Ptr = _Str.c_str(); 
#line 421 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
__wchar_t *_Eptr; 
#line 422 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Errno_ref = 0; 
#line 423 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const long double _Ans = ::wcstold(_Ptr, &_Eptr); 
#line 425 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Ptr == _Eptr) { 
#line 426 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xinvalid_argument("invalid stold argument"); 
#line 427 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 429 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Errno_ref == 34) { 
#line 430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
_Xout_of_range("stold argument out of range"); 
#line 431 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 433 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
if (_Idx) { 
#line 434 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 435 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}  
#line 437 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Ans; 
#line 438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
template < class _Elem, class _UTy >
[ [ nodiscard ] ] _Elem * _UIntegral_to_buff ( _Elem * _RNext, _UTy _UVal ) {

    static_assert ( is_unsigned_v < _UTy >, "_UTy must be unsigned" );


    auto _UVal_trunc = _UVal;


















    do {
        * -- _RNext = static_cast < _Elem > ( '0' + _UVal_trunc % 10 );
        _UVal_trunc /= 10;
    } while ( _UVal_trunc != 0 );
    return _RNext;
}
#line 472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
template < class _Elem, class _Ty >
[ [ nodiscard ] ] basic_string < _Elem > _Integral_to_string ( const _Ty _Val ) {

    static_assert ( is_integral_v < _Ty >, "_Ty must be integral" );
    using _UTy = make_unsigned_t < _Ty >;
    _Elem _Buff [ 21 ];
    _Elem * const _Buff_end = :: std :: end ( _Buff );
    _Elem * _RNext = _Buff_end;
    const auto _UVal = static_cast < _UTy > ( _Val );
    if ( _Val < 0 ) {
        _RNext = _UIntegral_to_buff ( _RNext, 0 - _UVal );
        * -- _RNext = '-';
    } else {
        _RNext = _UIntegral_to_buff ( _RNext, _UVal );
    }

    return basic_string < _Elem > ( _RNext, _Buff_end );
}
#line 492 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
template < class _Elem, class _Ty >
[ [ nodiscard ] ] basic_string < _Elem > _UIntegral_to_string ( const _Ty _Val ) {

    static_assert ( is_integral_v < _Ty >, "_Ty must be integral" );
    static_assert ( is_unsigned_v < _Ty >, "_Ty must be unsigned" );
    _Elem _Buff [ 21 ];
    _Elem * const _Buff_end = :: std :: end ( _Buff );
    _Elem * const _RNext = _UIntegral_to_buff ( _Buff_end, _Val );
    return basic_string < _Elem > ( _RNext, _Buff_end );
}
#line 503 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(int _Val) { 
#line 504 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 505 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 507 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(unsigned _Val) { 
#line 508 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _UIntegral_to_string< char> (_Val); 
#line 509 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 511 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(long _Val) { 
#line 512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 513 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 515 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(unsigned long _Val) { 
#line 516 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _UIntegral_to_string< char> (_Val); 
#line 517 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 519 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(__int64 _Val) { 
#line 520 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Integral_to_string< char> (_Val); 
#line 521 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(unsigned __int64 _Val) { 
#line 524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _UIntegral_to_string< char> (_Val); 
#line 525 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 527 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(double _Val) { 
#line 528 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const auto _Len = static_cast< size_t>(::_scprintf("%f", _Val)); 
#line 529 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
string _Str(_Len, '\000'); 
#line 530 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
::sprintf_s(&_Str[0], _Len + (1), "%f", _Val); 
#line 531 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Str; 
#line 532 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 534 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(float _Val) { 
#line 535 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return ::std::to_string(static_cast< double>(_Val)); 
#line 536 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 538 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline string to_string(long double _Val) { 
#line 539 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return ::std::to_string(static_cast< double>(_Val)); 
#line 540 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 542 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(int _Val) { 
#line 543 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 544 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 546 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(unsigned _Val) { 
#line 547 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _UIntegral_to_string< __wchar_t> (_Val); 
#line 548 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 550 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(long _Val) { 
#line 551 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 554 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(unsigned long _Val) { 
#line 555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _UIntegral_to_string< __wchar_t> (_Val); 
#line 556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 558 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(__int64 _Val) { 
#line 559 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Integral_to_string< __wchar_t> (_Val); 
#line 560 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 562 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(unsigned __int64 _Val) { 
#line 563 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _UIntegral_to_string< __wchar_t> (_Val); 
#line 564 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(double _Val) { 
#line 567 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
const auto _Len = static_cast< size_t>(::_scwprintf(L"\x25\x66", _Val)); 
#line 568 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
wstring _Str(_Len, L'\x0'); 
#line 569 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
::swprintf_s(&_Str[0], _Len + (1), L"\x25\x66", _Val); 
#line 570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return _Str; 
#line 571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 573 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(float _Val) { 
#line 574 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return ::std::to_wstring(static_cast< double>(_Val)); 
#line 575 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 577 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
[[nodiscard]] inline wstring to_wstring(long double _Val) { 
#line 578 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
return ::std::to_wstring(static_cast< double>(_Val)); 
#line 579 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
} 
#line 580 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
}
#line 584 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.39.33519\\include\\string"
#pragma warning(pop)
#pragma pack ( pop )
#line 96 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
inline int stringRemoveDelimiter(char delimiter, const char *string) { 
#line 97 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int string_start = 0; 
#line 99 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
while ((string[string_start]) == delimiter) { 
#line 100 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
string_start++; 
#line 101 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 103 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (string_start >= (static_cast< int>(strlen(string) - (1)))) { 
#line 104 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return 0; 
#line 105 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 107 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return string_start; 
#line 108 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} 
#line 110 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
inline int getFileExtension(char *filename, char **extension) { 
#line 111 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int string_length = static_cast< int>(strlen(filename)); 
#line 113 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
while ((filename[string_length--]) != ('.')) { 
#line 114 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (string_length == 0) { break; }  
#line 115 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 117 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (string_length > 0) { string_length += 2; }  
#line 119 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (string_length == 0) { 
#line 120 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
(*extension) = (0); } else { 
#line 122 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
(*extension) = (&(filename[string_length])); }  
#line 124 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return string_length; 
#line 125 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} 
#line 127 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
inline bool checkCmdLineFlag(const int argc, const char **argv, const char *
#line 128 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
string_ref) { 
#line 129 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bool bFound = false; 
#line 131 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (argc >= 1) { 
#line 132 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
for (int i = 1; i < argc; i++) { 
#line 133 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int string_start = stringRemoveDelimiter('-', argv[i]); 
#line 134 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
const char *string_argv = &((argv[i])[string_start]); 
#line 136 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
const char *equal_pos = strchr(string_argv, '='); 
#line 137 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int argv_length = static_cast< int>((equal_pos == (0)) ? strlen(string_argv) : (equal_pos - string_argv)); 
#line 140 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int length = static_cast< int>(strlen(string_ref)); 
#line 142 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if ((length == argv_length) && (!(_strnicmp(string_argv, string_ref, length)))) 
#line 143 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
{ 
#line 144 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bFound = true; 
#line 145 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
continue; 
#line 146 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 147 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}   
#line 148 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 150 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return bFound; 
#line 151 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} 
#line 154 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
template< class T> inline bool 
#line 155 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
getCmdLineArgumentValue(const int argc, const char **argv, const char *
#line 156 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
string_ref, T *value) { 
#line 157 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bool bFound = false; 
#line 159 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (argc >= 1) { 
#line 160 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
for (int i = 1; i < argc; i++) { 
#line 161 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int string_start = stringRemoveDelimiter('-', argv[i]); 
#line 162 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
const char *string_argv = &((argv[i])[string_start]); 
#line 163 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int length = static_cast< int>(strlen(string_ref)); 
#line 165 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (!(_strnicmp(string_argv, string_ref, length))) { 
#line 166 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if ((length + 1) <= (static_cast< int>(strlen(string_argv)))) { 
#line 167 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int auto_inc = ((string_argv[length]) == ('=')) ? 1 : 0; 
#line 168 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
(*value) = ((T)atoi(&(string_argv[length + auto_inc]))); 
#line 169 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 171 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bFound = true; 
#line 172 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
i = argc; 
#line 173 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 174 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 175 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 177 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return bFound; 
#line 178 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} 
#line 180 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
inline int getCmdLineArgumentInt(const int argc, const char **argv, const char *
#line 181 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
string_ref) { 
#line 182 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bool bFound = false; 
#line 183 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int value = (-1); 
#line 185 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (argc >= 1) { 
#line 186 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
for (int i = 1; i < argc; i++) { 
#line 187 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int string_start = stringRemoveDelimiter('-', argv[i]); 
#line 188 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
const char *string_argv = &((argv[i])[string_start]); 
#line 189 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int length = static_cast< int>(strlen(string_ref)); 
#line 191 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (!(_strnicmp(string_argv, string_ref, length))) { 
#line 192 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if ((length + 1) <= (static_cast< int>(strlen(string_argv)))) { 
#line 193 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int auto_inc = ((string_argv[length]) == ('=')) ? 1 : 0; 
#line 194 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
value = atoi(&(string_argv[length + auto_inc])); 
#line 195 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} else { 
#line 196 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
value = 0; 
#line 197 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 199 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bFound = true; 
#line 200 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
continue; 
#line 201 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 202 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}   
#line 203 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 205 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (bFound) { 
#line 206 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return value; 
#line 207 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} else { 
#line 208 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return 0; 
#line 209 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 210 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} 
#line 212 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
inline float getCmdLineArgumentFloat(const int argc, const char **argv, const char *
#line 213 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
string_ref) { 
#line 214 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bool bFound = false; 
#line 215 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
float value = (-1); 
#line 217 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (argc >= 1) { 
#line 218 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
for (int i = 1; i < argc; i++) { 
#line 219 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int string_start = stringRemoveDelimiter('-', argv[i]); 
#line 220 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
const char *string_argv = &((argv[i])[string_start]); 
#line 221 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int length = static_cast< int>(strlen(string_ref)); 
#line 223 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (!(_strnicmp(string_argv, string_ref, length))) { 
#line 224 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if ((length + 1) <= (static_cast< int>(strlen(string_argv)))) { 
#line 225 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int auto_inc = ((string_argv[length]) == ('=')) ? 1 : 0; 
#line 226 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
value = (static_cast< float>(atof(&(string_argv[length + auto_inc])))); 
#line 227 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} else { 
#line 228 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
value = (0.0F); 
#line 229 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 231 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bFound = true; 
#line 232 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
continue; 
#line 233 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 234 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}   
#line 235 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 237 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (bFound) { 
#line 238 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return value; 
#line 239 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} else { 
#line 240 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return 0; 
#line 241 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 242 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} 
#line 244 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
inline bool getCmdLineArgumentString(const int argc, const char **argv, const char *
#line 245 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
string_ref, char **
#line 246 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
string_retval) { 
#line 247 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bool bFound = false; 
#line 249 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (argc >= 1) { 
#line 250 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
for (int i = 1; i < argc; i++) { 
#line 251 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int string_start = stringRemoveDelimiter('-', argv[i]); 
#line 252 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
char *string_argv = const_cast< char *>(&((argv[i])[string_start])); 
#line 253 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
int length = static_cast< int>(strlen(string_ref)); 
#line 255 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (!(_strnicmp(string_argv, string_ref, length))) { 
#line 256 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
(*string_retval) = (&(string_argv[length + 1])); 
#line 257 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
bFound = true; 
#line 258 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
continue; 
#line 259 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 260 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}   
#line 261 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 263 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (!bFound) { 
#line 264 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
(*string_retval) = (0); 
#line 265 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 267 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return bFound; 
#line 268 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} 
#line 278 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
inline char *sdkFindFilePath(const char *filename, const char *
#line 279 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
executable_path) { 
#line 287 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
const char *searchPath[] = {"./", "./data/", "../../../../Samples/<executable_name>/", "../../../Samples/<executable_name>/", "../../Samples/<executable_name>/", "../../../../Samples/<executable_name>/data/", "../../../Samples/<executable_name>/data/", "../../Samples/<executable_name>/data/", "../../../../Samples/0_Introduction/<executable_name>/", "../../../Samples/0_Introduction/<executable_name>/", "../../Samples/0_Introduction/<executable_name>/", "../../../../Samples/1_Utilities/<executable_name>/", "../../../Samples/1_Utilities/<executable_name>/", "../../Samples/1_Utilities/<executable_name>/", "../../../../Samples/2_Concepts_and_Techniques/<executable_name>/", "../../../Samples/2_Concepts_and_Techniques/<executable_name>/", "../../Samples/2_Concepts_and_Techniques/<executable_name>/", "../../../../Samples/3_CUDA_Features/<executable_name>/", "../../../Samples/3_CUDA_Features/<executable_name>/", "../../Samples/3_CUDA_Features/<executable_name>/", "../../../../Samples/4_CUDA_Libraries/<executable_name>/", "../../../Samples/4_CUDA_Libraries/<executable_name>/", "../../Samples/4_CUDA_Libraries/<executable_name>/", "../../../../Samples/5_Domain_Specific/<executable_name>/", "../../../Samples/5_Domain_Specific/<executable_name>/", "../../Samples/5_Domain_Specific/<executable_name>/", "../../../../Samples/6_Performance/<executable_name>/", "../../../Samples/6_Performance/<executable_name>/", "../../Samples/6_Performance/<executable_name>/", "../../../../Samples/0_Introduction/<executable_name>/data/", "../../../Samples/0_Introduction/<executable_name>/data/", "../../Samples/0_Introduction/<executable_name>/data/", "../../../../Samples/1_Utilities/<executable_name>/data/", "../../../Samples/1_Utilities/<executable_name>/data/", "../../Samples/1_Utilities/<executable_name>/data/", "../../../../Samples/2_Concepts_and_Techniques/<executable_name>/data/", "../../../Samples/2_Concepts_and_Techniques/<executable_name>/data/", "../../Samples/2_Concepts_and_Techniques/<executable_name>/data/", "../../../../Samples/3_CUDA_Features/<executable_name>/data/", "../../../Samples/3_CUDA_Features/<executable_name>/data/", "../../Samples/3_CUDA_Features/<executable_name>/data/", "../../../../Samples/4_CUDA_Libraries/<executable_name>/data/", "../../../Samples/4_CUDA_Libraries/<executable_name>/data/", "../../Samples/4_CUDA_Libraries/<executable_name>/data/", "../../../../Samples/5_Domain_Specific/<executable_name>/data/", "../../../Samples/5_Domain_Specific/<executable_name>/data/", "../../Samples/5_Domain_Specific/<executable_name>/data/", "../../../../Samples/6_Performance/<executable_name>/data/", "../../../Samples/6_Performance/<executable_name>/data/", "../../Samples/6_Performance/<executable_name>/data/", "../../../../Common/data/", "../../../Common/data/", "../../Common/data/"}; 
#line 361 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
std::string executable_name; 
#line 363 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (executable_path != (0)) { 
#line 364 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
(executable_name = ((std::basic_string< char> )(executable_path))); 
#line 368 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
size_t delimiter_pos = executable_name.find_last_of('\\'); 
#line 369 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
executable_name.erase(0, delimiter_pos + (1)); 
#line 371 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (executable_name.rfind(".exe") != std::string::npos) { 
#line 373 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
executable_name.resize(executable_name.size() - (4)); 
#line 374 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 381 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 384 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
for (unsigned i = (0); i < (sizeof searchPath / sizeof(char *)); ++i) { 
#line 385 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
std::string path(searchPath[i]); 
#line 386 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
size_t executable_name_pos = path.find("<executable_name>"); 
#line 390 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (executable_name_pos != std::string::npos) { 
#line 391 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (executable_path != (0)) { 
#line 392 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
path.replace(executable_name_pos, strlen("<executable_name>"), executable_name); 
#line 394 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} else { 
#line 396 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
continue; 
#line 397 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 398 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 405 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
path.append(filename); 
#line 406 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
FILE *fp; 
#line 407 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
fopen_s(&fp, path.c_str(), "rb"); 
#line 409 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (fp != (0)) { 
#line 410 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
fclose(fp); 
#line 413 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
char *file_path = reinterpret_cast< char *>(malloc(path.length() + (1))); 
#line 414 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
strcpy_s(file_path, path.length() + (1), path.c_str()); 
#line 415 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return file_path; 
#line 416 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 418 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
if (fp) { 
#line 419 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
fclose(fp); 
#line 420 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}  
#line 421 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
}   
#line 424 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
printf("\nerror: sdkFindFilePath: file <%s> not found!\n", filename); 
#line 425 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
return 0; 
#line 426 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_string.h"
} 
#line 53 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
static const char *_cudaGetErrorEnum(cudaError_t error) { 
#line 54 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return cudaGetErrorName(error); 
#line 55 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 582 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
template< class T> void 
#line 583 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(T result, const char *const func, const char *const file, const int 
#line 584 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
line) { 
#line 585 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (result) { 
#line 586 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "CUDA error at %s:%d code=%d(%s) \"%s\" \n", file, line, static_cast< unsigned>(result), _cudaGetErrorEnum(result), func); 
#line 588 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 589 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 590 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 600 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline void __getLastCudaError(const char *errorMessage, const char *file, const int 
#line 601 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
line) { 
#line 602 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
cudaError_t err = cudaGetLastError(); 
#line 604 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if ((cudaSuccess) != err) { 
#line 605 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "%s(%i) : getLastCudaError() CUDA error : %s : (%d) %s.\n", file, line, errorMessage, static_cast< int>(err), cudaGetErrorString(err)); 
#line 610 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 611 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 612 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 618 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline void __printLastCudaError(const char *errorMessage, const char *file, const int 
#line 619 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
line) { 
#line 620 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
cudaError_t err = cudaGetLastError(); 
#line 622 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if ((cudaSuccess) != err) { 
#line 623 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "%s(%i) : getLastCudaError() CUDA error : %s : (%d) %s.\n", file, line, errorMessage, static_cast< int>(err), cudaGetErrorString(err)); 
#line 628 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 629 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 637 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline int ftoi(float value) { 
#line 638 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return ((value >= (0)) ? static_cast< int>(value + (0.5)) : (static_cast< int>(value - (0.5)))); 
#line 640 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 643 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline int _ConvertSMVer2Cores(int major, int minor) { 
#line 650 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
typedef 
#line 646 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
struct { 
#line 647 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int SM; 
#line 649 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int Cores; 
#line 650 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} sSMtoCores; 
#line 652 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
sSMtoCores nGpuArchCoresPerSM[] = {{48, 192}, {50, 192}, {53, 192}, {55, 192}, {80, 128}, {82, 128}, {83, 128}, {96, 64}, {97, 128}, {98, 128}, {112, 64}, {114, 64}, {117, 64}, {128, 64}, {134, 128}, {135, 128}, {137, 128}, {144, 128}, {(-1), (-1)}}; 
#line 673 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int index = 0; 
#line 675 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
while (((nGpuArchCoresPerSM[index]).SM) != (-1)) { 
#line 676 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (((nGpuArchCoresPerSM[index]).SM) == ((major << 4) + minor)) { 
#line 677 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return (nGpuArchCoresPerSM[index]).Cores; 
#line 678 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 680 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
index++; 
#line 681 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 685 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("MapSMtoCores for SM %d.%d is undefined.  Default to use %d Cores/SM\n", major, minor, (nGpuArchCoresPerSM[index - 1]).Cores); 
#line 689 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return (nGpuArchCoresPerSM[index - 1]).Cores; 
#line 690 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 692 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline const char *_ConvertSMVer2ArchName(int major, int minor) { 
#line 699 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
typedef 
#line 695 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
struct { 
#line 696 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int SM; 
#line 698 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
const char *name; 
#line 699 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} sSMtoArchName; 
#line 701 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
sSMtoArchName nGpuArchNameSM[] = {{48, "Kepler"}, {50, "Kepler"}, {53, "Kepler"}, {55, "Kepler"}, {80, "Maxwell"}, {82, "Maxwell"}, {83, "Maxwell"}, {96, "Pascal"}, {97, "Pascal"}, {98, "Pascal"}, {112, "Volta"}, {114, "Xavier"}, {117, "Turing"}, {128, "Ampere"}, {134, "Ampere"}, {135, "Ampere"}, {137, "Ada"}, {144, "Hopper"}, {(-1), "Graphics Device"}}; 
#line 722 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int index = 0; 
#line 724 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
while (((nGpuArchNameSM[index]).SM) != (-1)) { 
#line 725 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (((nGpuArchNameSM[index]).SM) == ((major << 4) + minor)) { 
#line 726 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return (nGpuArchNameSM[index]).name; 
#line 727 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 729 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
index++; 
#line 730 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 734 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("MapSMtoArchName for SM %d.%d is undefined.  Default to use %s\n", major, minor, (nGpuArchNameSM[index - 1]).name); 
#line 738 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return (nGpuArchNameSM[index - 1]).name; 
#line 739 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 744 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline int gpuDeviceInit(int devID) { 
#line 745 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int device_count; 
#line 746 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaGetDeviceCount(&device_count), "cudaGetDeviceCount(&device_count)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 746); 
#line 748 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (device_count == 0) { 
#line 749 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "gpuDeviceInit() CUDA error: no devices supporting CUDA.\n"); 
#line 752 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 753 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 755 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (devID < 0) { 
#line 756 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
devID = 0; 
#line 757 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 759 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (devID > (device_count - 1)) { 
#line 760 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "\n"); 
#line 761 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), ">> %d CUDA capable GPU device(s) detected. <<\n", device_count); 
#line 763 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), ">> gpuDeviceInit (-device=%d) is not a valid GPU device. <<\n", devID); 
#line 767 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "\n"); 
#line 768 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return -devID; 
#line 769 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 771 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int computeMode = (-1), major = 0, minor = 0; 
#line 772 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&computeMode, cudaDevAttrComputeMode, devID), "cudaDeviceGetAttribute(&computeMode, cudaDevAttrComputeMode, devID)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 772); 
#line 773 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, devID), "cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, devID)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 773); 
#line 774 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, devID), "cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, devID)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 774); 
#line 775 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (computeMode == (cudaComputeModeProhibited)) { 
#line 776 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "Error: device is running in <Compute Mode Prohibited>, no threads can use cudaSetDevice().\n"); 
#line 779 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return -1; 
#line 780 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 782 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (major < 1) { 
#line 783 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "gpuDeviceInit(): GPU device does not support CUDA.\n"); 
#line 784 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 785 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 787 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaSetDevice(devID), "cudaSetDevice(devID)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 787); 
#line 788 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("gpuDeviceInit() CUDA Device [%d]: \"%s\n", devID, _ConvertSMVer2ArchName(major, minor)); 
#line 790 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return devID; 
#line 791 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 794 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline int gpuGetMaxGflopsDeviceId() { 
#line 795 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int current_device = 0, sm_per_multiproc = 0; 
#line 796 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int max_perf_device = 0; 
#line 797 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int device_count = 0; 
#line 798 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int devices_prohibited = 0; 
#line 800 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
uint64_t max_compute_perf = (0); 
#line 801 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaGetDeviceCount(&device_count), "cudaGetDeviceCount(&device_count)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 801); 
#line 803 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (device_count == 0) { 
#line 804 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "gpuGetMaxGflopsDeviceId() CUDA error: no devices supporting CUDA.\n"); 
#line 807 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 808 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 811 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
current_device = 0; 
#line 813 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
while (current_device < device_count) { 
#line 814 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int computeMode = (-1), major = 0, minor = 0; 
#line 815 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&computeMode, cudaDevAttrComputeMode, current_device), "cudaDeviceGetAttribute(&computeMode, cudaDevAttrComputeMode, current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 815); 
#line 816 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, current_device), "cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 816); 
#line 817 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, current_device), "cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 817); 
#line 821 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (computeMode != (cudaComputeModeProhibited)) { 
#line 822 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if ((major == 9999) && (minor == 9999)) { 
#line 823 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
sm_per_multiproc = 1; 
#line 824 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} else { 
#line 825 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
sm_per_multiproc = _ConvertSMVer2Cores(major, minor); 
#line 827 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 828 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int multiProcessorCount = 0, clockRate = 0; 
#line 829 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, current_device), "cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 829); 
#line 830 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
cudaError_t result = cudaDeviceGetAttribute(&clockRate, cudaDevAttrClockRate, current_device); 
#line 831 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (result != (cudaSuccess)) { 
#line 834 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (result == (cudaErrorInvalidValue)) { 
#line 835 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
clockRate = 1; 
#line 836 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} else 
#line 837 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
{ 
#line 838 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "CUDA error at %s:%d code=%d(%s) \n", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 838, static_cast< unsigned>(result), _cudaGetErrorEnum(result)); 
#line 840 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 841 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 842 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 843 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
uint64_t compute_perf = (((uint64_t)multiProcessorCount) * sm_per_multiproc) * clockRate; 
#line 845 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (compute_perf > max_compute_perf) { 
#line 846 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
max_compute_perf = compute_perf; 
#line 847 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
max_perf_device = current_device; 
#line 848 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 849 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} else { 
#line 850 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
devices_prohibited++; 
#line 851 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 853 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
++current_device; 
#line 854 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 856 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (devices_prohibited == device_count) { 
#line 857 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "gpuGetMaxGflopsDeviceId() CUDA error: all devices have compute mode prohibited.\n"); 
#line 860 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 861 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 863 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return max_perf_device; 
#line 864 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 867 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline int findCudaDevice(int argc, const char **argv) { 
#line 868 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int devID = 0; 
#line 871 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (checkCmdLineFlag(argc, argv, "device")) { 
#line 872 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
devID = getCmdLineArgumentInt(argc, argv, "device="); 
#line 874 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (devID < 0) { 
#line 875 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("Invalid command line parameter\n "); 
#line 876 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 877 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} else { 
#line 878 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
devID = gpuDeviceInit(devID); 
#line 880 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (devID < 0) { 
#line 881 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("exiting...\n"); 
#line 882 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 883 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 884 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 885 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} else { 
#line 887 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
devID = gpuGetMaxGflopsDeviceId(); 
#line 888 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaSetDevice(devID), "cudaSetDevice(devID)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 888); 
#line 889 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int major = 0, minor = 0; 
#line 890 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, devID), "cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, devID)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 890); 
#line 891 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, devID), "cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, devID)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 891); 
#line 892 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("GPU Device %d: \"%s\" with compute capability %d.%d\n\n", devID, _ConvertSMVer2ArchName(major, minor), major, minor); 
#line 895 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 897 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return devID; 
#line 898 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 900 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline int findIntegratedGPU() { 
#line 901 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int current_device = 0; 
#line 902 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int device_count = 0; 
#line 903 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int devices_prohibited = 0; 
#line 905 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaGetDeviceCount(&device_count), "cudaGetDeviceCount(&device_count)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 905); 
#line 907 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (device_count == 0) { 
#line 908 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "CUDA error: no devices supporting CUDA.\n"); 
#line 909 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 910 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 913 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
while (current_device < device_count) { 
#line 914 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int computeMode = (-1), integrated = (-1); 
#line 915 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&computeMode, cudaDevAttrComputeMode, current_device), "cudaDeviceGetAttribute(&computeMode, cudaDevAttrComputeMode, current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 915); 
#line 916 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&integrated, cudaDevAttrIntegrated, current_device), "cudaDeviceGetAttribute(&integrated, cudaDevAttrIntegrated, current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 916); 
#line 919 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (integrated && (computeMode != (cudaComputeModeProhibited))) { 
#line 920 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaSetDevice(current_device), "cudaSetDevice(current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 920); 
#line 922 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int major = 0, minor = 0; 
#line 923 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, current_device), "cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 923); 
#line 924 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, current_device), "cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, current_device)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 924); 
#line 925 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("GPU Device %d: \"%s\" with compute capability %d.%d\n\n", current_device, _ConvertSMVer2ArchName(major, minor), major, minor); 
#line 928 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return current_device; 
#line 929 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} else { 
#line 930 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
devices_prohibited++; 
#line 931 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 933 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
current_device++; 
#line 934 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 936 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if (devices_prohibited == device_count) { 
#line 937 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
fprintf(__acrt_iob_func(2), "CUDA error: No GLES-CUDA Interop capable GPU found.\n"); 
#line 940 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
exit(1); 
#line 941 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 943 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return -1; 
#line 944 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 947 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
inline bool checkCudaCapabilities(int major_version, int minor_version) { 
#line 948 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int dev; 
#line 949 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
int major = 0, minor = 0; 
#line 951 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaGetDevice(&dev), "cudaGetDevice(&dev)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 951); 
#line 952 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, dev), "cudaDeviceGetAttribute(&major, cudaDevAttrComputeCapabilityMajor, dev)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 952); 
#line 953 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
check(cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, dev), "cudaDeviceGetAttribute(&minor, cudaDevAttrComputeCapabilityMinor, dev)", "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h", 953); 
#line 955 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
if ((major > major_version) || ((major == major_version) && (minor >= minor_version))) 
#line 957 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
{ 
#line 958 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("  Device %d: <%16s >, Compute SM %d.%d detected\n", dev, _ConvertSMVer2ArchName(major, minor), major, minor); 
#line 960 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return true; 
#line 961 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} else { 
#line 962 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
printf("  No GPU device was found that can support CUDA compute capability %d.%d.\n", major_version, minor_version); 
#line 966 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
return false; 
#line 967 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
}  
#line 968 "D:/Programming/CUDA/cuda-samples-12.4/Common\\helper_cuda.h"
} 
#line 6 "main.cu"
void vectorAdd(const float * A, const float * B, float * C, int numElements); 
#line 12 "main.cu"
int main() { 
#line 14 "main.cu"
cudaError_t err = cudaSuccess; 
#line 17 "main.cu"
int numElements = 50000; 
#line 18 "main.cu"
size_t size = numElements * sizeof(float); 
#line 19 "main.cu"
printf("[Vector addition of %d elements]\n", numElements); 
#line 22 "main.cu"
float *h_A = (float *)malloc(size); 
#line 25 "main.cu"
float *h_B = (float *)malloc(size); 
#line 28 "main.cu"
float *h_C = (float *)malloc(size); 
#line 31 "main.cu"
if (((h_A == (0)) || (h_B == (0))) || (h_C == (0))) { 
#line 32 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to allocate host vectors!\n"); 
#line 33 "main.cu"
exit(1); 
#line 34 "main.cu"
}  
#line 37 "main.cu"
for (int i = 0; i < numElements; ++i) { 
#line 38 "main.cu"
(h_A[i]) = ((rand()) / ((float)32767)); 
#line 39 "main.cu"
(h_B[i]) = ((rand()) / ((float)32767)); 
#line 40 "main.cu"
}  
#line 43 "main.cu"
float *d_A = (0); 
#line 44 "main.cu"
err = cudaMalloc((void **)(&d_A), size); 
#line 46 "main.cu"
if (err != (cudaSuccess)) { 
#line 47 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err)); 
#line 49 "main.cu"
exit(1); 
#line 50 "main.cu"
}  
#line 53 "main.cu"
float *d_B = (0); 
#line 54 "main.cu"
err = cudaMalloc((void **)(&d_B), size); 
#line 56 "main.cu"
if (err != (cudaSuccess)) { 
#line 57 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to allocate device vector B (error code %s)!\n", cudaGetErrorString(err)); 
#line 59 "main.cu"
exit(1); 
#line 60 "main.cu"
}  
#line 63 "main.cu"
float *d_C = (0); 
#line 64 "main.cu"
err = cudaMalloc((void **)(&d_C), size); 
#line 66 "main.cu"
if (err != (cudaSuccess)) { 
#line 67 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to allocate device vector C (error code %s)!\n", cudaGetErrorString(err)); 
#line 69 "main.cu"
exit(1); 
#line 70 "main.cu"
}  
#line 75 "main.cu"
printf("Copy input data from the host memory to the CUDA device\n"); 
#line 76 "main.cu"
err = cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice); 
#line 78 "main.cu"
if (err != (cudaSuccess)) { 
#line 79 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to copy vector A from host to device (error code %s)!\n", cudaGetErrorString(err)); 
#line 82 "main.cu"
exit(1); 
#line 83 "main.cu"
}  
#line 85 "main.cu"
err = cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice); 
#line 87 "main.cu"
if (err != (cudaSuccess)) { 
#line 88 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to copy vector B from host to device (error code %s)!\n", cudaGetErrorString(err)); 
#line 91 "main.cu"
exit(1); 
#line 92 "main.cu"
}  
#line 95 "main.cu"
int threadsPerBlock = 256; 
#line 96 "main.cu"
int blocksPerGrid = ((numElements + threadsPerBlock) - 1) / threadsPerBlock; 
#line 97 "main.cu"
printf("CUDA kernel launch with %d blocks of %d threads\n", blocksPerGrid, threadsPerBlock); 
#line 100 "main.cu"
(__cudaPushCallConfiguration(blocksPerGrid, threadsPerBlock)) ? (void)0 : vectorAdd(d_A, d_B, d_C, numElements); 
#line 101 "main.cu"
err = cudaGetLastError(); 
#line 103 "main.cu"
if (err != (cudaSuccess)) { 
#line 104 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to launch vectorAdd kernel (error code %s)!\n", cudaGetErrorString(err)); 
#line 106 "main.cu"
exit(1); 
#line 107 "main.cu"
}  
#line 111 "main.cu"
printf("Copy output data from the CUDA device to the host memory\n"); 
#line 112 "main.cu"
err = cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost); 
#line 114 "main.cu"
if (err != (cudaSuccess)) { 
#line 115 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to copy vector C from device to host (error code %s)!\n", cudaGetErrorString(err)); 
#line 118 "main.cu"
exit(1); 
#line 119 "main.cu"
}  
#line 122 "main.cu"
for (int i = 0; i < numElements; ++i) { 
#line 123 "main.cu"
if ((fabs(((h_A[i]) + (h_B[i])) - (h_C[i]))) > (1.000000000000000082e-05)) { 
#line 124 "main.cu"
fprintf(__acrt_iob_func(2), "Result verification failed at element %d!\n", i); 
#line 125 "main.cu"
exit(1); 
#line 126 "main.cu"
}  
#line 127 "main.cu"
}  
#line 129 "main.cu"
printf("Test PASSED\n"); 
#line 132 "main.cu"
err = cudaFree(d_A); 
#line 134 "main.cu"
if (err != (cudaSuccess)) { 
#line 135 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to free device vector A (error code %s)!\n", cudaGetErrorString(err)); 
#line 137 "main.cu"
exit(1); 
#line 138 "main.cu"
}  
#line 140 "main.cu"
err = cudaFree(d_B); 
#line 142 "main.cu"
if (err != (cudaSuccess)) { 
#line 143 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to free device vector B (error code %s)!\n", cudaGetErrorString(err)); 
#line 145 "main.cu"
exit(1); 
#line 146 "main.cu"
}  
#line 148 "main.cu"
err = cudaFree(d_C); 
#line 150 "main.cu"
if (err != (cudaSuccess)) { 
#line 151 "main.cu"
fprintf(__acrt_iob_func(2), "Failed to free device vector C (error code %s)!\n", cudaGetErrorString(err)); 
#line 153 "main.cu"
exit(1); 
#line 154 "main.cu"
}  
#line 157 "main.cu"
free(h_A); 
#line 158 "main.cu"
free(h_B); 
#line 159 "main.cu"
free(h_C); 
#line 161 "main.cu"
printf("Done\n"); 
#line 162 "main.cu"
return 0; 
#line 163 "main.cu"
} 
#line 1 "tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"


#line 4 "tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"
#pragma pack()
#line 1 "tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"
#line 1 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"



#line 5 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"
#line 1 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"






















#line 24 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"





































#line 62 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

template <typename T>
static inline T *__cudaAddressOf(T &val) 
{
    return (T *)((void *)(&(const_cast<char &>(reinterpret_cast<const volatile char &>(val)))));
}





        












extern "C" cudaError_t __stdcall __cudaPopCallConfiguration(
  dim3         *gridDim,
  dim3         *blockDim,
  size_t       *sharedMem,
  void         *stream
);




        


          


        


#line 106 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

#line 108 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

































#line 142 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"




#line 147 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"


#line 150 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

static void ____nv_dummy_param_ref(void *param) { volatile static void **__ref; __ref = (volatile void **)param; }




extern "C" {
void __cudaRegisterLinkedBinary__NV_MODULE_ID ( void (*)(void **), void *, void *, void (*)(void *));
}




extern "C" {

#pragma data_seg("__nv_module_id")
  static const __declspec(allocate("__nv_module_id")) unsigned char __module_id_str[] = "__NV_MODULE_ID";
#pragma data_seg()




#line 173 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"









}

extern "C" {
extern void** __stdcall __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __stdcall __cudaRegisterFatBinaryEnd(
  void **fatCubinHandle
);

extern void __stdcall __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __stdcall __cudaRegisterVar(
        void **fatCubinHandle,
        char  *hostVar,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        size_t size,
        int    constant,
        int    global
);

extern void __stdcall __cudaRegisterManagedVar(
        void **fatCubinHandle,
        void **hostVarPtrAddress,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        size_t size,
        int    constant,
        int    global
);

extern char __stdcall __cudaInitModule(
        void **fatCubinHandle
);

extern void __stdcall __cudaRegisterTexture(
        void                    **fatCubinHandle,
  const struct textureReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       norm,      
        int                        ext        
);

extern void __stdcall __cudaRegisterSurface(
        void                    **fatCubinHandle,
  const struct surfaceReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       ext        
);

extern void __stdcall __cudaRegisterFunction(
        void   **fatCubinHandle,
  const char    *hostFun,
        char    *deviceFun,
  const char    *deviceName,
        int      thread_limit,
        uint3   *tid,
        uint3   *bid,
        dim3    *bDim,
        dim3    *gDim,
        int     *wSize
);




#line 259 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"


#line 262 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"




#line 267 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"
extern int __cdecl atexit(void(__cdecl *)(void));
#line 269 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

}

static void **__cudaFatCubinHandle;

static void __cdecl __cudaUnregisterBinaryUtil(void)
{
  ____nv_dummy_param_ref((void *)&__cudaFatCubinHandle);
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

static char __nv_init_managed_rt_with_module(void **handle)
{
  return __cudaInitModule(handle);
}

#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\common_functions.h"

























































#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\common_functions.h"








































































































































































































































#line 292 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\common_functions.h"









#line 302 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\common_functions.h"

#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"

























































#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"








#line 68 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 11918 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"











#line 1 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"






















#line 24 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"








#line 33 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"









#line 43 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"







#line 51 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"

#line 53 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"




#line 58 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"
#line 11930 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"


#pragma warning (push)
#pragma warning (disable : 4211)

#line 11936 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"

static inline double rsqrt(double a);

static inline double rcbrt(double a);

static inline double sinpi(double a);

static inline double cospi(double a);

static inline void sincospi(double a, double *sptr, double *cptr);

static inline double erfinv(double a);

static inline double erfcinv(double a);

static inline double normcdfinv(double a);

static inline double normcdf(double a);

static inline double erfcx(double a);

static inline float rsqrtf(float a);

static inline float rcbrtf(float a);

static inline float sinpif(float a);

static inline float cospif(float a);

static inline void sincospif(float a, float *sptr, float *cptr);

static inline float erfinvf(float a);

static inline float erfcinvf(float a);

static inline float normcdfinvf(float a);

static inline float normcdff(float a);

static inline float erfcxf(float a);

static inline int min(int a, int b);

static inline unsigned int umin(unsigned int a, unsigned int b);

static inline long long int llmin(long long int a, long long int b);

static inline unsigned long long int ullmin(unsigned long long int a, unsigned long long int b);

static inline int max(int a, int b);

static inline unsigned int umax(unsigned int a, unsigned int b);

static inline long long int llmax(long long int a, long long int b);

static inline unsigned long long int ullmax(unsigned long long int a, unsigned long long int b);



static inline int __isnan(double a);

#line 11998 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"



static inline void sincos(double a, double *sptr, double *cptr);

#line 12004 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"



static inline double exp10(double a);

static inline float exp10f(float a);

static inline void sincosf(float a, float *sptr, float *cptr);

static inline int __isinf(double a);

#line 12016 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"





#line 12022 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"



static inline int __signbit(double a);

static inline int __finite(double a);

static inline int __signbitl(long double a);

static inline int __signbitf(float a);

static inline int __finitel(long double a);

static inline int __finitef(float a);

static inline int __isinfl(long double a);

static inline int __isinff(float a);

static inline int __isnanl(long double a);

static inline int __isnanf(float a);

#line 12046 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"













































































































































#line 12188 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"


#pragma warning (pop)
#line 12192 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"

#line 12194 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"





#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"

























































#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1195 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"


#line 1 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\host_defines.h"

























































#line 59 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\host_defines.h"
























































































































































































































#line 276 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\host_defines.h"




#line 281 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\host_defines.h"
#line 1198 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#line 1 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\math_constants.h"























































































































































#line 153 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\math_constants.h"
#line 1199 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"










#line 1 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"






















#line 24 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"




























#line 53 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"




#line 58 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/func_macro.h"
#line 1210 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"


#pragma warning (push)
#pragma warning (disable : 4211)

#line 1216 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"



static inline int __isnan(const double a)
{
  unsigned long long int l;
  memcpy(&l, &a, sizeof(double));
  return (l << 1ULL) > 0xffe0000000000000ULL;
}

#line 1227 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"









static inline double exp10(const double a)
{
  return pow(10.0, a);
}

static inline float exp10f(const float a)
{
    return static_cast<float>(exp10(static_cast<double>(a)));
}

static inline void sincos(const double a, double *sptr, double *cptr)
{
  *sptr = sin(a);
  *cptr = cos(a);
}

static inline void sincosf(const float a, float *sptr, float *cptr)
{
  double s, c;

  sincos(static_cast<double>(a), &s, &c);
  *sptr = static_cast<float>(s);
  *cptr = static_cast<float>(c);
}

static inline int __isinf(const double a)
{
  unsigned long long int l;
  memcpy(&l, &a, sizeof(double));
  return (l << 1ULL) == 0xffe0000000000000ULL;
}

#line 1269 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"








#line 1278 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"

#line 1280 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"









static inline int __signbit(double a)
{
  signed long long int l;
  memcpy(&l, &a, sizeof(double));
  return l < 0LL;
}











#line 1307 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"

static inline int __finite(double a)
{
  unsigned long long int l;
  memcpy(&l, &a, sizeof(double));
  return (l << 1ULL) < 0xffe0000000000000ULL;
}





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2664 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"








static inline int __signbitl(const long double a)
{
  return __signbit(static_cast<double>(a));
}

static inline int __signbitf(const float a)
{
  return __signbit(static_cast<double>(a));
}

static inline int __finitel(const long double a)
{
  return __finite(static_cast<double>(a));
}

static inline int __finitef(const float a)
{
  return __finite(static_cast<double>(a));
}

static inline int __isinfl(const long double a)
{
  return __isinf(static_cast<double>(a));
}

static inline int __isinff(const float a)
{
  return __isinf(static_cast<double>(a));
}

static inline int __isnanl(const long double a)
{
  return __isnan(static_cast<double>(a));
}

static inline int __isnanf(const float a)
{
  return __isnan(static_cast<double>(a));
}























































































































































#line 2863 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"


static inline float j0f(const float a)
{
  return static_cast<float>(_j0(static_cast<double>(a)));
}

static inline float j1f(const float a)
{
  return static_cast<float>(_j1(static_cast<double>(a)));
}

static inline float jnf(const int n, const float a)
{
  return static_cast<float>(_jn(n, static_cast<double>(a)));
}

static inline float y0f(const float a)
{
  return static_cast<float>(_y0(static_cast<double>(a)));
}

static inline float y1f(const float a)
{
  return static_cast<float>(_y1(static_cast<double>(a)));
}

static inline float ynf(const int n, const float a)
{
  return static_cast<float>(_yn(n, static_cast<double>(a)));
}
#line 2895 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
















































#line 2944 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"

#line 2946 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"







static inline double rsqrt(const double a)
{
  return 1.0 / sqrt(a);
}

static inline double rcbrt(const double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  } 
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));                
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;


#line 2974 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
  if (__signbit(a))
#line 2976 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
  {
    t = -t;
  }
  return t;
}

static inline double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  } 
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  double twoa = a + a;
  double rtwoa = round(twoa);
  long long int l = (long long int)rtwoa;
  n = (int)l;
  a -= rtwoa * 0.5;
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

static inline double cospi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (__isinf(a)) {
    return cos (a);
  } 
  if (fabs(a) > 9.0071992547409920e+015) {
    a = 0.0;
  }
  double twoa = a + a;
  double rtwoa = round(twoa);
  long long int l = (long long int)rtwoa;
  n = (int)l;
  a -= rtwoa * 0.5;
  a = a * 3.1415926535897931e+0;
  n++;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  if (a == 0.0) {
    a = fabs(a);
  }
  return a;
}

static inline void sincospi(const double a, double *sptr, double *cptr)
{
  *sptr = sinpi(a);
  *cptr = cospi(a);
}

static inline double erfinv(const double a)
{
  double p, q, t, fa;
  unsigned long long int l;

  fa = fabs(a);
  if (fa >= 1.0) {
    l = 0xfff8000000000000ULL;
    memcpy(&t, &l, sizeof(double)); 
    if (fa == 1.0) {
      t = a * exp(1000.0);          
    }
  } else if (fa >= 0.9375) {
    



    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {
    



    t = a * a - .87890625;
    p =         .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q =     t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {
    



    t = a * a - .5625;
    p =       - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q =     t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

static inline double erfcinv(const double a)
{
  double t;
  unsigned long long int l;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    l = 0xfff8000000000000ULL;
    memcpy(&t, &l, sizeof(double));   
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);  
    }
  } 
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q =     t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

static inline double normcdfinv(const double a)
{
  return -1.4142135623730951 * erfcinv(a + a);
}

static inline double normcdf(double a)
{
  double ah, al, t1, t2, u1, u2, v1, v2, z;
  if (fabs (a) > 38.5) a = copysign (38.5, a);
  ah = a * 134217729.0;
  u1 = (a - ah) + ah;
  u2 = a - u1;
  v1 = -7.0710678398609161e-01;
  v2 =  2.7995440410322203e-09;
  t1 = a * -7.0710678118654757e-1;
  t2 = (((u1 * v1 - t1) + u1 * v2) + u2 * v1) + u2 * v2;
  t2 = (a * -(-4.8336466567264567e-17)) + t2;
  ah = t1 + t2;
  z = erfc (ah);
  if (a < -1.0) {
    al = (t1 - ah) + t2;
    t1 = -2.0 * ah * z;
    z = t1 * al + z;
  }
  return 0.5 * z;
}

static inline double erfcx(const double a)
{
  double x, t1, t2, t3;

  if (__isnan(a)) {
    return a + a;
  }
  x = fabs(a); 
  if (x < 32.0) {
    









    


     
    t1 = x - 4.0; 
    t2 = x + 4.0; 
    t2 = t1 / t2;
       
    t1 =         - 3.5602694826817400E-010; 
    t1 = t1 * t2 - 9.7239122591447274E-009; 
    t1 = t1 * t2 - 8.9350224851649119E-009; 
    t1 = t1 * t2 + 1.0404430921625484E-007; 
    t1 = t1 * t2 + 5.8806698585341259E-008; 
    t1 = t1 * t2 - 8.2147414929116908E-007; 
    t1 = t1 * t2 + 3.0956409853306241E-007; 
    t1 = t1 * t2 + 5.7087871844325649E-006; 
    t1 = t1 * t2 - 1.1231787437600085E-005; 
    t1 = t1 * t2 - 2.4399558857200190E-005; 
    t1 = t1 * t2 + 1.5062557169571788E-004; 
    t1 = t1 * t2 - 1.9925637684786154E-004; 
    t1 = t1 * t2 - 7.5777429182785833E-004; 
    t1 = t1 * t2 + 5.0319698792599572E-003; 
    t1 = t1 * t2 - 1.6197733895953217E-002; 
    t1 = t1 * t2 + 3.7167515553018733E-002; 
    t1 = t1 * t2 - 6.6330365827532434E-002; 
    t1 = t1 * t2 + 9.3732834997115544E-002; 
    t1 = t1 * t2 - 1.0103906603555676E-001; 
    t1 = t1 * t2 + 6.8097054254735140E-002; 
    t1 = t1 * t2 + 1.5379652102605428E-002; 
    t1 = t1 * t2 - 1.3962111684056291E-001; 
    t1 = t1 * t2 + 1.2329951186255526E+000; 
    


    t2 = 2.0 * x + 1.0; 
    t1 = t1 / t2;
  } else {
    
    t2 = 1.0 / x;
    t3 = t2 * t2;
    t1 =         -29.53125;
    t1 = t1 * t3 + 6.5625;
    t1 = t1 * t3 - 1.875;
    t1 = t1 * t3 + 0.75;
    t1 = t1 * t3 - 0.5;
    t1 = t1 * t3 + 1.0;
    t2 = t2 * 5.6418958354775628e-001;
    t1 = t1 * t2;
  }
  if (a < 0.0) {
    


    t2 = (static_cast<int>(x * 16.0)) * 0.0625;
    t3 = (x - t2) * (x + t2);
    t3 = exp(t2 * t2) * exp(t3);
    t3 = t3 + t3;
    t1 = t3 - t1;
  }
  return t1;
}

static inline float rsqrtf(const float a)
{
  return static_cast<float>(rsqrt(static_cast<double>(a)));
}

static inline float rcbrtf(const float a)
{
  return static_cast<float>(rcbrt(static_cast<double>(a)));
}

static inline float sinpif(const float a)
{
  return static_cast<float>(sinpi(static_cast<double>(a)));
}

static inline float cospif(const float a)
{
  return static_cast<float>(cospi(static_cast<double>(a)));
}

static inline void sincospif(const float a, float *sptr, float *cptr)
{
  double s, c;

  sincospi(static_cast<double>(a), &s, &c);
  *sptr = static_cast<float>(s);
  *cptr = static_cast<float>(c);
}

static inline float erfinvf(const float a)
{
  return static_cast<float>(erfinv(static_cast<double>(a)));
}

static inline float erfcinvf(const float a)
{
  return static_cast<float>(erfcinv(static_cast<double>(a)));
}

static inline float normcdfinvf(const float a)
{
  return static_cast<float>(normcdfinv(static_cast<double>(a)));
}

static inline float normcdff(const float a)
{
  return static_cast<float>(normcdf(static_cast<double>(a)));
}

static inline float erfcxf(const float a)
{
  return static_cast<float>(erfcx(static_cast<double>(a)));
}


#pragma warning (pop)
#line 3390 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"

#line 3392 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"

#line 3394 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"




#line 3399 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.hpp"
#line 12200 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"

#line 12202 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"

#line 12204 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"




#line 12209 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\math_functions.h"
#line 304 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\common_functions.h"

#line 306 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\common_functions.h"




#line 311 "D:\\Programming\\CUDA\\v12.4\\include\\crt\\common_functions.h"
#line 286 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

#pragma pack()



#pragma warning(disable: 4099)





#line 298 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

#line 300 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"

#line 302 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"




#line 307 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\crt/host_runtime.h"
#line 6 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"
#line 1 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-7_main.fatbin.c"

#line 1 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\fatbinary_section.h"


















extern "C" {
#line 21 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\fatbinary_section.h"








typedef struct {
  int magic;
  int version;
  const unsigned long long* data;
  void *filename_or_fatbins;  

} __fatBinC_Wrapper_t;

















#line 54 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\fatbinary_section.h"




}
#line 60 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\fatbinary_section.h"

#line 62 "D:\\Programming\\CUDA\\v12.4\\bin/../include\\fatbinary_section.h"
#line 3 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-7_main.fatbin.c"
#line 4 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-7_main.fatbin.c"



extern "C" {
#line 9 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-7_main.fatbin.c"

#pragma const_seg(".nv_fatbin")
static const __declspec(allocate(".nv_fatbin")) unsigned long long fatbinData[]= {0x00100001ba55ed50ull,0x0000000000000450ull,0x0000004801010002ull,0x0000000000000368ull,
0x0000000000000000ull,0x0000003400010007ull,0x0000000000000000ull,0x0000000000000041ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,0x33010102464c457full,
0x0000000000000007ull,0x0000007c00be0002ull,0x0000000000000000ull,0x00000000000002f8ull,
0x0000000000000178ull,0x0038004000340534ull,0x0001000600400002ull,0x7472747368732e00ull,
0x747274732e006261ull,0x746d79732e006261ull,0x746d79732e006261ull,0x78646e68735f6261ull,
0x666e692e766e2e00ull,0x61632e766e2e006full,0x0068706172676c6cull,0x746f72702e766e2eull,
0x6e2e00657079746full,0x63612e6c65722e76ull,0x732e00006e6f6974ull,0x0062617472747368ull,
0x006261747274732eull,0x006261746d79732eull,0x5f6261746d79732eull,0x6e2e0078646e6873ull,
0x2e006f666e692e76ull,0x676c6c61632e766eull,0x766e2e0068706172ull,0x79746f746f72702eull,
0x722e766e2e006570ull,0x6f697463612e6c65ull,0x000000000000006eull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0004000300000032ull,0x0000000000000000ull,
0x0000000000000000ull,0x000500030000004eull,0x0000000000000000ull,0x0000000000000000ull,
0xffffffff00000000ull,0xfffffffe00000000ull,0xfffffffd00000000ull,0xfffffffc00000000ull,
0x0000000000000073ull,0x3605002511000000ull,0x0000000000000000ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000300000001ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000040ull,0x000000000000005dull,0x0000000000000000ull,
0x0000000000000001ull,0x0000000000000000ull,0x000000030000000bull,0x0000000000000000ull,
0x0000000000000000ull,0x000000000000009dull,0x000000000000005dull,0x0000000000000000ull,
0x0000000000000001ull,0x0000000000000000ull,0x0000000200000013ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000100ull,0x0000000000000048ull,0x0000000300000002ull,
0x0000000000000008ull,0x0000000000000018ull,0x7000000100000032ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000148ull,0x0000000000000020ull,0x0000000000000003ull,
0x0000000000000004ull,0x0000000000000008ull,0x7000000b0000004eull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000168ull,0x0000000000000010ull,0x0000000000000000ull,
0x0000000000000008ull,0x0000000000000008ull,0x0000000500000006ull,0x00000000000002f8ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000000000070ull,0x0000000000000070ull,
0x0000000000000008ull,0x0000000500000001ull,0x00000000000002f8ull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000070ull,0x0000000000000070ull,0x0000000000000008ull,
0x0000005801010001ull,0x0000000000000048ull,0x0000004800000042ull,0x0000003400080004ull,
0x0000000000000000ull,0x0000000000002041ull,0x0000000000000000ull,0x0000000000000052ull,
0x0000000000000000ull,0x0000000000000050ull,0x0000000000000000ull,0x0300042f2f0a0d4full,
0x7265762e0a0d29f0ull,0x342e38206e6f6973ull,0x65677261742e0a0dull,0x0d32355f6d732074ull,
0x7365726464612e0aull,0x3620657a69735f73ull,0x0d0a0d0a0d0a0d34ull,0x000000000000000aull,

};
#pragma const_seg()


}
#line 53 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-7_main.fatbin.c"


extern "C" {
#line 57 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-7_main.fatbin.c"
#pragma const_seg(".nvFatBinSegment")
__declspec(allocate(".nvFatBinSegment")) __declspec(align(8)) static const __fatBinC_Wrapper_t __fatDeviceText= 
	{ 0x466243b1, 1, fatbinData, 0 };
#pragma const_seg()

}
#line 64 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-7_main.fatbin.c"
#line 7 "C:\\Users\\Corrado Mio\\AppData\\Local\\Temp\\tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"
static void __nv_cudaEntityRegisterCallback(void **);
static void __sti____cudaRegisterAll(void);
#pragma section(".CRT$XCT",read)
__declspec(allocate(".CRT$XCT"))static void (*__dummy_static_init__sti____cudaRegisterAll[])(void) = {__sti____cudaRegisterAll};
static void __nv_cudaEntityRegisterCallback(
void **__T3)
{
{ volatile static void **__ref; __ref = (volatile void **)__T3; };
__nv_save_fatbinhandle_for_managed_rt(__T3);
}
static void __sti____cudaRegisterAll(void)
{
__cudaFatCubinHandle = __cudaRegisterFatBinary((void*)&__fatDeviceText); { void (*callback_fp)(void **) = (void (*)(void **))(__nv_cudaEntityRegisterCallback); (*callback_fp)(__cudaFatCubinHandle); __cudaRegisterFatBinaryEnd(__cudaFatCubinHandle); } atexit(__cudaUnregisterBinaryUtil);
}
#line 2 "tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"
#line 1 "tmpxft_000067d0_00000000-10_main.cudafe1.stub.c"

